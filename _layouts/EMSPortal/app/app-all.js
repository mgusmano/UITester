//@tag enterprise
/**
 * Reader class to access v1.1 SOAP (Simple Object Access Protocol) services.
 */
Ext.define('Ext.data.soap.Reader', {
    extend:  Ext.data.reader.Xml ,
    alias: 'reader.soap',
	
    getData: function(data) {
        var envelope = data.documentElement,
            // we can't always assume that the Body element's namespace prefix is "soap",
            // but we can assume that it is the same as the envelope's namespace prefix
            prefix = envelope.prefix; 

        return Ext.DomQuery.selectNode(prefix + '|Body', data);
    }
});

Ext.define('EMSPEED.baseclass.view.baseclassApplication', {
    //    extend: 'Ext.tab.Panel', tabPosition: 'bottom',
    //    setActivePanel: function (p) {
    //        this.setActiveTab(p);
    //    },

    extend:  Ext.panel.Panel , 
    layout: 'card',
    alias: 'widget.baseclassApplication',

    border: false,
    //bodyBorder: '3px 3px 3px 3px',
    //        t r b l
    padding: '3 3 3 3',

    style: {
        backgroundColor: '#E9E9E9',
        borderColor: '#6084A8'
    },

    bodyStyle: {
        borderColor: '#6084A8',
        borderWidth: '1px'
    },

    setActivePanel: function (p) {
        this.getLayout().setActiveItem(p);
    },

    config: {
        currentPanel: '',
        currentItem: ''
    },

    onRender: function () {
        //console.info('onRender BaseApplication: ' + this.id);
        //    navContext.activeAppObj = getObj(this.id);
        return this.callParent(arguments);
    },

    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },

    initComponent: function () {
        this.callParent(arguments);
    },
    //    setContext: function (context) {
    //        //console.info('setContext baseapproot: ' + context);
    //        //        this.setActiveTab(context);
    //        //        var theTab = theAppPanel.child('#' + context);
    //        theAppPanel.layout.setActiveItem(navContext.activeAppObj);
    //        //navContext.activeAppObj.layout.setActiveItem(navContext.activeAppObj.currentViewerObj);
    //        navContext.setActiveItem(navContext.activeAppObj.currentViewer);
    //    },

    setCurrentPanel: function (value) {
        //console.info('setCurrentPanel BaseApplication: ' + value);
        //var a = this.getActiveTab();
        //console.info('active tab 1:');
        //console.info(a);
        //console.info(this);
        //this.setActiveTab(value);
        //var b = this.getActiveTab();
        //console.info('act1ve tab 2:');
        //console.info(b);

        //    navContext.setTheActivePanel(navContext.getActiveContext(), value);
        return value;
    },


    applyCurrentPanel: function (value) {
        console.info('applyCurrentPanel BaseApplication: ' + value + ' id: ' + this.id);
        return value;
    },




    listeners: {
        //        beforeactivate: function (t, eOpts) {
        //            navContext.activeAppObj = getObj(this.id);
        //        },
        tabchange: function (tabPanel, newCard, oldCard, eOpts) {
            console.info('tabchange for ' + tabPanel.id + ' ' + 'new: ' + newCard.id + ' old: ' + oldCard.id);
            navContext.setTheActivePanel(navContext.getActiveContext(), newCard.id);
        }
    }

});

Ext.define('EMSPEED.baseclass.view.baseclassContainer', {
    extend:  Ext.container.Container ,
    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },


    border: false,
    //        t   r   b   l
    padding: '8px 0px 8px 8px',

//    dockedItems: [{
//        xtype: 'container',
//        height: '25px',
//        dock: 'top',
//        items: [
//            {
//                xtype: 'label', itemId: 'theTitle', height: 30, text: 'hitest for title', margin: '0 0 0 8px',
//                style: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '24px' }
//            }
//        ]
//    }],

    initComponent: function () {
        //    console.info('initComponent BaseContainer: ' + this.id);
        this.callParent(arguments);

//        this.insert(0,
//            {
//                xtype: 'container',
//                //height: '25px',
//                dock: 'top',
//                items: [
//                        {
//                            xtype: 'label', itemId: 'theTitle', height: 30, text: 'hitest for title', margin: '0 0 0 8px',
//                            style: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '24px' }
//                        }
//                    ]
//            }        
//        );
    },
    onRender: function () {
        //    console.info('onRender BaseContainer: ' + this.id);
        this.callParent(arguments);
    },
    listeners: {
        beforeactivate: function (t, eOpts) {
            //        console.info('beforeactivate BaseContainer: ' + this.id);
        }
    }
});

Ext.define('EMSPEED.baseclass.view.baseclassPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.baseclassPanel',
    layout: 'fit',
    bodyStyle: { borderWidth: '0px' },

    //         t    r    b    l
    padding: '8px 0px 0px 8px',

    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },

    setTheTitle: function (value) {
        this.dockedItems.items[0].setText(value);
        //alert(value);
        //debugger;
        //return me.up().dockedItems.items[0].down('#theTitle');
    },

    dockedItems: [{
        xtype: 'label',
        //height: '25px',
        dock: 'top',
        itemId: 'theTitle', 
        height: 25, 
        text: '', 
        margin: '0 0 0 0',
        style: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '24px' }
    }],

    //bodyPadding: 10,
    preventHeader: true,
    autoScroll: true,
    border: false,

    initComponent: function () {
        // this.getHeader().hide();
        //    console.info('initComponent BasePanel: ' + this.id);
        this.callParent(arguments);
    },
    onRender: function () {
        //    console.info('onRender BasePanel: ' + this.id);
        this.callParent(arguments);
    },
    listeners: {
        beforeactivate: function (t, eOpts) {
            //console.info('beforeactivate BasePanel: ' + this.id);
            //navContext.setActivePanel(navContext.getActiveApplication(), this.id);
            //getObj(navContext.getActiveApplication()).setCurrentPanel(this.id);
        }
    }
});

Ext.define('EMSPEED.baseclass.controller.baseclassController', {
    extend:  Ext.app.Controller ,
               
                                                      
                                                    
                                               
      

    init: function () {
        this.control({
//            '#snapshotsMainPanel': { activate: this.snapshotsMainPanel_activate }
        });
    }

//    snapshotsMainPanel_activate: function (panel, e, eOpts) {
//        Ext.util.Cookies.set('projectId', '12345');
//    }

});

// vim: sw=2:ts=2:nu:nospell:fdc=2:expandtab
/**
* @class Ext.ux.SimpleIFrame
* @extends Ext.Panel
*
* A simple ExtJS 4 implementaton of an iframe providing basic functionality.
* For example:
*
* var panel=Ext.create('Ext.ux.SimpleIFrame', {
*   border: false,
*   src: 'http://localhost'
* });
* panel.setSrc('http://www.sencha.com');
* panel.reset();
* panel.reload();
* panel.getSrc();
* panel.update('<div><b>Some Content....</b></div>');
* panel.destroy();
*
* @author    Conor Armstrong
* @copyright (c) 2011 Conor Armstrong
* @date      12 April 2011
* @version   0.1
*
* @license Ext.ux.SimpleIFrame.js is licensed under the terms of the Open Source
* LGPL 3.0 license. Commercial use is permitted to the extent that the 
* code/component(s) do NOT become part of another Open Source or Commercially
* licensed development library or toolkit without explicit permission.
* 
* <p>License details: <a href="http://www.gnu.org/licenses/lgpl.html"
* target="_blank">http://www.gnu.org/licenses/lgpl.html</a></p>
*
*/

             
	             
   

Ext.define('COMMON.simpleIframe', {
    extend:  Ext.Panel ,
    alias: 'widget.simpleIframe',
    src: 'about:blank',
    border: false,
    height: '100%',
    loadingText: 'Loading ...',
    initComponent: function () {
        this.updateHTML();
        this.callParent(arguments);
    },
    updateHTML: function () {
        this.html = '<iframe id="iframe-' + this.id + '"' +
        ' style="overflow:auto;width:100%;height:100%"' +
        ' marginheight="0" hspace="0" scrolling="yes" frameBorder="0" ' +
        ' src="' + this.src + '"' +
        '></iframe>';
    },
    reload: function () {
        this.setSrc(this.src);
    },
    reset: function () {
        var iframe = this.getDOM();
        var iframeParent = iframe.parentNode;
        if (iframe && iframeParent) {
            iframe.src = 'about:blank';
            iframe.parentNode.removeChild(iframe);
        }

        iframe = document.createElement('iframe');
        iframe.frameBorder = 0;
        iframe.src = this.src;
        iframe.id = 'iframe-' + this.id;
        iframe.style.overflow = 'auto';
        iframe.style.width = '100%';
        iframe.style.height = '100%';
        iframe.style.zIndex = '-1';
        iframeParent.appendChild(iframe);
    },
    setSrc: function (src, loadingText) {
        this.src = src;
        var iframe = this.getDOM();
        if (iframe) {
            iframe.src = src;
        }
    },
    getSrc: function () {
        return this.src;
    },
    getDOM: function () {
        return document.getElementById('iframe-' + this.id);
    },
    getDocument: function () {
        var iframe = this.getDOM();
        iframe = (iframe.contentWindow) ? iframe.contentWindow : (iframe.contentDocument.document) ? iframe.contentDocument.document : iframe.contentDocument;
        return iframe.document;
    },
    destroy: function () {
        var iframe = this.getDOM();
        if (iframe && iframe.parentNode) {
            iframe.src = 'about:blank';
            iframe.parentNode.removeChild(iframe);
        }
        this.callParent(arguments);
    },
    update: function (content) {
        this.setSrc('about:blank');
        try {
            var doc = this.getDocument();
            doc.open();
            doc.write(content);
            doc.close();
        } catch (err) {
            // reset if any permission issues
            this.reset();
            var doc = this.getDocument();
            doc.open();
            doc.write(content);
            doc.close();
        }
    }
});

Ext.define('EMSPEED.cdp.view.cdpBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.cdpBasePanel',
    id: 'cdpBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('PDD CLMS');
    },
    items: [
        {
            xtype: 'simpleIframe',
            src: 'CDPs.aspx'
        }
    ]
});

Ext.define('EMSPEED.cdp.controller.cdpController', {
    extend:  Ext.app.Controller ,
               
                                       
      

    init: function () {
        this.control({
            '#cdpBasePanel': { activate: this.cdpBasePanel_activate }
        });
    },

    cdpBasePanel_activate: function (panel, e, eOpts) {
        Ext.util.Cookies.set('projectId', '12345');
        // alert('cdpMainPanel_activate');
    }

});

Ext.define('EMSPEED.contextcontroller.view.contextcontroller', {
    singleton: true,
    alternateClassName: 'contextcontroller',

    constructor: function () {
        this.callParent(arguments);
    }

});

function getMyProjects() {
    var menuItemMyProjects = 'myprojectsBasePanel';
    var theItems = Ext.getCmp('projectApplication').items.items;
    var found = false;
    for (var i = 0; i < theItems.length; i++) {
        if (menuItemMyProjects === theItems[i].xtype) {
            found = true;
        }
    }
    if (found === false) {
        Ext.getCmp('projectApplication').add({ xtype: menuItemMyProjects });
    }

    document.getElementById("teamSite").style.display = 'none';

    Ext.getCmp('projectApplication').setActivePanel(menuItemMyProjects);
};

function getPopupEdit(panel) {
    var win = Ext.create('EMSPEED.' + panel + '.view.' + panel + 'BasePanel', {});
    win.show();
};

Ext.define('EMSPEED.contextcontroller.view.contextcontrollerBasePanel', {
    extend:  Ext.container.Container ,
    alias: 'widget.contextcontrollerBasePanel',
    //id: 'contextcontrollerBasePanel',
               
                                                          
      
    //height: 51,
    //layout: 'fit',
    id: 'contextcontrollerBasePanel', cls: 'emspeed-header',
    
    setContextData: function () {
        Ext.getCmp('emspeed-header-menu').getStore().loadData(project.last5Projects);
        Ext.getCmp('emspeed-gear').getStore().loadData(project.gearMenu);
        Ext.getCmp('auth-user').html = 'Welcome ' + project.user.preferredName;
    },


    initComponent: function () {
        this.items = [
                {
                    xtype: 'container', layout: 'fit', id: 'identity', cls: 'identity',
                    html: '<img id="image-1016" src="/_layouts/EMSPortal/app/projectheader/resources/images/madEMSPEED.jpg">'
                },
                {
                    xtype: 'dataview',
                    id: 'emspeed-header-menu',
                    emptyText: 'No data available',
                    itemSelector: 'aa',
                    deferInitialRefresh: false,
                    store: Ext.create('Ext.data.Store', {
                        fields: ['menuItemName', 'menuItemUrl']
                    }),
                    tpl: [
                        '<div class="emspeed-header-menu">Projects',
                            '<div class="emspeed-header-submenu"><img src="/_layouts/images/EMSPortal/pop_up_arrow.png" />',
                                    '<ul class="submenu-section">',
                                        '<li class="emspeed-menu-heading">5 Most Recent:</li>',
                                        '<tpl for=".">',
                                            '<li><a href="/sites/{menuItemUrl}/Portal.aspx">{menuItemUrl} - {menuItemName}</a></li>',
                                        '</tpl>',
                                    '</ul>',
                                    '<ul class="submenu-section emspeed-text-bold">',
                                        '<li><a href="#" onclick="getMyProjects()">All My Projects</a></li>',
                                    '</ul>',
                            '</div> ',
                        '</div> '
                    ]
                },
                {
                    xtype: 'container',
                    layout: 'fit',
                    id: 'auth-user',
                    cls: 'auth-user'
                },
                {
                    xtype: 'dataview',
                    id: 'emspeed-gear',
                    itemSelector: 'aa',
                    emptyText: 'No data available',
                    deferInitialRefresh: true,
                    store: Ext.create('Ext.data.Store', {
                        fields: ['menuItemName', 'menuItemUrl']
                    }),
                    tpl: [
                        '<div class="emspeed-gear">',
                            '<ul id="gears">',
                                '<li class="gear-icon" id="gear-icon">',
                                    '<a href="#"><img src="/_layouts/images/EMSPortal/icon-gear.png" class="emspeed-show-gear-menu emspeed-icon-size" alt="" title="" /></a>',
                                    '<div class="gears-submenu-container"><img src="/_layouts/images/EMSPortal/pop_up_arrow.png" />',
                                    '<ul class="gears-submenu">',
                                        '<tpl for=".">',
                                           '<tpl if="menuItemName==' + "'Edit Team Site'" + '">',
                                                '<li><a id="teamSite" style="display:block;" href="#" onclick=getPopupEdit("editteamsite")>{menuItemName}</a></li>',
                                            '<tpl else>',
                                                '<tpl if="menuItemName==' + "'Feedback'" + '">',
                                                    '<li><a id="teamSite" style="display:block;" href="#" onclick=getPopupEdit("feedback")>{menuItemName}</a></li>',
                                                '<tpl else>',
                                                    '<li><a target="_blank" href="{menuItemUrl}">{menuItemName}</a></li>',
                                                '</tpl>',
                                            '</tpl>',
                                        '</tpl>',
                                    '</ul>',
                                    '</div>',
                                '</li>',
                                '<li class="fullscreen-icon">',
                                    '<a href="#"><img src="/_Layouts/EMSPortal/app/projectheader/resources/images/icon-reload-animated.gif" id="emspeed-reload" onclick="reloadPage()" style="height:20px; cursor:pointer" /></a>',
                                '</li>',
                            '</ul>',
                        '</div>'
                    ]
                }
        ];
        this.callParent(arguments);
    }
});

/*$(function () {

    $('body').on("mouseenter", "#gear-icon", function () {
        var $img = $(this).find('img');
        $img.attr("src", "/_layouts/EMSPortal/app/projectheader/resources/images/gear_over.png");
    }).on("mouseleave", "#gear-icon", function () {
        var $img = $(this).find('img');
        $img.attr('src', "/_layouts/EMSPortal/app/projectheader/resources/images/gear.png");
    });

});*/



$(function () {
    $("body").on("click", "#emspeed-fullscreen", function () {
        console.log("on click");
        var theToolbar = Ext.getCmp('menuHider'),
slbHeader = Ext.get('slb-header');
        var theMenu = Ext.getCmp(theToolbar.menuToHide);

        if (theToolbar.menuHidder) {
            $('#emspeed-menu li span').hide();
            theMenu.setWidth(50);
            //c.setSrc(com.appFolder + '/project' + '/resources/images/menu_collapsed.png'); 
            theToolbar.menuHidder = false;
        } else {
            $('#emspeed-menu li span').show();
            theMenu.setWidth(147);
            //c.setSrc(com.appFolder + '/project' + '/resources/images/menu_expaned.png'); 
            theToolbar.menuHidder = true;
        }
    });
});


Ext.define('EMSPEED.contextcontroller.view.contextcontrollerHoverButton', {
    extend:  Ext.Button ,
    alias: 'widget.hoverButton',
    iconAlign: 'bottom',
    iconOver: com.appFolder + '/contextcontroller' + '/resources/images/ContextUpArrowOver.png',
    iconOut: com.appFolder + '/contextcontroller' + '/resources/images/ContextUpArrow.png',
    icon: com.appFolder + '/contextcontroller' + '/resources/images/ContextUpArrow.png',

    hideTask: null,
    isOver: false,
    hideTaskMs: 5,
    hideTaskFn: function () {
        if (this.isOver) {
            if (this.hideTask !== null) this.hideTask.cancel();
            return;
        }
        if (this.hideTask !== null) {
            this.hideTask.cancel();

        }
        this.hideTask = new Ext.util.DelayedTask(this.hideIt, this);
        this.hideTask.delay(this.hideTaskMs);
    },

    hideIt: function () {
        this.hideMenu();
        this.setIcon(this.iconOut);
        this.ownerCt.focus();
    },

    applyListeners: function (menu, cfg) {
        Ext.apply(menu, cfg);
        Ext.each(menu.items, function (item, idx, allItems) {
            if (item.menu) {
                this.applyListeners(item.menu, cfg);
            }
        }, this);
    },

    initComponent: function () {
        var config = {}, menuConfig = {};
        if (Ext.isDefined(this.initialConfig.menu)) {
            config = {
                listeners: {
                    mouseover: {
                        fn: function (b) {
                            this.setIcon(this.iconOver);
                            this.isOver = true;
                            b.showMenu();
                        },
                        scope: this
                    },
                    mouseout: {
                        fn: function (b) {
                            this.isOver = false;
                            this.hideTaskFn();
                        },
                        scope: this
                    }
                }
            };
            // add listeners to see if user is over extended menu list
            menuConfig = {
                listeners: {
                    // if mousing over menu list, disable timeout
                    mouseover: {
                        fn: function (b) {
                            // cancel hide if they went away and came back
                            if (this.hideTask !== null) {
                                this.hideTask.cancel();
                                this.hideTask = null;
                            }
                        },
                        scope: this
                    },
                    // on mousing out of menu list, resume timeout
                    mouseleave: {
                        fn: function (b) {
                            this.hideTaskFn();
                        },
                        scope: this
                    }
                }
            };

            //apply mouseover/leave listeners to all submenus recursively
            this.applyListeners(this.menu, menuConfig);
        }

        Ext.apply(this, Ext.apply(this.initialConfig, config));
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.contextcontroller.view.contextcontrollerProjectMenu', {
    extend:  Ext.menu.Menu ,
    alias: 'widget.contextcontrollerProjectMenu',
               
                                                          
      
    //width: 300,
    //height: 390,
    plain: true,
    layout: 'vbox',
    ui: 'EMSPEED',
    shadow: true,
    shadowOffset: 30,
    style: {
        borderTop: '1px'
    },
    dockedItems: [
        { xtype: 'container', html: '<div id="line1"menuTop style="margin: -17px 0px 0px 96px; width: 585px; height: 1px; border: 0px #000 solid; background-color: #6084A8;"></div>' }
    ],

    setTheMenu: function (id, to) {
        var theData = [];
        if (to === 'Other') {
            theData = [
                { id: 'myprojects', text: 'My Projects' }
            ];
        }
        else {
            theData = project.last5Projects;
        };
        var store = Ext.create('Ext.data.Store', {
            fields: ['text'],
            data: theData
        });
        Ext.getCmp(id).bindStore(store);
    },

    initComponent: function () {
        Ext.apply(this, {
            items: [


                {
                    xtype: 'dataview',
                    margin: '10 0 0 0',
                    id: 'viewMenu2',
                    listeners: {
                        itemclick: function (dataview, record, item, index, e, eOpts) {
                            document.location.href = '/sites/' + record.data.id + '/portal.aspx';
                        }
                    },
                    singleSelect: true,
                    //overItemCls: 'x-view-over',
                    selectedItemCls: 'emspeed-item-over',
                    itemSelector: 'li.liclass',
                    emptyText: 'No data available',
                    deferInitialRefresh: false,
                    tpl: [
                        '<ul class="emspeed-header-submenu">',
                        '<li class="emspeed-menu-title">5 Most Recent:</li>',
                        '<tpl for=".">',
                            '<li class="emspeed-menu-item liclass" >{text}</li>',
                        '</tpl>',
                        '<li class="emspeed-menu-footer emspeed-menu-item">My Projects</li>',
                        '</ul>'
                    ]
                }



            ]
        });
        this.callParent(arguments);
        //this.setTheMenu("viewMenu2", "Links");
        //this.setTheMenu("viewMenu3", "Other");
    }


});

Ext.define('EMSPEED.contextcontroller.view.contextcontrollerUserInfo', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.contextcontrollerUserInfo',
               
                                                          
      
    
    initComponent: function () {
        this.items = [
            {
                xtype: 'label',
                text: 'Welcome John Doe'
            }
        ];
        this.callParent(arguments);
    }
   

});

Ext.define('EMSPEED.contextcontroller.controller.contextcontrollerController', {
    extend:  Ext.app.Controller ,

               
                                                               
                                                                        
                                                                          
                                                                          
                                                                      
          

    init: function () {
        this.control({
            '#contextcontrollerBasePanel':
                {
                    activate: this.contextcontrollerBasePanel_activate,
                    afterlayout: this.contextcontrollerBasePanel_afterlayout
                },
            '#btnHelp2': { click: this.btnHelp2_click }

        });
    },

    contextcontrollerBasePanel_activate: function (panel, e, eOpts) {
        //alert('projectheaderBasePanel_activate');
        //Ext.getCmp('lblCdpPercent').setText('75%');
        //Ext.getCmp('pbrCdpPercent').updateProgress(.75, '75%', true);
    },

    contextcontrollerBasePanel_afterlayout: function (panel, layout, eOpts) {
        //alert('projectheaderBasePanel_activate');
        //Ext.getCmp('lblCdpPercent').setText('75%');
        //Ext.getCmp('pbrCdpPercent').updateProgress(.75, '75%', true);
    },

    btnHelp2_click: function (button, e, eOpts) {
        Ext.getCmp('txtDfMM').setValue(parseInt((Math.random() * 100).toFixed(2)) + '%');
        Ext.getCmp('txtDfR').setValue(parseInt((Math.random() * 100).toFixed(2)) + '%');
        Ext.getCmp('txtDfMSC').setValue(parseInt((Math.random() * 100).toFixed(2)) + '%');
        Ext.getCmp('txtDfM').setValue(parseInt((Math.random() * 100).toFixed(2)) + '%');

        var theMeterValue = parseInt((Math.random() * 100).toFixed(2)) + '%';

        Ext.getCmp('theMeterLabel').setText(theMeterValue);
        //Ext.getCmp('theMeter').setHtml('<div class="meter blue nostripes"><span style="width: ' + theMeterValue + '"></span></div>');

        Ext.getCmp('theMeter').getEl().dom.innerHTML = '<div class="meter blue nostripes"><span style="width: ' + theMeterValue + '"></span></div>'

        Ext.getCmp('txtProjectManager').setValue('Marc Gusmano');
        Ext.getCmp('txtProductChampion').setValue('Marc Gusmano');
       
    }

});

Ext.define('Ext.portal.Portlet', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.portlet',
    layout: 'fit',
    anchor: '100%',
    frame: true,
    closable: true,
    collapsible: true,
    animCollapse: true,
    bodyPadding: 5,
    bodyBorder: 0,
    border: false,
    borderWidth: 0,
//    bodyStyle: {
//        borderColor: 'red',
//        borderStyle: 'solid'
//    },

//    bodyStyle: {
//        background: '#ffc',
//        padding: '10px'
//    },

    //tools: com.getTools(),


    get: function (s) {
         return this.currConfig.get(s)
    },

    configModified: function (s) {
        alert('configModified');
        alert(Ext.encode(this.currConfig));
        this.currConfig = s;
        alert(Ext.encode(this.currConfig));
        this.loadPage();
    },

    loadPage: function () {
        console.debug('baseportlet loadPage');
    },

//    draggable: {
//        moveOnDrag: false    
//    },
    cls: 'x-portlet',

    // Override Panel's default doClose to provide a custom fade out effect
    // when a portlet is removed from the portal
    doClose: function() {
        if (!this.closing) {
            this.closing = true;
            this.el.animate({
                opacity: 0,
                callback: function(){
                    this.fireEvent('close', this);
                    this[this.closeAction]();
                },
                scope: this
            });
        }
    }
});

Ext.define('Ext.portal.PortalColumn', {
    extend:  Ext.container.Container ,
    alias: 'widget.portalcolumn',

               
                                      
                            
      




    padding: '0 8 0 0',
    layout: 'anchor',
    defaultType: 'portlet',
    cls: 'x-portal-column'

    // This is a class so that it could be easily extended
    // if necessary to provide additional behavior.
});

Ext.define('Ext.portal.PortalDropZone', {
    extend:  Ext.dd.DropTarget ,

    constructor: function (portal, cfg) {
        this.portal = portal;
        Ext.dd.ScrollManager.register(portal.body);
        Ext.portal.PortalDropZone.superclass.constructor.call(this, portal.body, cfg);
        portal.body.ddScrollConfig = this.ddScrollConfig;
    },

    ddScrollConfig: {
        vthresh: 50,
        hthresh: -1,
        animate: true,
        increment: 200
    },

    createEvent: function (dd, e, data, col, c, pos) {
        return {
            portal: this.portal,
            panel: data.panel,
            columnIndex: col,
            column: c,
            position: pos,
            data: data,
            source: dd,
            rawEvent: e,
            status: this.dropAllowed
        };
    },




    notifyOver: function (dd, e, data) {
        var xy = e.getXY(),
            portal = this.portal,
            proxy = dd.proxy;

        // case column widths
        if (!this.grid) {
            this.grid = this.getGrid();
        }

        // handle case scroll where scrollbars appear during drag
        var cw = portal.body.dom.clientWidth;
        if (!this.lastCW) {
            // set initial client width
            this.lastCW = cw;
        } else if (this.lastCW != cw) {
            // client width has changed, so refresh layout & grid calcs
            this.lastCW = cw;
            //portal.doLayout();
            this.grid = this.getGrid();
        }

        // determine column
        var colIndex = 0,
            colRight = 0,
            cols = this.grid.columnX,
            len = cols.length,
            cmatch = false;

        for (len; colIndex < len; colIndex++) {
            colRight = cols[colIndex].x + cols[colIndex].w;
            if (xy[0] < colRight) {
                cmatch = true;
                break;
            }
        }
        // no match, fix last index
        if (!cmatch) {
            colIndex--;
        }

        // find insert position
        var overPortlet, pos = 0,
            h = 0,
            match = false,
            overColumn = portal.items.getAt(colIndex),
            portlets = overColumn.items.items,
            overSelf = false;

        len = portlets.length;

        for (len; pos < len; pos++) {
            overPortlet = portlets[pos];
            h = overPortlet.el.getHeight();
            if (h === 0) {
                overSelf = true;
            } else if ((overPortlet.el.getY() + (h / 2)) > xy[1]) {
                match = true;
                break;
            }
        }

        pos = (match && overPortlet ? pos : overColumn.items.getCount()) + (overSelf ? -1 : 0);
        var overEvent = this.createEvent(dd, e, data, colIndex, overColumn, pos);

        if (portal.fireEvent('validatedrop', overEvent) !== false && portal.fireEvent('beforedragover', overEvent) !== false) {

            // make sure proxy width is fluid in different width columns
            proxy.getProxy().setWidth('auto');
            if (overPortlet) {
                dd.panelProxy.moveProxy(overPortlet.el.dom.parentNode, match ? overPortlet.el.dom : null);
            } else {
                dd.panelProxy.moveProxy(overColumn.el.dom, null);
            }

            this.lastPos = {
                c: overColumn,
                col: colIndex,
                p: overSelf || (match && overPortlet) ? pos : false
            };
            this.scrollPos = portal.body.getScroll();

            portal.fireEvent('dragover', overEvent);
            return overEvent.status;
        } else {
            return overEvent.status;
        }

    },

    notifyOut: function () {
        delete this.grid;
    },

    notifyDrop: function (dd, e, data) {
        delete this.grid;
        if (!this.lastPos) {
            return;
        }
        var c = this.lastPos.c,
            col = this.lastPos.col,
            pos = this.lastPos.p,
            panel = dd.panel,
            dropEvent = this.createEvent(dd, e, data, col, c, pos !== false ? pos : c.items.getCount());

        if (this.portal.fireEvent('validatedrop', dropEvent) !== false &&
            this.portal.fireEvent('beforedrop', dropEvent) !== false) {

            Ext.suspendLayouts();

            // make sure panel is visible prior to inserting so that the layout doesn't ignore it
            panel.el.dom.style.display = '';
            dd.panelProxy.hide();
            dd.proxy.hide();

            if (pos !== false) {
                c.insert(pos, panel);
            } else {
                c.add(panel);
            }

            Ext.resumeLayouts(true);

            this.portal.fireEvent('drop', dropEvent);

            // scroll position is lost on drop, fix it
            var st = this.scrollPos.top;
            if (st) {
                var d = this.portal.body.dom;
                setTimeout(function () {
                    d.scrollTop = st;
                },
                10);
            }
        }

        delete this.lastPos;
        return true;
    },

    // internal cache of body and column coords
    getGrid: function () {
        var box = this.portal.body.getBox();
        box.columnX = [];
        this.portal.items.each(function (c) {
            box.columnX.push({
                x: c.el.getX(),
                w: c.el.getWidth()
            });
        });
        return box;
    },

    // unregister the dropzone from ScrollManager
    unreg: function () {
        Ext.dd.ScrollManager.unregister(this.portal.body);
        Ext.portal.PortalDropZone.superclass.unreg.call(this);
    }
});

Ext.define('Ext.portal.PortalPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.portalpanel',

               
                                      

                                    
                                 
      

    border: 0,
    cls: 'x-portal',
    bodyCls: 'x-portal-body',
    defaultType: 'portalcolumn',
    autoScroll: true,

    manageHeight: false,

    listeners: {
        drop: function () {
            //alert('drop');
            dashboard.saveState();

        }
    },



    initComponent: function () {
        var me = this;

        // Implement a Container beforeLayout call from the layout to this Container
        this.layout = {
            type: 'column'
        };
        this.callParent();

        this.addEvents({
            validatedrop: true,
            beforedragover: true,
            dragover: true,
            beforedrop: true,
            drop: true
        });
    },



    // Set columnWidth, and set first and last column classes to allow exact CSS targeting.
    beforeLayout: function () {
        var items = this.layout.getLayoutItems(),
            len = items.length,
            firstAndLast = ['x-portal-column-first', 'x-portal-column-last'],
            i, item, last;

        for (i = 0; i < len; i++) {
            item = items[i];
            if (item.columnWidth === undefined) {
                item.columnWidth = 1 / len;
            }
            last = (i == len - 1);

            if (!i) { // if (first)
                if (last) {
                    item.addCls(firstAndLast);
                } else {
                    item.addCls('x-portal-column-first');
                    item.removeCls('x-portal-column-last');
                }
            } else if (last) {
                item.addCls('x-portal-column-last');
                item.removeCls('x-portal-column-first');
            } else {
                item.removeCls(firstAndLast);
            }
        }

        return this.callParent(arguments);
    },

    // private
    initEvents: function () {
        this.callParent();
        this.dd = Ext.create('Ext.portal.PortalDropZone', this, this.dropConfig);
    },



    // private
    beforeDestroy: function () {
        if (this.dd) {
            this.dd.unreg();
        }
        this.callParent();
    }
});

Ext.define('EMSPEED.dashboard.view.dashboard', {
    singleton: true,
    alternateClassName: 'dashboard',

    getTools: function () {
        return [


            //{
            //    xtype: 'tool',
            //    type: 'refresh',
            //    scope: this,
            //    handler: function (e, target, panelHeader, tool) {
            //        debugger;
            //        panelHeader.ownerCt.reload();


            //    }
            //}



            //{
            //    xtype: 'tool',
            //    type: 'gear',
            //    scope: this,
            //    handler: function (e, target, panelHeader, tool) {
            //        if (this.currentPanelHeader != undefined) {
            //            this.currentPanelHeader.el.dom.style.backgroundColor = '#6084a8';
            //        }
            //        this.currentPanelHeader = panelHeader;
            //        panelHeader.el.dom.style.backgroundColor = 'red';

            //        var p = Ext.getCmp('dashboardProperties');
            //        p.clientArea = panelHeader.ownerCt;
            //        p.panelHeader = panelHeader;
            //        p.setTitle('Configuration for ' + panelHeader.title);
            //        if (p.hidden === true) {
            //            p.setVisible(true);
            //        }
            //        else {
            //            p.setGrid();
            //        }
            //    }
            //}

//            {
//                xtype: 'tool',
//                type: 'gear',
//                handler: function (e, target, panelHeader, tool) {
//                    if (this.c === undefined) {
//                        this.c = Ext.create('EMSPEED.dashboard.view.dashboardPortletProperties', { clientArea: panelHeader.ownerCt, title: 'Configuration for ' + panelHeader.title });
//                    }
//                    this.c.show();
//                }
//            }
        ];
    },


    reloadPortlets: function () {
        var d = Ext.getCmp('dashboardBasePanel');
        var portalpanels = d.items.items;
        for (var i = 0; i < portalpanels.length; i++) {
            var portalcolumns = portalpanels[i].items.items
            for (var j = 0; j < portalcolumns.length; j++) {
                var dashboardPortlets = portalcolumns[j].items.items
                for (var k = 0; k < dashboardPortlets.length; k++) {
                    dashboardPortlets[k].reload();
                }
            }
        }
        Ext.getCmp('usersinroleBasePanel').reload();
    },



    saveState: function () {
        var a = [];
        var d = Ext.getCmp('dashboardBasePanel');
        var portalpanels = d.items.items;
        for (var i = 0; i < portalpanels.length; i++) {
            var pp = {};
            pp.xtype = portalpanels[i].xtype;
            pp.items = [];
            var portalcolumns = portalpanels[i].items.items
            for (var j = 0; j < portalcolumns.length; j++) {
                var pc = {};
                pc.xtype = portalcolumns[j].xtype;
                pc.columnWidth = portalcolumns[j].columnWidth;
                pc.items = [];
                var dashboardPortlets = portalcolumns[j].items.items
                for (var k = 0; k < dashboardPortlets.length; k++) {
                    var dp = {};
                    dp.xtype = dashboardPortlets[k].xtype;
                    dp.collapsed = dashboardPortlets[k].collapsed;
                    dp.theConfig = dashboardPortlets[k].theConfig;
                    pc.items.push(dp);
                }
                pp.items.push(pc);
            }
            a.push(pp);
        }
        //        alert(Ext.encode(a));
        var dateEnd = new Date();
        dateEnd.setDate(dateEnd.getDate() + 365);
        Ext.util.Cookies.set(project.state, Ext.encode(a), dateEnd);
    },

    daysDiff: function (StartDate, EndDate) {
        // Convert both dates to milliseconds
        var fromMs = StartDate.getTime();
        var toMs = EndDate.getTime();
        // Calculate the difference in milliseconds
        var difference_ms = toMs - fromMs;
        var one_day = 1000 * 60 * 60 * 24;
        // Convert back to days and return
        var daysDiff = Math.round(difference_ms / one_day);
        return daysDiff;
    },

    loading: 0,
    startLoading: function () {
        this.loading++;
        if (this.loading == 1) {
                Ext.MessageBox.show({
                    title: 'Please wait',
                    width: 230,
                    maxWidth: 230,
                    height: 80,
                    maxHeight: 80,
                    //progress: false,
                    closable: false,
                    msg: 'Loading data...'
                });
        }
    },
    endLoading: function () {
        this.loading--;
        if (this.loading === 0) {
            Ext.MessageBox.hide();

            //var p = Ext.getCmp('projectApplication');
            //p.add({ xtype: 'manageteamBasePanel' });
            //p.add({ xtype: 'viewteamBasePanel' });
            //p.add({ xtype: 'pddsummaryBasePanel' });
            //p.add({ xtype: 'cdpBasePanel' });
            //p.add({ xtype: 'loadsnapshotBasePanel' });
            //p.add({ xtype: 'createsnapshotBasePanel' });
            //p.add({ xtype: 'clonepmtBasePanel' });
        }
    }
});



//Ext.define('EMSPEED.dashboard.view.dashboardPortletProperties', {
//    extend: 'Ext.window.Window',
//    alias: 'widget.dashboardPortletProperties',
//    closeAction: 'hide',
//    closable: false,
//    layout: 'fit',
//    modal: true,
//    border: false,
//    resizable: false,

//    width: 500,
//    padding: '10 10 0 10',

//    listeners: {
//        show: function (me, eOpts) {
//            var g = this.down('propertygrid');
//            g.getStore().sorters.items = [];
//            this.theConfig = {};
//            for (var propertyName in this.clientArea.theConfig) {

//                if( Object.prototype.toString.call( this.clientArea.theConfig[propertyName] ) === '[object Object]' ) {
//                    this.theConfig[propertyName] = Ext.encode(this.clientArea.theConfig[propertyName]);
//                }
//                else {
//                    this.theConfig[propertyName] = this.clientArea.theConfig[propertyName];
//                }
//            }
//            console.log(this.theConfig);
//            console.log(this.clientArea.sourceConfig);
//            g.setSource(this.theConfig, this.clientArea.sourceConfig);
//        }
//    },

//    initComponent: function () {
//        Ext.apply(this, {
//            items: [
//                {
//                    xtype: 'form',
//                    border: false,
//                    bodyBorder: false,
//                    items: [
//                        {
//                            xtype: 'propertygrid',
//                            enableColumnResize: false,
//                            nameColumnWidth: 150,
//                            buttons: [
//                                {
//                                    text: 'OK',
//                                    scope: this,
//                                    handler: function () {
//                                        dashboard.startLoading();

//                                        var g = this.down('propertygrid');
//                                        var theStore = g.store;

//                                        for (var i = 0; i < theStore.getCount(); i++) {
//                                            var r = theStore.getAt(i);
//                                            if (r.data.name.indexOf('Date') !== -1) {
//                                                var d = new Date(r.data.value);
//                                                var dString = Ext.Date.format(d, 'm/d/Y');
//                                                this.clientArea.theConfig[r.data.name] = dString;
//                                            }
//                                            else {
//                                                this.clientArea.theConfig[r.data.name] = r.data.value;
//                                            }
//                                        }
//                                        this.clientArea.configModified(this.clientArea.theConfig);
//                                        dashboard.saveState();
//                                        this.hide();

//                                        dashboard.endLoading();
//                                    }
//                                },
//                                {
//                                    text: 'Cancel',
//                                    scope: this,
//                                    handler: function () {
//                                        this.hide();
//                                    }
//                                }
//                            ]
//                        }
//                    ]
//                }
//            ]
//        });
//        this.callParent(arguments);
//    },
////    config: {
////        theConfig: null
////    },
//    constructor: function (cfg) {
//        this.initConfig(cfg);
//        this.callParent(arguments);
//    }
//});


    //    tools: [
    //            { type: 'toggle' },
    //            { type: 'close' },
    //            { type: 'minimize' },
    //            { type: 'maximize' },
    //            { type: 'restore' },
    //            { type: 'gear' },
    //            { type: 'prev' },
    //            { type: 'next' },
    //            { type: 'pin' },
    //            { type: 'unpin' },
    //            { type: 'right' },
    //            { type: 'left' },
    //            { type: 'down' },
    //            { type: 'refresh' },
    //            { type: 'plus' },
    //            { type: 'minus' },
    //            { type: 'search' },
    //            { type: 'save' },
    //            { type: 'help' },
    //            { type: 'print' },
    //            { type: 'expand' },
    //            { type: 'collapse' }
    //        ],




//var win;

//function showForm(theTitle) {
//    if (!win) {
//        var form = Ext.widget('form', {
//            layout: {
//                type: 'vbox',
//                align: 'stretch'
//            },
//            border: false,
//            bodyBorder: false,
//            bodyPadding: 10,

//            fieldDefaults: {
//                labelAlign: 'top',
//                labelWidth: 100,
//                labelStyle: 'font-weight:bold'
//            },
//            defaults: {
//                margins: '0 0 10 0'
//            },

//            items: [

//                Ext.create('Ext.grid.PropertyGrid', {
//                    id: 'thePropertyGrid',
//                    enableColumnResize: false,
//                    nameColumnWidth: 200,

//                    //listeners:
//                    //{
//                    //    afterrender: function(grid)
//                    //    {
//                    //        grid.columns[0].setWidth(160);
//                    //    }
//                    //},

//                    customRenderers: {
//                        description: function (v) {
//                            var value = Ext.decode(v),
//                            product = value.product,
//                            tagline = value.tagline,
//                            description = '';
//                            description += '<b>' + product + '</b>: ';
//                            description += '<i>' + tagline + '</i>';
//                            return description;
//                        },
//                        timeofday: function (v) {
//                            return Ext.isDate(v) ? Ext.Date.format(v, 'g:i A') : v;
//                        }
//                    },

//                    sourceConfig: {
//                        description: {
//                            renderer: function (v) {
//                            },
//                            displayName: 'Description',
//                            editor: Ext.create('EMSPEED.dashboard.view.dashboardCustomEditorField', {})
//                        }
//                    }
//                })
//            ],

//            buttons: [

//                {
//                    text: 'OK',
//                    handler: function () {
//                        if (this.up('form').getForm().isValid()) {
//                            // In a real application, this would submit the form to the configured url
//                            // this.up('form').getForm().submit();
//                            this.up('form').getForm().reset();
//                            this.up('window').hide();
//                            clientArea.setLoading(false);

//                            var g = Ext.getCmp('thePropertyGrid');
//                            var theStore = g.store;

//                            var i;
//                            for (i = 0; i < theStore.getCount(); i++) {
//                                var r = theStore.getAt(i);


//                                if (r.data.name.indexOf('Date') !== -1) {
//                                    debugger;
//                                    var d = new Date(r.data.value);
//                                    var dString = Ext.Date.format(d, 'm/d/Y');
//                                    clientArea.theConfig[r.data.name] = dString;
//                                }
//                                else {
//                                    clientArea.theConfig[r.data.name] = r.data.value;
//                                }


//                            }

//                            //clientArea.currConfig = g.store.data;
//                            clientArea.configModified(clientArea.theConfig);

//                        }
//                    }
//                },

//                {
//                    text: 'Cancel',
//                    handler: function () {
//                        this.up('form').getForm().reset();
//                        this.up('window').hide();
//                        clientArea.setLoading(false);

//                        //            this.hide();

//                    }
//                }
//            ]
//        });

//        win = Ext.widget('window', {
//            id: 'theWindow',
//            //title: 'Configuration for ' + theTitle,
//            closeAction: 'hide',
//            width: 400,
//            //height: 400,
//            //minHeight: 400,
//            layout: 'fit',
//            resizable: true,
//            modal: true,
//            border: false,
//            items: form
//        });
//    }
//    win.setTitle('Configuration for ' + theTitle);
//    win.show();
//}






//Ext.create('Ext.grid.property.Grid', {
//    title: 'Properties Grid',
//    width: 400,
//    //renderTo: Ext.getBody(),
//    source: {
//        name: "My Object",
//        created: Ext.Date.parse('10/15/2006', 'm/d/Y'),
//        timeofday: "12:00 PM",
//        available: false,
//        version: 0.01,
//        description: Ext.encode({
//            product: 'Clorox',
//            tagline: 'The Shinyest White!'            
//        })
//    },
//    customEditors: {
//        timeofday: Ext.create('Ext.form.TimeField', {selectOnFocus: true}),
//        description: {
//            xtype: 'customeditorfield'  
//        }
//    },
//    customRenderers: {
//        description: function( v ) {
//            var value = Ext.decode( v ),
//                product = value.product,
//                tagline = value.tagline,
//                description='';
//            description += '<b>' + product + '</b>: ';
//            description += '<i>' + tagline + '</i>';
//            return description;
//        },
//        timeofday: function( v ) {
//            return Ext.isDate( v ) ? Ext.Date.format( v, 'g:i A' ) : v;
//        }            
//    },
//    propertyNames: {
//        name: '(name)',
//        created: 'Created Date',
//        timeofday: 'Time of Day',
//        available: 'Available?',
//        version: 'Version',
//        description: 'Product Description'        
//    },
//    listeners: {
//        beforeedit: function( editor, e, opts ) {
//            if( e.record.get( 'name' )=='name' || e.record.get( 'name' )=='version' ) {
//                return false;            
//            }                
//        }            
//    }
//})




Ext.define('EMSPEED.dashboard.view.dashboardBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassContainer ,
    alias: 'widget.dashboardBasePanel',
    id: 'dashboardBasePanel',
    overflowY: 'scroll',
    overflowX: 'hidden',


    initComponent: function () {
        dashboard.startLoading();

        var theItems;

        //if (Ext.util.Cookies.get(project.state) === null) {
            if (project.data.isParent === true) {
                theItems = project.programDashboard;
            }
            else {
                theItems = project.projectDashboard;
            }
        //}
        //else {
        //    var theState = Ext.decode(Ext.util.Cookies.get(project.state));
        //    theItems = theState;
        //}

        this.items = theItems;
        this.callParent(arguments);

        dashboard.endLoading();
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardCustomEditorField', {
    extend:  Ext.form.field.Picker ,
    alias: 'widget.customeditorfield',
    editable: false,
    hideTrigger: true,
    pickerOffset: [0, -20],
    listeners: {
        focus: function (fld, e, opts) {
            fld.expand();
        }
    },
    cancelEdit: function () {
        var me = this;
        me.fireEvent('blur');
        me.collapse();
    },
    applyValues: function () {
        var me = this,
            form = me.picker,
            vals = form.getForm().getValues();
        // set the value of the editable field        
        me.setValue(Ext.encode(vals));
        me.fireEvent('blur');
        me.collapse();
    },
    createPicker: function () {
        var me = this,
            format = Ext.String.format;
        return Ext.create('Ext.form.Panel', {
            title: 'Enter CDP Details',
            bodypadding: 5,
            pickerField: me,
            ownerCt: me.ownerCt,
            renderTo: document.body,
            floating: true,
            bodyPadding: 8,
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: 'Title',
                    labelAlign: 'top',
                    anchor: '100%',
                    name: 'product'
                },
                {
                    xtype: 'textfield',
                    fieldLabel: 'Next CDP',
                    labelAlign: 'top',
                    anchor: '100%',
                    name: 'tagline'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'button',
                            name: 'cancel',
                            text: 'Cancel',
                            //iconCls: 'cancelicon',
                            handler: function (btn, e, opts) {
                                me.cancelEdit();
                            }
                        },
                        '->',
                        {
                            xtype: 'button',
                            name: 'save',
                            text: 'Save',
                            //iconCls: 'accepticon',
                            handler: function (btn, e, opts) {
                                me.applyValues();
                            }
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: function (panel, opts) {
                    panel.getForm().setValues(
                        Ext.decode(me.getValue())
                    );
                }
            }
        })
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardCustomEditorFieldYAxis', {
    extend:  Ext.form.field.Picker ,
    alias: 'widget.customeditorfieldYAxis',
    editable: false,
    hideTrigger: true,
    pickerOffset: [0, -23],

    listeners: {
        focus: function (fld, e, opts) {
            fld.expand();
        }
    },

    cancelEdit: function () {
        var me = this;
        me.fireEvent('blur');
        me.collapse();
    },
    applyValues: function () {
        var me = this,
            form = me.picker,
            vals = form.getForm().getValues();
        // set the value of the editable field        
        me.setValue(Ext.encode(vals));
        me.fireEvent('blur');
        me.collapse();
    },
    createPicker: function () {
        var me = this,
            format = Ext.String.format;
        return Ext.create('Ext.form.Panel', {
            canSetTitle: false,
            listeners: {
                afterrender: function (panel, opts) {
                    panel.getForm().setValues(
                        Ext.decode(me.getValue())
                    );
                    var s = '';
                    if (this.currentUnit > 1) {
                        s = 's';
                    }
                    panel.setTitle('Every ' + this.currentUnit + ' ' + this.currentStep + s);
                    panel.canSetTitle = true;
                }

            },
            //title: 'Enter Y Axis Details',
            bodypadding: 5,
            //header: { xtype: 'container', html: 'Edit...', padding: '4 4 4 8' },
            pickerField: me,
            ownerCt: me.ownerCt,
            renderTo: document.body,
            floating: true,
            bodyPadding: 8,
            currentStep: 'day',
            currentUnit: '1',

            items: [
                {
                    xtype: 'label', itemId: 'theTitle', height: 40, text: 'Y axis label every...', margin: '0 0 10 0',
                    style: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '15px' }
                },
                {
                    xtype: 'container',
                    layout: 'hbox',
                    items: [
                        {
                            xtype: 'radiogroup',
                            anchor: 'none',
                            listeners: {
                                change: function (rg, newValue, oldValue, eOpts) {
                                    var picker = this.up('panel');
                                    picker.currentUnit = newValue.unit;
                                    debugger;
                                    if (picker.canSetTitle === true) {
                                        var s = '';
                                        if (picker.currentUnit > 1) {
                                            s = 's';
                                        }
                                        picker.setTitle('Every ' + picker.currentUnit + ' ' + picker.currentStep + s);
                                    }
                                }
                            },

                            layout: {
                                type: 'vbox',
                                autoFlex: false
                            },
                            defaults: {
                                name: 'unit',
                                margin: '0 15 0 0'
                            },
                            items: [{
                                inputValue: '1',
                                boxLabel: '1',
                                checked: true
                            }, {
                                inputValue: '3',
                                boxLabel: '3'
                            }, {
                                inputValue: '5',
                                boxLabel: '5'
                            }, {
                                inputValue: '7',
                                boxLabel: '7'
                            }]
                        },
                        {
                            xtype: 'radiogroup',
                            anchor: 'none',
                            listeners: {
                                change: function (rg, newValue, oldValue, eOpts) {
                                    var picker = this.up('panel');
                                    picker.currentStep = newValue.step;
                                    debugger;
                                    if (picker.canSetTitle === true) {
                                        var s = '';
                                        if (picker.currentUnit > 1) {
                                            s = 's';
                                        }
                                        picker.setTitle('Every ' + picker.currentUnit + ' ' + picker.currentStep + s);
                                    }
                                }
                            },
                            layout: {
                                type: 'vbox',
                                autoFlex: false
                            },
                            defaults: {
                                name: 'step',
                                margin: '0 15 0 0'
                            },
                            items: [{
                                inputValue: 'day',
                                boxLabel: 'Day(s)',
                                checked: true
                            }, {
                                inputValue: 'month',
                                boxLabel: 'Month(s)'
                            }, {
                                inputValue: 'year',
                                boxLabel: 'Year(s)'
                            }]
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'button',
                            name: 'ok',
                            text: 'OK',
                            //iconCls: 'accepticon',
                            handler: function (btn, e, opts) {
                                me.applyValues();
                            }
                        },
                        '->',
                        {
                            xtype: 'button',
                            name: 'cancel',
                            text: 'Cancel',
                            //iconCls: 'cancelicon',
                            handler: function (btn, e, opts) {
                                me.cancelEdit();
                            }
                        }
                    ]
                }
            ]

        })
    }
});

//@tag enterprise
/**
 * The SOAP Proxy class is an {@link Ext.data.proxy.Ajax Ajax Proxy} to access v1.1 SOAP
 * (Simple Object Access Protocol) services.  SOAP Proxy constructs a SOAP Envelope and 
 * submits an AJAX request to load a SOAP response from the server.
 * 
 * For help getting started please refer to the [Soap Guide](#/guide/soap).
 * @class Ext.data.soap.Proxy
 */
Ext.define('Ext.data.soap.Proxy', {
    extend:  Ext.data.proxy.Ajax ,
    alias: 'proxy.soap',

               
                              
      

    /**
     * @cfg {Object} api
     * An object containing "create", "read", "update" and "destroy" properties that define
     * SOAP operations for each CRUD action method. These operations will be appended to
     * the {@link #url} as the {@link #operationParam} for each request type.
     * 
     *     api: {
     *         create: undefined,
     *         read: undefined,
     *         update: undefined,
     *         destroy: undefined
     *     }
     *     
     * At least one operation is required, but additional operations do not need to be configured
     * if they will not be used.  For example, if this proxy is only used for read operations
     * the following configuration will be sufficient:
     * 
     *     api: {
     *         read: 'Foo'
     *     }
     */

    /**
     * @cfg {Object} soapAction
     * An object containing "create", "read", "update" and "destroy" properties that define
     * the [SOAPAction](http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383528) header
     * for each CRUD action method. A soapAction must be specified for each operation
     * configured in {@link #api}  Defaults to:
     * 
     *     soapAction: {
     *         create: undefined,
     *         read: undefined,
     *         update: undefined,
     *         destroy: undefined
     *     }
     */

    /**
     * @cfg {String} [operationParam='op']
     * The name of the operation parameter to be appened to the SOAP endpoint url
     */
    operationParam: 'op',

    /**
     * @cfg {Object/String/Ext.data.soap.Reader} [reader='soap']
     * The {@link Ext.data.soap.Reader} to use to decode the server's response. This can
     * either be a SOAP Reader instance, a SOAP Reader config object or 'soap'.
     */
    reader: 'soap',

    /**
     * @cfg {String} url
     * The SOAP endpoint url that this proxy will use to request the SOAP data. This can
     * be a proxied url to work around same-origin policy if the SOAP endpoint url is on
     * a different domain from your application.
     */

    /**
     * @cfg [envelopeTpl=undefined]
     * The template used to create the SOAP envelope.  Defaults to:
     * 
     *     [
     *         '<?xml version="1.0" encoding="utf-8" ?>',
     *         '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">',
     *             '{[values.bodyTpl.apply(values)]}',
     *         '</soap:Envelope>'
     *     ]
     */
    envelopeTpl: [
        '<?xml version="1.0" encoding="utf-8" ?>',
        '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">',
            '{[values.bodyTpl.apply(values)]}',
        '</soap:Envelope>'
    ],

    /**
     * @cfg {Ext.XTemplate/Array} createBodyTpl
     * The template used to create the SOAP body for the "create" action. If not specified
     * {@link #writeBodyTpl} will be used for the "create" action.
     */

    /**
     * @cfg {Ext.XTemplate/Array} [readBodyTpl=undefined]
     * The template used to create the SOAP body for the "read" action.  Defaults to: 
     * 
     *     [
     *         '<soap:Body>',
     *             '<{operation} xmlns="{targetNamespace}">',
     *                 '<tpl foreach="params">',
     *                     '<{$}>{.}</{$}>',
     *                 '</tpl>',
     *             '</{operation}>',
     *         '</soap:Body>'
     *     ]
     */
    readBodyTpl: [
        '<soap:Body>',
            '<{operation} xmlns="{targetNamespace}">',
                '<tpl foreach="params">',
                    '<{$}>{.}</{$}>',
                '</tpl>',
            '</{operation}>',
        '</soap:Body>'
    ],

    /**
     * @cfg {Ext.XTemplate/Array} updateBodyTpl
     * The template used to create the SOAP body for the "update" action. If not specified
     * {@link #writeBodyTpl} will be used for the "update" action.
     */

    /**
     * @cfg {Ext.XTemplate/Array} destroyBodyTpl
     * The template used to create the SOAP body for the "destroy" action. If not specified
     * {@link #writeBodyTpl} will be used for the "destroy" action.
     */

    /**
     * @cfg {Ext.XTemplate/Array} [writeBodyTpl=undefined]
     * The default template used to create the SOAP body for write actions (create, update,
     * and destroy). The individual body templates for each write action can be configured
     * using {@link #createBodyTpl}, {@link #updateBodyTpl}, and {@link #destroyBodyTpl}.
     * Defaults to:
     * 
     *     [
     *          '<soap:Body>',
     *              '<{operation} xmlns="{targetNamespace}">',
     *                  '<tpl for="records">',
     *                      '{% var recordName=values.modelName.split(".").pop(); %}',
     *                      '<{[recordName]}>',
     *                          '<tpl for="fields">',
     *                              '<{name}>{[parent.get(values.name)]}</{name}>',
     *                          '</tpl>',
     *                      '</{[recordName]}>',
     *                  '</tpl>',
     *              '</{operation}>',
     *          '</soap:Body>'
     *      ]
     */
    writeBodyTpl: [
        '<soap:Body>',
            '<{operation} xmlns="{targetNamespace}">',
                '<tpl for="records">',
                    '{% var recordName=values.modelName.split(".").pop(); %}',
                    '<{[recordName]}>',
                        '<tpl for="fields">',
                            '<{name}>{[parent.get(values.name)]}</{name}>',
                        '</tpl>',
                    '</{[recordName]}>',
                '</tpl>',
            '</{operation}>',
        '</soap:Body>'
    ],

    /**
     * @cfg {String} targetNamespace
     * namespace URI used by {@link #createBodyTpl}, {@link #readBodyTpl}, {@link #updateBodyTpl},
     * and {@link #destroyBodyTpl} as the "xmlns" attribute for the operation element.
     */
    
    /**
     * @property {Object} actionMethods
     * @readonly
     * Mapping of action name to HTTP request method.  All SOAP actions are mapped to 'POST'
     */
    
    constructor: function(config) {
        this.callParent(arguments);
        this.api = config.api || {};
        this.soapAction = config.soapAction || {};
    },

    doRequest: function(operation, callback, scope) {
        var me = this,
            XTemplate = Ext.XTemplate,
            action = operation.action,
            soapOperation = me.api[action],
            params = Ext.applyIf(operation.params || {}, me.extraParams || {}),
            bodyTplName = action + 'BodyTpl',
            xmlData = XTemplate.getTpl(me, 'envelopeTpl').apply({
                operation: soapOperation,
                targetNamespace: me.targetNamespace,
                params: params,
                records: operation.records,
                bodyTpl: XTemplate.getTpl(me, me[bodyTplName] ? bodyTplName : 'writeBodyTpl')
            }),
            request = new Ext.data.Request({
                url: me.url, // + '?' + me.operationParam + '=' + soapOperation, mjg
                method: 'POST',
                withCredentials: true, // added mjg
                action: action,
                operation: operation,
                xmlData: xmlData,
                headers: Ext.apply({
                    soapaction: me.soapAction[action]
                }, me.headers),
                timeout: me.timeout,
                scope: me,
                disableCaching: false // explicitly set it to false, ServerProxy handles caching
            });

        request.callback = me.createRequestCallback(request, operation, callback, scope);
        Ext.Ajax.request(request);
                
        return request;
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardPortletBase', {
    //extend: 'Ext.panel.Panel',
    extend:  Ext.form.Panel ,
    //extend: 'Ext.container.Container',
    alias: 'widget.dashboardPortletBase',
    frame: true,
    layout: 'fit',
    anchor: '100%',
    closable: false,
    collapsible: true,
    animCollapse: true,
    padding: '0 0 0 0',
    border: false,
    borderWidth: 0,
    cls: 'x-portlet',
    style: { borderWidth: '1px', zIndex: '0' },
    tools: dashboard.getTools(),
    collapseFirst: false,

               
                             
      


    reload: function () {
    },


    listeners: {
//        afterlayout: function (me, eOpts) {
//        },
        collapse: function (me, eOpts) {
            dashboard.saveState();
        },
        expand: function (me, eOpts) {
            dashboard.saveState();
        }
    },

    loadPage: function () {
        console.debug('baseportlet loadPage');
        //if (this.theConfig != null) {
        //    this.setTitle(this.theConfig.title);
        //}
    },

    initComponent: function () {
        if (this.theConfig != null) {
            if (this.theConfig.title != null) {
                this.setTitle(this.theConfig.title);
            }
        };
        this.callParent(arguments);
    },

    config: {
        theConfig: null
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    },

    get: function (s) {
        return this.currConfig.get(s)
    },

    configModified: function (s) {
        //alert('configModified');
        //alert(Ext.encode(this.theConfig));
        this.theConfig = s;
        //alert(Ext.encode(this.theConfig));
        this.loadPage();
    },

    draggable: {
        moveOnDrag: false
    }

    //// Override Panel's default doClose to provide a custom fade out effect
    //// when a portlet is removed from the portal
    //doClose: function () {
    //    if (!this.closing) {
    //        this.closing = true;
    //        this.el.animate({
    //            opacity: 0,
    //            callback: function () {
    //                this.fireEvent('close', this);
    //                this[this.closeAction]();
    //            },
    //            scope: this
    //        });
    //    }
    //}

    //getStore: function (o) {
    //    o.thePrefix = '';
    //    o.theNamespace = 'http://tempuri.org/';
    //    o.theNs = ' xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"' +
    //            ' xmlns:a="http://schemas.datacontract.org/2004/07/SLB.EMSPortal.Services.Contracts"' +
    //            ' xmlns:i="http://www.w3.org/2001/XMLSchema-instance"';

    //    var store = Ext.create('Ext.data.Store', {
    //        fields: o.theFields,
    //        proxy: {
    //            type: 'soap',
    //            url: o.theUrl,
    //            defaultHeaders: { 'content-type': "text/xml; charset=utf-8" },
    //            targetNamespace: o.theNamespace,

    //            envelopeTpl: [
    //                '<s:Envelope' + o.theNs + '>',
    //                    '{[values.bodyTpl.apply(values)]}',
    //                '</s:Envelope>'
    //            ],

    //            readBodyTpl: [
    //                '<s:Body>',
    //                    '<' + o.thePrefix + '{operation} xmlns="' + o.theNamespace + '">',
    //                        '<tpl foreach="params">',
    //                            '<{$}>{.}</{$}>',
    //                        '</tpl>',
    //                    '</' + o.thePrefix + '{operation}>',
    //                '</s:Body>'
    //            ],

    //            api: {
    //                read: o.theMethod
    //            },
    //            soapAction: {
    //                read: o.theNamespace + o.theInterface + '/' + o.theMethod
    //            },
    //            reader: {
    //                type: 'soap',
    //                record: o.theRecord
    //            }
    //        }
    //    });

    //    return store;
    //},



    //    bodyStyle: {
    //        borderColor: 'red',
    //        borderStyle: 'solid'
    //    },

    //    bodyStyle: {
    //        background: '#ffc',
    //        padding: '10px'
    //    },




});

Ext.define('EMSPEED.dashboard.view.dashboardPortletDfX', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletDfX',
    title: 'DfX',
    layout: 'fit',
    padding: '10 10 10 10',

    reload: function () {
        dashboard.startLoading();
        var me = this;
        setTimeout(function () {
            me.getData();
        }, 50);
    },


    initComponent: function () {
        dashboard.startLoading();

        var value = 50,
            theValue = parseFloat(value) / 100.0;

        Ext.apply(this, {
            items: [

                {
                    xtype: 'dataview',
                    emptyText: 'No data available',
                    deferInitialRefresh: false,

                    tpl: new Ext.XTemplate(
                        '<tpl for=".">',
                        '<div class="dfx">',
                            //'<tpl if="cdpSummary.InSync==' + "false" + '"><div><span data-hint="{cdpSummary.cdpTargetName}" class="emspeed-dfx-warning hint--bottom hint--warning"></span></div></tpl>',
                            '<table class="dfx-table" width="100%">',
                                '<tr>',
                                    '<td class="overall overall-label" colspan="3"><div class="overall-left">Overall DfX Score: <span>{[this.formatDfxNumbers(values.dfxSummary.overallIndex)]}</span></div></td>',
                                    //'<td class="overall" style="width:44px;"><div class="overall-right overall-top">&nbsp;</div></td>',
                                '</tr>',
                                '<tr>',
                                    '<td class="overall"><div class="overall-left overall-right">{[this.formatDfxNumbers(values.dfxSummary.manufacturingMfgIndex)]}</div></td>',
                                    '<td><div class="dfx-label">Manufacturing</div></td>',
                                    '<td class="next <tpl if="cdpSummary.manufacturingMfgIndex==' + "100" + ' || cdpSummary.manufacturingMfgOverride==' + "true" + '">next-complete</tpl>"><div class="next-top next-left next-right">{[this.formatDfxNumbers(values.cdpSummary.manufacturingMfgIndex)]}</div></td>',
                                '</tr>',
                                '<tr>',
                                    '<td class="overall"><div class="overall-left overall-right">{[this.formatDfxNumbers(values.dfxSummary.manufacturingScIndex)]}</div></td>',
                                    '<td><div class="dfx-label">Supply Chain </div></td>',
                                    '<td class="next <tpl if="cdpSummary.manufacturingScIndex==' + "100" + ' || cdpSummary.manufacturingScOverride==' + "true" + '">next-complete</tpl>"><div class="next-left next-right">{[this.formatDfxNumbers(values.cdpSummary.manufacturingScIndex)]}</div></td>',
                                '</tr>',
                                '<tr>',
                                    '<td class="overall"><div class="overall-left overall-right">{[this.formatDfxNumbers(values.dfxSummary.reliabilityIndex)]}</div></td>',
                                    '<td><div class="dfx-label">Reliability</div></td>',
                                    '<td class="next <tpl if="cdpSummary.reliabilityIndex==' + "100" + ' || cdpSummary.reliabilityOverride==' + "true" + '">next-complete</tpl>"><div class="next-left next-right">{[this.formatDfxNumbers(values.cdpSummary.reliabilityIndex)]}</div></td>',
                                '</tr>',
                                '<tr>',
                                    '<td class="overall"><div class="overall-left overall-right overall-bottom">{[this.formatDfxNumbers(values.dfxSummary.maintainabilityIndex)]}</div></td>',
                                    '<td><div class="dfx-label">Maintainability</div></td>',
                                    '<td class="next <tpl if="cdpSummary.maintainabilityIndex==' + "100" + ' || cdpSummary.maintainabilityOverride==' + "true" + '">next-complete</tpl>"><div class="next-left next-right">{[this.formatDfxNumbers(values.cdpSummary.maintainabilityIndex)]}</div></td>',
                                '</tr>',
                                '<tr>',
                                    //'<td class="next next-complete" style="width:44px; padding: 2px 0 0 5px;">&nbsp; <tpl if="cdpSummary.inSync ==' + "false" + '"><span data-hint="Target CDP Event from PDD does not match Target CDP Event in DfX Checklist" class="emspeed-dfx-warning hint--bottom hint--warning"></span></tpl></td>',
                                    '<td colspan="3" class="next next-label" style="text-align: right;"><div class="next-right">Target DfX CDP</div></td>',
                                '</tr>',
                            '</table>',
                            '<div class="cdp-readiness">',
                                '<div class="row"><span class="label">Target PDD CDP:</span> <span class="value">{cdpSummary.cdpNextName} ({[this.getDate(values.cdpSummary.previousPlanDate)]})</span> <tpl if="cdpSummary.inSync ==' + "false" + '"><span data-hint="Target CDP Event from PDD does not match Target CDP Event in DfX Checklist" class="emspeed-dfx-warning hint--left hint--warning"></span></tpl></div>',
                                '<div class="row"><span class="label">CDP Readiness:</span> <span class="value">{cdpSummary.readiness}</span></div>',
                                '<div class="row"><span class="label">Slip:</span> <span class="value">{cdpSummary.slip}</span></div>',
                            '</div>',
                        '</div>',
                        '</tpl>',
                        {
                            disableFormats: true,
                            getDate: function (d) {
                                var theDate = new Date(parseInt(d.replace('/Date(', '')));
                                return theDate.toDateString();
                            },
                            formatDfxNumbers: function(value) {
                                var parsedValue = parseFloat(value);
                                if (isNaN(parsedValue)) {
                                    return value;
                                } else {
                                    return Math.round(parsedValue) + '%';
                                }
                            }
                        }
                    )
                }
            ]
        });
        this.callParent(arguments);
        this.getData();
    },

    getData: function () {
        var me = this;
        var theUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService' + '.svc/json/' + 'GetCdpDfxSummary';
        var theData = {};
        $.ajax({
            url: theUrl,
            type: 'POST',
            crossDomain: true,
            data: Ext.encode({ projectId: parseFloat(com.getProjectId()) }),
            contentType: "application/json; charset=utf-8",
            xhrFields: { withCredentials: true },
            dataType: 'json',
            async: false
        })
        .done(function (data) {

            //if (com.proxy === 'memoryProxy') {
            //    data = { "dfxSummary": { "overallIndex": 52, "manufacturingMfgIndex": 35.63, "manufacturingScIndex": 22.29, "reliabilityIndex": 10.53, "maintainabilityIndex": 0 }, "cdpSummary": { "cdpNextName": "Project Request", "cdpTargetName": "Concurrent Team Launch", "inSync": true, "manufacturingMfgIndex": null, "manufacturingMfgOverride": null, "manufacturingScIndex": null, "manufacturingScOverride": null, "reliabilityIndex": 100, "reliabilityOverride": true, "maintainabilityIndex": 0, "maintainabilityOverride": false, "previousPlanDate": "\/Date(1372568400000)\/", "readiness": "%", "slip": "13W" } };
            //}

            me.down('dataview').update(data);
            dashboard.endLoading();

        })
        .fail(function (data) {
            throw data.status + '-' + data.statusText + ': ' + theUrl;
        });
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardPortletGetProjectMaturityMetrics', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletGetProjectMaturityMetrics',

    getParams: function (searchCriteria) {
        var sParams = { filter: { orderBy: null, projectId: parseFloat(com.getProjectId()), snapshotDateRange: null } };
        return sParams;
    },

    getKpiTrendStore: function () {
        //var sUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService' + '.svc/json/' + 'GetKpiTrend';
        //var theData = {};
        //$.ajax({
        //    url: sUrl,
        //    type: 'POST',
        //    crossDomain: true,
        //    data: Ext.encode(this.getParams()),
        //    contentType: "application/json; charset=utf-8",
        //    xhrFields: { withCredentials: true },
        //    dataType: 'json',
        //    async: false
        //})
        //.done(function (data) {
        //    debugger;
        //    theData = data.Snapshots;
        //})
        //.fail(function (data) {
        //    alert(data.status + '-' + data.statusText);
        //});

        debugger;
        var store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            fields: this.fields
            //data: this.theData.Snapshots
            //proxy: {
            //    type: com.proxy,
            //    root: '',
            //    service: 'ProjectService',
            //    method: 'GetProjects',
            //    jsonData: sParams
            //}
        });

        return store;
    },


    initComponent: function () {
        dashboard.startLoading();
        debugger;

        this.fields = [
            {
                name: 'snapshotDate', type: 'string', text: 'Snapshot Date', dataIndex: 'snapshotDate', flex: 1,
                convert: function (v, j) {
                    return new Date(parseInt(v.replace('/Date(', '')));
                }
            },
            { name: 'dfxScore', type: 'string', text: 'DFX', dataIndex: 'dfxScore' },
            { name: 'riskMaturityIndex', type: 'string', text: 'Risk', dataIndex: 'riskMaturityIndex' },
            { name: 'productMaturityIncrementalIndex', type: 'string', text: 'PMI', dataIndex: 'productMaturityIncrementalIndex' },
            { name: 'requirementMaturityIndex', type: 'string', text: 'RMT', dataIndex: 'requirementMaturityIndex' }
        ];

        this.items = [
            {
                xtype: 'grid',
                columns: this.fields,
                border: false,
                margin: '0 0 3 0',
                width: '100%',
                cls: 'myprojects-grid',
                disableSelection: true,
                enableCtxMenu: false,  // turn off header context menu
                enableColLock: false,  // turn off column lock context items
                enableColumnMove: false,  // turn off column reorder drag drop
                enableColumnResize: false,  // turn off column resize for whole grid
                enableRowHeightSync: true
            }
        ];
        this.callParent(arguments);
        this.down('grid').bindStore(this.getKpiTrendStore());
        dashboard.endLoading();
    },

    renderProjectName: function (value, p, record) {
        return Ext.String.format(
		    '<b><a style="text-decoration: underline;font-family: Univers 57 condensed " href="/sites/{0}/Portal.aspx" xtarget="_blank">{1}</a></b>',
		    record.data.pddNumber,
		    record.data.projectName
	    );
    }

    //onStoreSizeChange: function (a, b, c) {
    //    Ext.getCmp('myprojectsHeaderPanel').down('#status').update({ count: a });
    //}
});


//Ext.define('EMSPEED.dashboard.view.dashboardPortletGetProjectMaturityMetrics', {
//    extend: 'EMSPEED.dashboard.view.dashboardPortletBase',
//    alias: 'widget.dashboardPortletGetProjectMaturityMetrics',

//    fields: [
//        { name: 'SnapshotDate', type: 'string', text: 'SnapshotDate', dataIndex: 'SnapshotDate', flex: 1 },
//        { name: 'DFX', type: 'string', text: 'DFX', dataIndex: 'DFX' },
//        { name: 'Risk', type: 'string', text: 'Risk', dataIndex: 'Risk' },
//        { name: 'PMT', type: 'string', text: 'PMT', dataIndex: 'PMT' },
//        { name: 'RMT', type: 'string', text: 'RMT', dataIndex: 'RMT' }
//    ],

//    initComponent: function () {
//        var store = Ext.create('Ext.data.Store', {
//            autoLoad: {
//                params: { projectID: project.projectId }
//            },
//            fields: this.fields,
//            proxy: {
//                type: 'SoapProxy',
//                service: 'ProjectService',
//                method: 'GetProjectMaturityMetrics',
//                serviceinterface: 'IProjectService',
//                record: 'MaturityMetrics'
//            }
//        });
//        store.load({
//            scope: this,
//            callback: function (records, operation, success) {
//                if (success === true) {
//                    this.down('grid').bindStore(store);
//                }
//                else {
//                }
//            }
//        });
            
//        Ext.apply(this, {
//            items: [
//                {
//                    xtype: 'grid',
//                    columns: this.fields, 
//                    width: '100%'
//                }
//           ]
//        });
//        this.callParent(arguments);
//    }
//});

Ext.define('EMSPEED.dashboard.view.dashboardPortletKPI', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletKPI',
    title: 'KPI',
    layout: 'fit',

    reload: function () {
        dashboard.startLoading();
        var me = this;
        setTimeout(function () {
            me.getData();
        }, 50);
    },

    fields: [
        {
            name: 'snapshotDate', type: 'string', text: 'Snapshot Date', dataIndex: 'snapshotDate', menuDisabled: true, flex: 1,
            convert: function (v, j) {
                return new Date(parseInt(v.replace('/Date(', '')));
            }
        },
        { name: 'dfxScore', type: 'string', text: 'DFX', dataIndex: 'dfxScore', menuDisabled: true },
        { name: 'riskMaturityIndex', type: 'string', text: 'Risk', dataIndex: 'riskMaturityIndex', menuDisabled: true },
        { name: 'productMaturityIncrementalIndex', type: 'string', text: 'PMI', dataIndex: 'productMaturityIncrementalIndex', menuDisabled: true },
        { name: 'requirementMaturityIndex', type: 'string', text: 'RMT', dataIndex: 'requirementMaturityIndex', menuDisabled: true }
    ],

    initComponent: function () {
        dashboard.startLoading();

        var chartParms = this.getAxis();

        Ext.apply(this, {
            items: [
                {
                    xtype: 'tabpanel',
                    margin: '10 10 10 10', 
                    border: true,
                    tabBar: {
                        style: { backgroundColor: '#FFFFFF' },
                        bodyStyle: { backgroundColor: '#FFFFFF' }
                    },

                    items: [
                        { xtype: 'container', title: 'Chart', layout: 'vbox', items: [
                            {
                                xtype: 'chart',
                                style: 'background:#fff',
                                height: 270,
                                width: '100%',
                                animate: false,
                                store: Ext.create('Ext.data.ArrayStore'),
                                //shadow: true,
                                //theme: 'Category1',
                                legend: false,
                                axes: [
                                    chartParms.axisPercent,
                                    chartParms.axisTime
                                ],
                                series: [
                                    this.getSeries('RMT', '#0000ff'),
                                    this.getSeries('Risk', '#ff0000'),
                                    this.getSeries('DFX', '#009900'),
                                    this.getSeries('PMT', '#ff9900')
                                ]
                            }, //chart 
                            {
                                xtype: 'container',
                                id: 'theFooter',
                                html: '<div style="margin: 0px 0px 0px 10px;background-color:white;height:25px;width:824px">' +
                                        '<span style="color:blue;font-weight:bold;">RMT</span><span style="color:black;">=Requirements Maturity</span>' + '&nbsp;&nbsp;&nbsp;' +
                                        '<span style="color:#ff0000;font-weight:bold;">Risk</span><span style="color:black;">=Risk Score</span>' + '&nbsp;&nbsp;&nbsp;' +
                                        '<span style="color:#009900;font-weight:bold;">DFX</span><span style="color:black;">=Lifecycle Attributes</span>' + '&nbsp;&nbsp;&nbsp;' +
                                        '<span style="color:#ff9900;font-weight:bold;">PMT</span><span style="color:black;">=Product Maturity</span>' +
                                        '</div>'
                            }  //footer
                        ]
                        },
                        {
                            xtype: 'grid',
                            title: 'Data',
                            border: false,
                            margin: '0 0 0 0',
                            width: '100%',
                            cls: 'myprojects-grid',
                            disableSelection: true,
                            enableCtxMenu: false,  // turn off header context menu
                            enableColLock: false,  // turn off column lock context items
                            enableColumnMove: false,  // turn off column reorder drag drop
                            enableColumnResize: false,  // turn off column resize for whole grid
                            enableRowHeightSync: true,
                            columns: this.fields
                            //store: Ext.create('Ext.data.Store', {
                            //    autoLoad: true,
                            //    fields: fields,
                            //    data:theData.Snapshots
                            //})
                        }
                    ]
                }
            ]
        });

        this.callParent(arguments);

        //var me = this;
        var theChart = this.down('chart');
        theChart.legend = Ext.create('Ext.ux.chart.SmartLegend', {
            position: 'right',
            chart: theChart,
            rebuild: true,
            boxStrokeWidth: 1
        });
        //me.setGrid(me, theData, theChart);
        this.getData();
    },

    getAxis: function () {
        var axisPercent = {
            type: 'Numeric',
            constrain: false,
            dashSize: 1,
            minimum: 0,
            maximum: 100,
            position: 'left',
            fields: ['RMT','DFX', 'PMT', 'Risk'],
            title: false,
            minorTickSteps: 1,
            grid: {
                odd: {
                    opacity: 1,
                    fill: '#ddd',
                    stroke: '#bbb',
                    'stroke-width': 0.5
                }
            }
        };
        var axisTime = {
            type: 'Time',
            position: 'bottom',
            fields: ['snapshotDate'],
            title: false,
            dateFormat: 'm/d/y',
            minorTickSteps: 0,
            constrain: false,
            label: {
                orientation: 'horizontal',
                rotate: {
                    degrees: 0
                }
            },
            grid: false
        };

        var chartParms = {};
        chartParms.axisPercent = axisPercent;
        chartParms.axisTime = axisTime;
        return chartParms;
    },

    getSeries: function (series, color) {
        var theSeries = {
            type: 'line',
            xField: 'snapshotDate',
            yField: series,
            lastVal: 0,
            selectionTolerance: 4,
            style: { fill: color, stroke: color },
            shadowAttributes: [{ stroke: color, "stroke-width": 2, "stroke-opacity": 1, translate: { x: 1, y: 1 } }],
            axis: 'left',
            smooth: false,
            fill: false,
            highlight: { stroke: color, size: 4, radius: 4 },
            tips: {
                items: {
                    xtype: 'container',
                    layout: 'vbox',
                    items: [
                        { xtype: 'label', itemId: 'theType' },
                        { xtype: 'label', itemId: 'theValue' },
                        { xtype: 'label', itemId: 'theSnapshotDate' },
                        { xtype: 'label', itemId: 'theSnapshotTime' }
                    ]
                },
                trackMouse: true,
                maxWidth: 500,
                width: 150,
                height: 75,
                renderer: function (klass, item) {
                    var storeItem = item.storeItem;
                    var yField = item.series.yField;
                    this.setTitle('Selected Data Point');
                    this.down('label[itemId=theType]').setText('Type: ' + yField);
                    this.down('label[itemId=theValue]').setText('Value: ' + storeItem.get(yField));

                    var convertedStartDate = new Date(storeItem.get('snapshotDate'));
                    var month = convertedStartDate.getMonth() + 1
                    var day = convertedStartDate.getDay();
                    var year = convertedStartDate.getFullYear();
                    var shortStartDate = month + "/" + day + "/" + year;

                    var d = convertedStartDate.toLocaleDateString();
                    this.down('label[itemId=theSnapshotDate]').setText('Date: ' + d);

                    var t = convertedStartDate.toLocaleTimeString().replace(/:\d+ /, ' ');
                    this.down('label[itemId=theSnapshotTime]').setText('Time: ' + t);
                }
            }
        }
        return theSeries;
    },

    getData: function () {

        var me = this;
        if (com.proxy === 'xmemoryProxy') {
            theData = { "FirstSnapshotDate": "\/Date(1360209458850-0600)\/", "LastSnapshot": { "snapshotDate": "\/Date(1374175715533-0500)\/", "dfxScore": 0, "productMaturityIndex": 0, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }, "LastSnapshotDate": "\/Date(1374175715533-0500)\/", "Snapshots": [{ "snapshotDate": "\/Date(1360209458850-0600)\/", "dfxScore": 100, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 87.18, "riskMaturityIndex": 33.29 }, { "snapshotDate": "\/Date(1360719057287-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 0, "riskMaturityIndex": 0 }, { "snapshotDate": "\/Date(1360721248690-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 0 }, { "snapshotDate": "\/Date(1360732021430-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 2.42 }, { "snapshotDate": "\/Date(1360734252020-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 2.42 }, { "snapshotDate": "\/Date(1360734491877-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 30.19, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 2.42 }, { "snapshotDate": "\/Date(1360799772037-0600)\/", "dfxScore": 7.49, "productMaturityIndex": null, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }, { "snapshotDate": "\/Date(1366761014857-0500)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }, { "snapshotDate": "\/Date(1374175715533-0500)\/", "dfxScore": 0, "productMaturityIndex": 0, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }] };
        }
        else {
            var theUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService' + '.svc/json/' + 'GetKpiTrend';
            var theParams = { filter: { orderBy: null, projectId: parseFloat(com.getProjectId()), snapshotDateRange: null } };
            $.ajax({
                url: theUrl,
                type: 'POST',
                data: Ext.encode(theParams),
                contentType: "application/json; charset=utf-8",
                xhrFields: { withCredentials: true },
                dataType: 'json',
                async: false
            })
            .done(function (data) {

                //if (com.proxy === 'memoryProxy') {
                //    data = { "FirstSnapshotDate": "\/Date(1360209458850-0600)\/", "LastSnapshot": { "snapshotDate": "\/Date(1374175715533-0500)\/", "dfxScore": 0, "productMaturityIndex": 0, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }, "LastSnapshotDate": "\/Date(1374175715533-0500)\/", "Snapshots": [{ "snapshotDate": "\/Date(1360209458850-0600)\/", "dfxScore": 100, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 87.18, "riskMaturityIndex": 33.29 }, { "snapshotDate": "\/Date(1360719057287-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 0, "riskMaturityIndex": 0 }, { "snapshotDate": "\/Date(1360721248690-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 0 }, { "snapshotDate": "\/Date(1360732021430-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 0, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 2.42 }, { "snapshotDate": "\/Date(1360734252020-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 2.42 }, { "snapshotDate": "\/Date(1360734491877-0600)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 30.19, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 2.42 }, { "snapshotDate": "\/Date(1360799772037-0600)\/", "dfxScore": 7.49, "productMaturityIndex": null, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }, { "snapshotDate": "\/Date(1366761014857-0500)\/", "dfxScore": 0, "productMaturityIndex": null, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }, { "snapshotDate": "\/Date(1374175715533-0500)\/", "dfxScore": 0, "productMaturityIndex": 0, "productMaturityIncrementalIndex": 22.65, "requirementMaturityIndex": 49.53, "riskMaturityIndex": 6.04 }] };
                //}

                var theChart = me.down('chart');
                var theGrid = me.down('grid');

                var storeGrid = Ext.create('Ext.data.Store', {
                    autoLoad: true,
                    fields: me.fields,
                    data: data.Snapshots
                });
                theGrid.bindStore(storeGrid);

                var storeSnapshots = Ext.create('Ext.data.Store', {
                    fields: [
                        { name: 'DFX', mapping: 'dfxScore' },
                        { name: 'RMT', mapping: 'requirementMaturityIndex' },
                        { name: 'PMT', mapping: 'productMaturityIndex' },
                        { name: 'Risk', mapping: 'riskMaturityIndex' },
                        {
                            name: 'snapshotDate', mapping: 'snapshotDate', type: 'date',
                            convert: function (v, j) {
                                return new Date(parseInt(v.replace('/Date(', '')));
                            }
                        }
                    ],
                    data: data.Snapshots
                });
                theChart.bindStore(storeSnapshots);

                var lastScore = {
                    'RMT': data.LastSnapshot.requirementMaturityIndex,
                    'Risk': data.LastSnapshot.riskMaturityIndex,
                    'DFX': data.LastSnapshot.dfxScore,
                    'PMT': data.LastSnapshot.productMaturityIndex
                };
                for (var i = 0; i < theChart.series.length; i++) {
                    var s = theChart.series.getAt(i);
                    var yField = s['yField'];
                    s['lastVal'] = lastScore[yField];
                }

                if (me.theConfig.StartDate === null) {
                    me.theConfig.StartDate = new Date(parseInt(data.FirstSnapshotDate.replace('/Date(', '')));
                }
                if (me.theConfig.EndDate === null) {
                    theLastSnapshotDate = new Date(parseInt(data.LastSnapshotDate.replace('/Date(', '')));
                    var dateLastSnapshotDateMinus1 = new Date();
                    dateLastSnapshotDateMinus1.setDate(theLastSnapshotDate - 1);
                    me.theConfig.EndDate = dateLastSnapshotDateMinus1;
                }
                me.resetChart(me.theConfig.StartDate, me.theConfig.EndDate, me.theConfig.MarkerConfigSize, me.theConfig.YAxis);

                dashboard.endLoading();

            })
                .fail(function (data, x, y, z) {
                    throw data.status + '-' + data.statusText + ': ' + theUrl;
                });
        }
    },

    configModified: function (theConfig) {
        this.resetChart(theConfig.StartDate, theConfig.EndDate, theConfig.MarkerConfigSize, theConfig.YAxis);
        this.down('chart').redraw();
    },
    resetChart: function (StartDate, EndDate, MarkerConfigSize, YAxis) {
        var chart = this.down('chart');
        var dateAxis = chart.axes.getAt(1);
        dateAxis.fromDate = new Date(StartDate);
        dateAxis.toDate = new Date(EndDate);

        var iUnit = parseInt(YAxis.unit);
        switch (YAxis.step) {
            case 'day':
                dateAxis.step = [Ext.Date.DAY, iUnit];
                break;
            case 'month':
                dateAxis.step = [Ext.Date.MONTH, iUnit];
                break;
            case 'year':
                dateAxis.step = [Ext.Date.YEAR, iUnit];
                break;
            default:
                dateAxis.step = [Ext.Date.DAY, 1];
                break;
        }

        for (var i = 0; i < chart.series.items.length; i++) {
            chart.series.items[i].markerConfig = { type: 'circle', size: MarkerConfigSize, radius: MarkerConfigSize, 'stroke-width': 0 };
        }

        //An array with two components: The first is the unit of the step (day, month, year, etc). 
        //The second one is a number. If the number is an integer, it represents the number of units for the step 
        //([Ext.Date.DAY, 2] means "Every other day"). If the number is a fraction, it represents the number of steps per unit ([Ext.Date.DAY, 1/2] means "Twice a day"). If the unit is the month, the steps may be adjusted depending on the month. For instance [Ext.Date.MONTH, 1/3], which means "Three times a month", generates steps on the 1st, the 10th and the 20th of every month regardless of whether a month has 28 days or 31 days. The steps are generated as follows: - [Ext.Date.MONTH, n]: on the current date every 'n' months, maxed to the number of days in the month. - [Ext.Date.MONTH, 1/2]: on the 1st and 15th of every month. - [Ext.Date.MONTH, 1/3]: on the 1st, 10th and 20th of every month. - [Ext.Date.MONTH, 1/4]: on the 1st, 8th, 15th and 22nd of every month.

        //chart.redraw();
    },
    sourceConfig: {
        StartDate: {
            displayName: 'Start Date',
            type: 'date'
        },
        EndDate: {
            displayName: 'End Date',
            type: 'date'
        },
        MarkerConfigSize: {
            displayName: 'Marker Config Size',
            editor: new Ext.form.field.ComboBox({
                store: ['0', '1', '2', '3', '4', '5', '6', '7', '8'],
                editable: false,
                forceSelection: true
            })
        },
        YAxis: {
            displayName: 'Y Axis Display',
            //editor: new EMSPEED.dashboard.view.dashboardCustomEditorFieldYAxis({}),
            renderer: function (v) {
                var value = Ext.decode(v),
                    unit = value.unit,
                    step = value.step,
                    description = '';
                var iUnit = parseInt(unit);
                var s = '';
                if (iUnit > 1) {
                    s = 's';
                }
                description += 'Every ' + unit + '';
                description += ' ' + step + s;
                return description;
            }
        }
    }
});

//                {
//                    xtype: 'toolbar',
//                    width: '100%',
//                    border: 0,
//                    items: [
//                        {
//                            text: 'fit',
//                            width: '95px',
//                            listeners: {
//                                click: function (me, e, eOpts) {
//                                    var chart = Ext.getCmp('theChart');
//                                    //Ext.getCmp('PortletKMI').setLoading('Working...');
//                                    setTimeout(function () {
//                                        var dateAxis = chart.axes.getAt(1);
//                                        dateAxis.fromDate = new Date('2013-02-05T21:57:38.85');
//                                        dateAxis.toDate = new Date('2013-03-08T18:50:14.857');
//                                        dateAxis.step = [Ext.Date.MONTH, 1];
//                                        chart.redraw();
//                                        //Ext.getCmp('PortletKMI').setLoading(false);
//                                    }, 50);
//                                }
//                            }
//                        }, //fit

//                        {
//                        text: 'sliders',
//                        width: '95px',
//                        handler: function (me, e, eOpts) {
//                            var c = Ext.getCmp('dateSliders');
//                            c.setVisible(c.isHidden());
//                            var p = Ext.getCmp('percentSliders');
//                            p.setVisible(p.isHidden());
//                            var f = Ext.getCmp('theFooter');
//                            f.setVisible(p.isHidden());
//                        }
//                    }, //sliders

//                        {
//                        text: 'Save Chart',
//                        width: '95px',
//                        handler: function () {
//                            Ext.MessageBox.confirm('Confirm Download', 'Would you like to download the chart as an image?', function (choice) {
//                                if (choice == 'yes') {
//                                    Ext.getCmp('theChart').save({
//                                        type: 'image/png'
//                                    });
//                                }
//                            });
//                        }
//                    }, //save chart
//                        {
//                        text: 'reset',
//                        width: '95px',
//                        handler: function (me, e, eOpts) {
//                            var chart = Ext.getCmp('theChart');
//                            //Ext.getCmp('PortletKMI').setLoading('Working...');
//                            setTimeout(function () {
//                                var dateAxis = chart.axes.getAt(1);
//                                dateAxis.fromDate = dateYearAgo;
//                                dateAxis.toDate = dateToday;
//                                dateAxis.step = [Ext.Date.MONTH, 3];
//                                chart.redraw();
//                                var percentAxis = chart.axes.getAt(0);
//                                percentAxis.minimum = 0,
//                                            percentAxis.maximum = 100,
//                                            chart.redraw();

//                                Ext.getCmp('slidePercent').setValue(100);
//                                Ext.getCmp('slideDateFrom').setValue(1);
//                                Ext.getCmp('slideDateTo').setValue(365);

//                                // Ext.getCmp('PortletKMI').setLoading(false);
//                            }, 50);
//                        }
//                    } //reset
//                ]
//                }, //toolbar




//Ext.define('EMSPEED.dashboard.view.CustomEditorField', {
//    extend: 'Ext.form.field.Picker',
//    alias: 'widget.customeditorfield',
//    editable: false,
//    hideTrigger: true,
//    pickerOffset: [ 0, -23 ],
//    listeners: {
//        focus: function( fld, e, opts ) {
//            fld.expand();
//        }
//    },
//    cancelEdit: function() {
//        var me = this;
//        me.fireEvent( 'blur' );
//        me.collapse();       
//    },
//    applyValues: function() {
//        debugger;
//        var me = this,
//            form = me.picker,
//            vals = form.getForm().getValues();    
//        // set the value of the editable field        
//        me.setValue( Ext.encode( vals ) );
//        me.fireEvent( 'blur' );
//        me.collapse();        
//    },
//    createPicker: function() {
//    debugger;
//        var me = this,
//            format = Ext.String.format;
//        return Ext.create('Ext.form.Panel', {
//            title: 'Enter Product Details',
//            //height: 250,
//            bodypadding:5,
//            header: { xtype: 'container', html: 'Edit...', padding: '4 4 4 8' },
//            pickerField: me,
//            ownerCt: me.ownerCt,
//            renderTo: document.body,
//            floating: true,
//            bodyPadding:8,
//            items: [
//                {
//                    xtype: 'textfield',
//                    fieldLabel: 'Product',
//                    labelAlign: 'top',
//                    anchor: '100%',
//                    name: 'product'
//                },
//                {
//                    xtype: 'textfield',
//                    fieldLabel: 'Tagline',
//                    labelAlign: 'top',
//                    anchor: '100%',
//                    name: 'tagline'
//                }                           
//            ],
//            dockedItems: [
//                {
//                    xtype: 'toolbar',
//                    dock: 'bottom',
//                    items: [
//                        {
//                            xtype: 'button',
//                            name:'save',
//                            text:'Save',
//                            //iconCls: 'accepticon',
//                            handler: function( btn, e, opts ) {
//                                me.applyValues();
//                            }                                
//                        },
//                        '->',                        
//                        {
//                            xtype: 'button',
//                            name:'cancel',
//                            text:'Cancel',
//                            //iconCls: 'cancelicon',
//                            handler: function( btn, e, opts ) {
//                                me.cancelEdit();
//                            }                                
//                        }


//                    ]                    
//                }
//            ],
//            listeners: {
//                afterrender: function( panel, opts ) {
//                    panel.getForm().setValues( 
//                        Ext.decode( me.getValue() ) 
//                    );                      
//                }
//            }
//        })            
//    }
//});








//        var fields = ['DFX', 'PMT', 'RMT', 'Risk', { name: 'SnapshotDate', type: 'date', dateFormat: 'Y-m-dTH:i:s.u' } ];
//        var data = {
//            vals: [
//                { "DFX": 0, "PMT": 0, "RMT": 87.18, "Risk": 33.29, "SnapshotDate": "2013-02-06T21:57:38.85"  },
//            //                { "SnapshotDate": "2013-02-12T19:30:57.287", "DFX": 0, "PMT": 0, "RMT": 0, "Risk": 0 },
//            //                { "SnapshotDate": "2013-02-12T20:07:28.69", "DFX": 0, "PMT": 0, "RMT": 49.53, "Risk": 0 },
//            //                { "SnapshotDate": "2013-02-12T23:07:01.43", "DFX": 0, "PMT": 0, "RMT": 49.53, "Risk": 2.42 },
//            //                { "SnapshotDate": "2013-02-12T23:44:12.02", "DFX": 0, "PMT": 22.65, "RMT": 49.53, "Risk": 2.42 },
//            //                { "SnapshotDate": "2013-02-12T23:48:11.877", "DFX": 0, "PMT": 30.19, "RMT": 49.53, "Risk": 2.42 },
//            //                { "SnapshotDate": "2013-02-13T17:56:12.037", "DFX": 7.49, "PMT": 22.65, "RMT": 49.53, "Risk": 6.04 },
//            //                { "SnapshotDate": "2013-04-23T18:50:14.857", "DFX": 0, "PMT": 22.65, "RMT": 49.53, "Risk": 6.04 }
//            ],
//            lastScore: { 'RMT': 50, 'Risk': 6, 'DFX': 0, 'PMT': 23 }
//        };
//        var store2 = new Ext.data.Store({
//            fields: fields,
//            data: data.vals
//        });
//        debugger;






//                {
//                    xtype: 'toolbar',
//                    width: '100%',
//                    border: 0,
//                    items: [
//                        {
//                            text: 'fit',
//                            width: '95px',
//                            listeners: {
//                                click: function (me, e, eOpts) {
//                                    var chart = Ext.getCmp('theChart');
//                                    Ext.getCmp('PortletKMI').setLoading('Working...');
//                                    setTimeout(function () {
//                                        var dateAxis = chart.axes.getAt(1);
//                                        dateAxis.fromDate = new Date('2013-02-05T21:57:38.85');
//                                        dateAxis.toDate = new Date('2013-03-08T18:50:14.857');
//                                        dateAxis.step = [Ext.Date.MONTH, 1];
//                                        chart.redraw();
//                                        Ext.getCmp('PortletKMI').setLoading(false);
//                                    }, 50);
//                                }
//                            }
//                        }, //fit

//                        {
//                        text: 'sliders',
//                        width: '95px',
//                        handler: function (me, e, eOpts) {
//                            var c = Ext.getCmp('dateSliders');
//                            c.setVisible(c.isHidden());
//                            var p = Ext.getCmp('percentSliders');
//                            p.setVisible(p.isHidden());
//                            var f = Ext.getCmp('theFooter');
//                            f.setVisible(p.isHidden());
//                        }
//                    }, //sliders

//                        {
//                        text: 'Save Chart',
//                        width: '95px',
//                        handler: function () {
//                            Ext.MessageBox.confirm('Confirm Download', 'Would you like to download the chart as an image?', function (choice) {
//                                if (choice == 'yes') {
//                                    Ext.getCmp('theChart').save({
//                                        type: 'image/png'
//                                    });
//                                }
//                            });
//                        }
//                    }, //save chart
//                        {
//                        text: 'reset',
//                        width: '95px',
//                        handler: function (me, e, eOpts) {
//                            var chart = Ext.getCmp('theChart');
//                            Ext.getCmp('PortletKMI').setLoading('Working...');
//                            setTimeout(function () {
//                                var dateAxis = chart.axes.getAt(1);
//                                dateAxis.fromDate = dateYearAgo;
//                                dateAxis.toDate = dateToday;
//                                dateAxis.step = [Ext.Date.MONTH, 3];
//                                chart.redraw();
//                                var percentAxis = chart.axes.getAt(0);
//                                percentAxis.minimum = 0,
//                                            percentAxis.maximum = 100,
//                                            chart.redraw();

//                                Ext.getCmp('slidePercent').setValue(100);
//                                Ext.getCmp('slideDateFrom').setValue(1);
//                                Ext.getCmp('slideDateTo').setValue(365);

//                                Ext.getCmp('PortletKMI').setLoading(false);
//                            }, 50);
//                        }
//                    } //reset



//                    //                        {
//                    //                            text: 'fit2',
//                    //                            handler: function (me, e, eOpts) {
//                    //                                var chart = Ext.getCmp('theChart');
//                    //                                Ext.getCmp('PortletKMI').setLoading('Working...');
//                    //                                setTimeout(function () {
//                    //                                    var dateAxis = chart.axes.getAt(1);
//                    //                                    dateAxis.fromDate = new Date('2013-02-04T21:57:38.85');
//                    //                                    dateAxis.toDate = new Date('2013-05-01T18:50:14.857');
//                    //                                    dateAxis.step = [Ext.Date.MONTH, 1];
//                    //                                    chart.redraw();
//                    //                                    Ext.getCmp('PortletKMI').setLoading(false);
//                    //                                }, 50);
//                    //                            }
//                    //                        }, //fit2

//                    //                        {
//                    //                        text: 'toggle grid',
//                    //                        handler: function (me, e, eOpts) {
//                    //                            var chart = Ext.getCmp('theChart');
//                    //                            //Ext.getCmp('PortletKMI').setLoading('Working...');
//                    //                            setTimeout(function () {
//                    //                                var percentAxis = chart.axes.getAt(0);
//                    //                                //percentAxis.drawGrid(false);
//                    //                                //percentAxis.gridLines.hide(true);

//                    //                                if (percentAxis.grid.odd.opacity === 1) {
//                    //                                    percentAxis.grid.odd.opacity = 0;
//                    //                                }
//                    //                                else {
//                    //                                    percentAxis.grid.odd.opacity = 1;
//                    //                                }
//                    //                                chart.redraw();
//                    //                                //Ext.getCmp('PortletKMI').setLoading(false);
//                    //                            }, 50);
//                    //                        }
//                    //                    }, //toggle grid


//                    //                        {
//                    //                            text: '',
//                    //                            handler: function (me, e, eOpts) {
//                    //                                var chart = Ext.getCmp('theChart');
//                    //                                chart.setLoading('Working...');
//                    //                                setTimeout(function () {

//                    //                                    chart.redraw();
//                    //                                    chart.setLoading(false);
//                    //                                }, 50);
//                    //                            }
//                    //                        }, //

//                    //                        {
//                    //                        text: 'custom',
//                    //                        listeners: {
//                    //                            click: function (me, e, eOpts) {
//                    //                                var chart = Ext.getCmp('theChart');
//                    //                                Ext.getCmp('PortletKMI').setLoading('Working...');
//                    //                                setTimeout(function () {
//                    //                                    var dateAxis = chart.axes.getAt(1);
//                    //                                    dateAxis.fromDate = new Date('2013-02-05T21:57:38.85');
//                    //                                    dateAxis.toDate = new Date('2013-02-14T17:56:12.037');
//                    //                                    dateAxis.step = [Ext.Date.DAY, 1];
//                    //                                    chart.redraw();
//                    //                                    Ext.getCmp('PortletKMI').setLoading(false);
//                    //                                }, 50);
//                    //                            }
//                    //                        }
//                    //                    }, //custom
//                    //                        {
//                    //                        text: 'minute',
//                    //                        listeners: {
//                    //                            click: function (me, e, eOpts) {
//                    //                                var chart = Ext.getCmp('theChart');
//                    //                                Ext.getCmp('PortletKMI').setLoading('Working...');
//                    //                                setTimeout(function () {
//                    //                                    var dateAxis = chart.axes.getAt(1);
//                    //                                    dateAxis.fromDate = new Date('2013-02-12T18:30:57.287');
//                    //                                    dateAxis.toDate = new Date('2013-02-14T00:56:12.037');
//                    //                                    dateAxis.step = [Ext.Date.HOUR, 1];
//                    //                                    chart.redraw();
//                    //                                    Ext.getCmp('PortletKMI').setLoading(false);
//                    //                                }, 50);
//                    //                            }
//                    //                        }
//                    //                    }, //minute
//                    //                        {
//                    //                            text: 'test',
//                    //                            handler: function (me, e, eOpts) {
//                    //                                var chart = Ext.getCmp('theChart');
//                    //                                var dateAxis = chart.axes.getAt(1);
//                    //                                alert('fromDate:' + dateAxis.fromDate);
//                    //                                alert('toDate:' + dateAxis.toDate);
//                    //                                var percentAxis = chart.axes.getAt(0);
//                    //                            }
//                    //                        } //test
//                    ]
//                }, //toolbar


Ext.define('EMSPEED.dashboard.view.dashboardPortletPDDCDP', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletPDDCDP',
    title: 'PDD CDP',

    layout: 'vbox',

    items: [

        {
            xtype: 'container',
            html: '<div data-bind="text: data.pddNumber"></div>' +
                '<div data-bind="text: data.projectName"></div>' +
                '<div data-bind="text: data.productChampion"></div>' +


                '<table>' +
                '<thead><tr>' +
                '    <th>menu</th>' +
                '</tr></thead>' +
                '<!-- Todo: Generate table body -->' +
               '<tbody data-bind="foreach: gearMenu">' +
                '<tr>' +
                '    <td data-bind="text: menuItemName"></td>' +
                '</tr>    ' +
                '</tbody>' +

            '</table>'
        }
    ],





    //initComponent: function () {
    //    Ext.apply(this, {
    //        items: [

    //            { xtype: 'container', margin: '10 10 0 10', layout: 'hbox', items: [
    //                { xtype: 'label', text: 'Next CDP Event:', style: {fontWeight: 'bold' } },
    //                { xtype: 'label', text: 'Realization Launch 6/30/2013', margin: '0 0 0 10'}
    //            ]},
    //            { xtype: 'container', margin: '10 10 0 10', layout: 'hbox', items: [
    //                { xtype: 'label', text: 'Project Request CPD Readiness:', style: { fontWeight: 'bold'} },
    //                { xtype: 'label', text: '%', margin: '0 0 0 10' }
    //            ]},
    //            { xtype: 'container', margin: '10 10 10 10', layout: 'hbox', items: [
    //                { xtype: 'label', text: 'Slip:', style: { fontWeight: 'bold'} },
    //                { xtype: 'label', text: 'N/A', margin: '0 0 0 10' }
    //            ]}
    //        ]
    //    });
    //    this.callParent(arguments);
    //},


    config: {
        theConfig: null
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardPortletPMT', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletPMT',
    title: 'PMT',

    configModified: function (theConfig) {
        //alert(Ext.encode(theConfig));
    },

    sourceConfig: {
        title: {
            displayName: 'Title'
        }
    },

    initComponent: function () {
        Ext.apply(this, {
            items: [
                {
                    xtype: 'container',
                    margin: '0 0 15 0',
                    html: '<div style=xmin-height:256px; xwidth:100%; overflow:auto;"><object data="data:application/x-silverlight-2," type="application/x-silverlight-2" height="256px" width="975px" ><param name="windowless" value="true" /><param name="background" value="transparent" /><param name="source" value="/_layouts/clientbin/emsportal/PMTView.xap"/><param name="onError" value="onSilverlightError" /><param name="background" value="white" /><param name="minRuntimeVersion" value="4.0.50401.0" /><param name="autoUpgrade" value="true" /><a href="http://go.microsoft.com/fwlink/?LinkID=149156&v=4.0.50401.0" style="text-decoration:none"><img src="http://go.microsoft.com/fwlink/?LinkId=161376" alt="Get Microsoft Silverlight" style="border-style:none"/></a></object><iframe id="_sl_historyFrame" style="visibility:hidden;height:0px;width:0px;border:0px"></iframe></div>'
                }
            ]
        });
        this.callParent(arguments);
    },

    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardPortletRiskMatrix', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletRiskMatrix',
    layout: 'hbox',
    id: 'dashboardPortletRiskMatrix',

    reload: function () {
        dashboard.startLoading();
        var me = this;
        setTimeout(function () {
            me.getData();
        }, 50);
    },

    theColors: [
        ['insignificant', 'low', 'low', 'low', 'medium'],
        ['low', 'low', 'medium', 'medium', 'high'],
        ['low', 'medium', 'medium', 'high', 'high'],
        ['low', 'medium', 'high', 'high', 'extreme'],
        ['medium', 'high', 'high', 'extreme', 'extreme']
    ],
    
    clickableColors: ['insignificant', 'low', 'medium', 'high', 'extreme'],


    currColor: 'high', //'extreme',
    currentSelection: { insignificant: false, low: false, medium: false, high: true, extreme: true },
    
    updateFilter: function (rm) {
        var store = Ext.getCmp('gridStore').store;

        store.clearFilter();
        store.filterBy(function (r) {
            if (r.raw.riskSeverity === null) {
                return false;
            }
            if (r.raw.riskOccurrence === null) {
                return false;
            }

            var theRow = r.raw.riskSeverity - 1,
                theColumn = r.raw.riskOccurrence - 1;

            for (var item in rm.currentSelection) {
                if (rm.currentSelection[item]) {
                    if (rm.theColors[r.raw.riskOccurrence - 1][r.raw.riskSeverity - 1] == item) {
                        return true;
                    }
                }
            }


            return false;
        });

        for (var item in rm.currentSelection) {
            if (rm.currentSelection[item]) {
                $('.matrix ul.row li.' + item).addClass('the-selected-' + item);
                $('.matrix .filter li.' + item).addClass('the-selected-' + item);
            } else {
                $('.matrix ul.row li.' + item).removeClass('the-selected-' + item);
                $('.matrix .filter li.' + item).removeClass('the-selected-' + item);
            }
        }
    },

    initComponent: function () {
        dashboard.startLoading();

        Ext.apply(this, {
            items: [
                {
                    xtype: 'container',
                    layout: 'vbox',
                    margin: '10 10 10 10',
                    items: [
                        { xtype: 'text', text: 'Occurrence', margin: '0 0 0 25', degrees: 0 },
                        {
                            xtype: 'container',
                            layout: 'hbox',
                            items: [
                                { xtype: 'text', text: 'Severity', margin: '10 0 0 0', degrees: -90 },
                                {
                                    xtype: 'dataview',
                                    width: 216,
                                    listeners: {
                                        scope: this,
                                        itemclick: function (dataview, record, item, index, e, eOpts) {
                                            var store = this.down('grid').store;
                                            store.clearFilter();
                                            store.filter("riskSeverity", record.data.severity);
                                            store.filter("riskOccurrence", record.data.occurrence);
                                        }

                                    },
                                    singleSelect: true,
                                    overItemCls: 'x-view-over',
                                    itemSelector: '.clickable',
                                    emptyText: 'No data available',
                                    deferInitialRefresh: false,
                                    tpl: new Ext.XTemplate(
                                        '<div class="matrix">',
                                        '<tpl for=".">',
                                        '{[this.doVal(values.severity, values.occurrence, values.count)]}',
                                        '</tpl>',
                                        '<div class="filter">',
                                            '<span>Filters</span>',
                                            '<ul>',
                                                '<li class="insignificant" data-e-value="insignificant">&nbsp;</li>',
                                                '<li class="low" data-e-value="low">&nbsp;</li>',
                                                '<li class="medium" data-e-value="medium">&nbsp;</li>',
                                                '<li class="high" data-e-value="high">&nbsp;</li>',
                                                '<li class="extreme" data-e-value="extreme">&nbsp;</li>',
                                            '</ul>',
                                        '</div>',
                                        '</div>',
                                        {
                                            disableFormats: true,
                                            doVal: function (r, c, v) {
                                                var rm = Ext.getCmp('dashboardPortletRiskMatrix');
                                                var s = '';
                                                if (c === 1) {
                                                    s = s + '<ul class="row">';
                                                }
                                                if (v === 0) {
                                                    s = s + '<li data-e-value="'+rm.theColors[r - 1][c - 1]+'" class="clickable ' + rm.theColors[r - 1][c - 1] + '">&nbsp;' + '' + '&nbsp;</li>';
                                                } else {
                                                    s = s + '<li data-e-value="' + rm.theColors[r - 1][c - 1] + '" class="clickable ' + rm.theColors[r - 1][c - 1] + '">&nbsp;' + v + '&nbsp;</li>';
                                                }
                                                if (c === 5) {
                                                    s = s + '</ul>';
                                                }
                                                return s;
                                            }
                                        }
                                    )
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'grid',
                    id:'gridStore',
                    margin: '27 15 0 0',
                    flex: 1,
                    height: 241,
                    columns: [
                        { text: 'Name', name: 'riskName', dataIndex: 'riskName', width: 300, menuDisabled: true, flex: 1 },
                        { text: 'S', name: 'riskSeverity', dataIndex: 'riskSeverity', width: 40, menuDisabled: true },
                        { text: 'O', name: 'riskOccurrence', dataIndex: 'riskOccurrence', width: 40, menuDisabled: true },
                        { text: 'R', name: 'riskScore', dataIndex: 'riskScore', width: 40, menuDisabled: true, tdCls: 'x-riskScore-cell' }
                    ],
                    viewConfig: {
                        getRowClass: function (record, index) {
                            
                            var theColor = this.up('panel').up('panel').theColors[record.get('riskOccurrence') - 1][record.get('riskSeverity') - 1];
                            var color = theColor + '-r';
                            return color;
                        }
                    }

                }
            ]
        });
        this.callParent(arguments);

        this.getData();


    },

    getData: function () {

        if (com.proxy === 'xmemoryProxy') {
            //me.loadTestData();
        }
        else {
            var theUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService.svc/json/GetRiskBurndown';
            var getParams = { type: 1, projectId: parseFloat(project.projectId) };
            var me = this;
            $.ajax({
                url: theUrl,
                type: 'POST',
                crossDomain: true,
                data: Ext.encode(getParams),
                contentType: "application/json; charset=utf-8",
                xhrFields: { withCredentials: true },
                dataType: 'json',
                async: true
            })
                .done(function (data) {

                    //if (com.proxy === 'memoryProxy') {
                    //    data = { "Matrix": [{ "severity": 1, "occurrence": 1, "count": 0 }, { "severity": 1, "occurrence": 2, "count": 9 }, { "severity": 1, "occurrence": 3, "count": 1 }, { "severity": 1, "occurrence": 4, "count": 0 }, { "severity": 1, "occurrence": 5, "count": 0 }, { "severity": 2, "occurrence": 1, "count": 3 }, { "severity": 2, "occurrence": 2, "count": 9 }, { "severity": 2, "occurrence": 3, "count": 1 }, { "severity": 2, "occurrence": 4, "count": 0 }, { "severity": 2, "occurrence": 5, "count": 0 }, { "severity": 3, "occurrence": 1, "count": 0 }, { "severity": 3, "occurrence": 2, "count": 4 }, { "severity": 3, "occurrence": 3, "count": 10 }, { "severity": 3, "occurrence": 4, "count": 0 }, { "severity": 3, "occurrence": 5, "count": 0 }, { "severity": 4, "occurrence": 1, "count": 0 }, { "severity": 4, "occurrence": 2, "count": 2 }, { "severity": 4, "occurrence": 3, "count": 0 }, { "severity": 4, "occurrence": 4, "count": 0 }, { "severity": 4, "occurrence": 5, "count": 0 }, { "severity": 5, "occurrence": 1, "count": 0 }, { "severity": 5, "occurrence": 2, "count": 0 }, { "severity": 5, "occurrence": 3, "count": 1 }, { "severity": 5, "occurrence": 4, "count": 0 }, { "severity": 5, "occurrence": 5, "count": 0 }], "Risks": [{ "riskSequence": 8, "riskName": "Modulation not recognized at surface due to channel distortion", "riskSeverity": 5, "riskOccurrence": 3, "riskScore": 15, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Physical data rates from 30k to 50k ft, Modulation, Spec 9" }, { "riskSequence": 9, "riskName": "Too many false alarms", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Physical data rates from 30k to 50k ft, Diagnostics, alarms, and automation, Spec 10" }, { "riskSequence": 10, "riskName": "Receivers and noise cancellation not working below 7 dB SNR", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Physical data rates from 30k to 50k ft, Receivers and noise cancellation, Spec 12" }, { "riskSequence": 13, "riskName": "Implementation errors", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for Pressure and Sampling tools, Data compression, Spec 21" }, { "riskSequence": 17, "riskName": "Implementation errors", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on DDR\/EMLA, Data compression, Spec 26" }, { "riskSequence": 20, "riskName": "Implementation errors", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for RSS tools, Data compression, Spec 29" }, { "riskSequence": 26, "riskName": "Implementation errors", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on Seismic measurements, Data compression, Spec 41" }, { "riskSequence": 30, "riskName": "Too many false alarms", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "RT diagnostics and smart alarms, Diagnostics, alarms, and automation, Spec 47" }, { "riskSequence": 31, "riskName": "Receivers and noise cancellation not working below 7 dB SNR", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Demodulation error rates, Receivers and noise cancellation, Spec 49" }, { "riskSequence": 36, "riskName": "Implementation errors", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Drilling Mechanics\/Dynamics data through mud pulse telemetry, Data compression" }, { "riskSequence": 38, "riskName": "Target depth not achieved with the required reliability", "riskSeverity": 3, "riskOccurrence": 3, "riskScore": 9, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Demodulation error rates, Receivers and noise cancellation" }, { "riskSequence": 34, "riskName": "Missing data", "riskSeverity": 4, "riskOccurrence": 2, "riskScore": 8, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "EcoScope's NGD measurements thorugh mud pulse telemetry, Receivers and noise cancellation" }, { "riskSequence": 35, "riskName": "Decoding false commands", "riskSeverity": 4, "riskOccurrence": 2, "riskScore": 8, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for Pressure and Sampling tools, Frame structure\/downlink protocol" }, { "riskSequence": 37, "riskName": "Not enough flexibility in the frame structure for drilling dynamics data", "riskSeverity": 3, "riskOccurrence": 2, "riskScore": 6, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Drilling Mechanics\/Dynamics data through mud pulse telemetry, Frame structure\/downlink protocol" }, { "riskSequence": 16, "riskName": "Missing commands", "riskSeverity": 3, "riskOccurrence": 2, "riskScore": 6, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for Pressure and Sampling tools, Frame structure\/downlink protocol, Spec 24" }, { "riskSequence": 7, "riskName": "NGD measurements not recovered at surface, NGD channels quality compromised due to compression", "riskSeverity": 3, "riskOccurrence": 2, "riskScore": 6, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "EcoScope's NGD measurements thorugh mud pulse telemetry, Decompression, Spec 8" }, { "riskSequence": 39, "riskName": "Loss of experienced technical contributors", "riskSeverity": 2, "riskOccurrence": 3, "riskScore": 6, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Project Development Time, Overall Product" }, { "riskSequence": 40, "riskName": "RSI from operating keyboard during development of software or using it", "riskSeverity": 3, "riskOccurrence": 2, "riskScore": 6, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Health, Safety and Environment, Overall Product" }, { "riskSequence": 15, "riskName": "Decompressed channel data quality compromised due to compression", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for Pressure and Sampling tools, Decompression, Spec 23" }, { "riskSequence": 5, "riskName": "Data compression algorithm not behaving as during the feasibility tests (offline data)", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "EcoScope's NGD measurements thorugh mud pulse telemetry, Data compression, Spec 6" }, { "riskSequence": 1, "riskName": "Algorithms takes too long to compute compressed curve", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Pumps-off APWD profile through mud pulse telemetry, Data compression, Spec 1" }, { "riskSequence": 2, "riskName": "Decompressed channel data quality compromised due to compression", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Pumps-off APWD profile through mud pulse telemetry, Decompression, Spec 2" }, { "riskSequence": 19, "riskName": "Decompressed channel data quality compromised due to compression", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on DDR\/EMLA, Decompression, Spec 28" }, { "riskSequence": 21, "riskName": "Decompressed channel data quality compromised due to compression", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for RSS tools, Decompression, Spec 30" }, { "riskSequence": 23, "riskName": "Algorithms takes too long to compute compressed curve", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Drilling Mechanics\/Dynamics data through mud pulse telemetry, Data compression, Spec 33" }, { "riskSequence": 24, "riskName": "Decompressed channel data quality compromised due to compression", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Drilling Mechanics\/Dynamics data through mud pulse telemetry, Decompression, Spec 34" }, { "riskSequence": 28, "riskName": "Decompressed channel data quality compromised due to compression", "riskSeverity": 2, "riskOccurrence": 2, "riskScore": 4, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on Seismic measurements, Decompression, Spec 44" }, { "riskSequence": 33, "riskName": "Budget reductions", "riskSeverity": 1, "riskOccurrence": 3, "riskScore": 3, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Project Development Time, Overall Product, Spec 55" }, { "riskSequence": 29, "riskName": "Data loss due to frames miss interpreted at surface", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on Seismic measurements, Frame structure\/downlink protocol, Spec 45" }, { "riskSequence": 32, "riskName": "Model not accurate", "riskSeverity": 2, "riskOccurrence": 1, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "SPT placement prediction accuracy, Pre-job preparation, Spec 50" }, { "riskSequence": 25, "riskName": "Data loss due to frames miss interpreted at surface", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Drilling Mechanics\/Dynamics data through mud pulse telemetry, Frame structure\/downlink protocol, Spec 35" }, { "riskSequence": 27, "riskName": "DPOINTS received in error are fed back to the decompression algorithm", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on Seismic measurements, Receivers and noise cancellation, Spec 42" }, { "riskSequence": 22, "riskName": "Data loss due to frames miss interpreted at surface", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for RSS tools, Frame structure\/downlink protocol, Spec 31" }, { "riskSequence": 3, "riskName": "Data loss due to frames miss interpreted at surface", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Pumps-off APWD profile through mud pulse telemetry, Frame structure\/downlink protocol, Spec 3" }, { "riskSequence": 4, "riskName": "DPOINTS received in error are fed back to the decompression algorithm", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Pumps-off APWD profile through mud pulse telemetry, Receivers and noise cancellation, Spec 4" }, { "riskSequence": 11, "riskName": "Model not accurate", "riskSeverity": 2, "riskOccurrence": 1, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Physical data rates from 30k to 50k ft, Pre-job preparation, Spec 13" }, { "riskSequence": 12, "riskName": "Model not accurate", "riskSeverity": 2, "riskOccurrence": 1, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "SPT placement application for different conditions, Pre-job preparation, Spec 16" }, { "riskSequence": 6, "riskName": "DPOINTS received in error are fed back to the decompression algorithm", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "EcoScope's NGD measurements thorugh mud pulse telemetry, Receivers and noise cancellation, Spec 7" }, { "riskSequence": 14, "riskName": "Data loss due to frames miss interpreted at surface", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Bandwidth optimization for Pressure and Sampling tools, Frame structure\/downlink protocol, Spec 22" }, { "riskSequence": 18, "riskName": "DPOINTS received in error are fed back to the decompression algorithm", "riskSeverity": 1, "riskOccurrence": 2, "riskScore": 2, "riskExposureCategorySequence": null, "riskExposureCategoryName": null, "placesUsed": "Compression on DDR\/EMLA, Receivers and noise cancellation, Spec 27" }] };
                    //}

                    var storeMatrix = Ext.create('Ext.data.Store', {
                        fields: ['count', 'occurrence', 'severity'],

                        data: data.Matrix

                    });
                    me.down('dataview').bindStore(storeMatrix);

                    var storeGrid = Ext.create('Ext.data.Store', {
                        fields: ['riskSequence', 'riskName', 'riskSeverity', 'riskOccurrence', 'riskScore', 'riskExposureCategorySequence', 'riskExposureCategoryName', 'placesUsed'],
                        data: data.Risks
                    });

                    storeGrid.filter("riskSeverity", 10);
                    storeGrid.filter("riskOccurrence", 10);
                    me.down('grid').bindStore(storeGrid);

                    me.updateFilter(me);

                    dashboard.endLoading();

                })
                .fail(function (data) {
                    throw data.status + '-' + data.statusText + ': ' + theUrl;
                    //window.onerror(data.status + '-' + data.statusText + ': ' + theUrl, 'dashboardPortletKPI.js', 999);
                });
        }



    }

    //constructor: function (cfg) {
    //    this.initConfig(cfg);
    //    this.callParent(arguments);
    //},

    //get: function (s) {
    //    return this.currConfig.get(s);
    //},

    //configModified: function (s) {
    //    this.theConfig = s;
    //    this.loadPage();
    //}
});


$(function () {
    
    $('body').on('click', '.matrix .filter li', function () {
        var type = $(this).attr('data-e-value'),
            rm = Ext.getCmp('dashboardPortletRiskMatrix');
        
        rm.currentSelection[type] = !rm.currentSelection[type];
        rm.updateFilter(rm);

    });

    $('body').on('click', '.matrix ul.row li', function () {
        var color = $(this).attr('data-e-value');
        clearSelection();

        $(this).addClass('the-selected-' + color);

    });

    // filters
    $('body').on('mouseover', '.matrix .filter li', function () {
        var type = $(this).attr('data-e-value');
        $('.matrix ul.row li.' + type).addClass('the-hover-' + type);

    }).on('mouseout', '.matrix .filter li', function () {
        var type = $(this).attr('data-e-value');
        $('.matrix ul.row li.' + type).removeClass('the-hover-' + type);
    });

    var clearSelection = function () {
        rm = Ext.getCmp('dashboardPortletRiskMatrix');
        
        for (var item in rm.currentSelection) {
            rm.currentSelection[item] = false;
        }

        $('.matrix li').removeClass(function (index, classNames) {
            var currentClasses = classNames.split(" "),
                classesToRemove = [];

            $.each(currentClasses, function(index, className) {
                if (/the-selected.*/.test(className)) {
                    classesToRemove.push(className);
                }
            });

            return classesToRemove.join(" ");
        });

    };
    
});








//var store = Ext.create('Ext.data.Store', {
//    //autoLoad: true,
//    fields: ['Matrix', 'Risks'],
//    proxy: {
//        type: com.proxy,
//        root: '',
//        service: 'ProjectService',
//        method: 'GetRiskBurndown',
//        jsonData: { type: 1, projectId: parseFloat(com.getProjectId()) }
//    }
//});
//store.load({
//    scope: this,
//    callback: function (records, operation, success) {
//        if (success === true) {

//            var storeMatrix = Ext.create('Ext.data.Store', {
//                fields: ['count', 'occurrence', 'severity'],

//                data: store.data.items[0].raw.Matrix

//            });
//            this.down('dataview').bindStore(storeMatrix);

//            var storeGrid = Ext.create('Ext.data.Store', {
//                fields: ['riskSequence', 'riskName', 'riskSeverity', 'riskOccurrence', 'riskScore', 'riskExposureCategorySequence', 'riskExposureCategoryName', 'placesUsed'],
//                data: store.data.items[0].raw.Risks
//            });

//            storeGrid.filter("riskSeverity", 10);
//            storeGrid.filter("riskOccurrence", 10);
//            this.down('grid').bindStore(storeGrid);

//            var temprm = Ext.getCmp('dashboardPortletRiskMatrix');
//            var tempstore = Ext.getCmp('gridStore').store;
//            this.updateFilter(tempstore, temprm);

//            dashboard.endLoading();
//        }
//        else {
//            alert('error');
//            dashboard.endLoading();
//            debugger;
//        }
//    }
//});

Ext.define('EMSPEED.dashboard.view.dashboardPortletSubProjects', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletSubProjects',
    title: 'Sub Projects',
    height: 180,

    reload: function () {
        dashboard.startLoading();
        var me = this;
        setTimeout(function () {
            me.getData();
        }, 50);
    },

    initComponent: function () {
        dashboard.startLoading();

        this.fields = [
            { name: 'pddNumber', type: 'int', text: 'Project ID', dataIndex: 'pddNumber', width: 100, menuDisabled: true },
            { name: 'projectName', type: 'string', text: 'Project Name', dataIndex: 'projectName', flex: 1, menuDisabled: true, renderer: this.renderProjectName },
            { name: 'projectManager', type: 'string', text: 'Project Manager', dataIndex: 'projectManager', width: 200, menuDisabled: true },
            { name: 'productChampion', type: 'string', text: 'Product Champion', dataIndex: 'productChampion', width: 200, menuDisabled: true },
            { name: 'lastModifiedBy', type: 'string', text: 'Last Modified By', dataIndex: 'lastModifiedBy', width: 200, menuDisabled: true },
            { name: 'timeSpanFromLastUpdate', type: 'string', text: 'Last Update', dataIndex: 'timeSpanFromLastUpdate', width: 200, hidden: true, menuDisabled: true },
            {
                name: 'lastUpdateDate', type: 'string', text: 'Last Update', dataIndex: 'lastUpdateDate', width: 200, menuDisabled: true, renderer: this.renderLastUpdateDate,
                sortType: function (value) {
                    var theDate = new Date(parseInt(value.replace('/Date(', '')));
                    return theDate;
                }
            }
        ];

        this.items = [
            {
                xtype: 'grid',
                columns: this.fields,
                border: false,
                margin: '0 0 3 0',
                width: '100%',
                cls: 'myprojects-grid',
                disableSelection: true,
                enableCtxMenu: false,  // turn off header context menu
                enableColLock: false,  // turn off column lock context items
                enableColumnMove: false,  // turn off column reorder drag drop
                enableColumnResize: false,  // turn off column resize for whole grid
                enableRowHeightSync: true
            }
        ];
        this.callParent(arguments);
        //this.down('grid').bindStore(this.getProgramStore());
        this.getData();
    },

    getParams: function () {
        var sParams = {
            "filter": {
                "projectId": parseFloat(project.getProjectId()),
                "depth": 1,
                "loadRoot": false,
                "loadBaseAttributes": true,
                "loadAuditInfo": true,
                "loadLevelInfo": true,
                "loadManagement": true,
                "loadDfxKpis": true,
                "loadPmtKpis": true,
                "loadUrls": true,
                "displayType": 1
            }
        };
        return sParams;
    },

    getData: function () {
        var me = this;
        var theUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService.svc/json/GetProgram';
        var theData = {};
        $.ajax({
            url: theUrl,
            type: 'POST',
            crossDomain: true,
            data: Ext.encode(this.getParams()),
            contentType: "application/json; charset=utf-8",
            xhrFields: { withCredentials: true },
            dataType: 'json',
            async: false
        })
        .done(function (data) {

            //if (com.proxy === 'memoryProxy') {
            //    data = [{ "projectId": 97386, "projectName": "Ardmore Drilling Site Sustainability", "pddNumber": "97386", "level": 3, "isChild": true, "isParent": false, "isParentAccessible": false, "parentProjectId": 97368, "parentProjectName": "Ardmore Drilling Site Wellhead Maintenance", "lastModifiedBy": "mshah23", "lastUpdateDate": "\/Date(947397600000-0600)\/", "timeSpanFromLastUpdate": "13 Years Ago", "targetCdpMilestoneId": 3, "targetCdpMilestoneName": "Concurrent Team Launch", "productGroupId": 2, "productGroupCode": "CLG", "exception": false, "plannedCommercializationDate": "\/Date(1234072800000-0600)\/", "templateVersion": "1.15 (STS: 4.3.2.0)", "projectManager": "Sabina Scordamaglia", "productChampion": "Jonathan Guidry", "productMaturityTrackerWorksheetUrl": "\/stature\/control\/loadSlbStudy?versionId=1000011035&viewName=Requirement&ignoreViewGroup=true", "dfxWorksheetUrl": "\/stature\/control\/loadSlbStudy?versionId=1000016002&viewName=DfX&ignoreViewGroup=true", "riskRegisterWorksheetUrl": "\/stature\/control\/loadSlbStudy?versionId=1000013001&viewName=RiskRegister&ignoreViewGroup=true", "teamSiteUrl": "http:\/\/www.google.com", "requirementsMaturityIndex": 1.7653673406529089, "productMaturityIndex": 44.224983153969504, "productMaturityIncrementalIndex": 91.4942, "riskMaturityIndex": 2.0075611905230022, "rollUpProductMaturityIndex": null, "rollUpProductMaturityIncrementalIndex": null, "rollUpRiskMaturityIndex": null, "dfxScore": 40.165998670349829, "manufacturabilityMfgScore": null, "manufacturabilityScScore": null, "reliabilityScore": null, "maintainabilityScore": null, "projects": null }, { "projectId": 97388, "projectName": "Ardmore Drilling Site Security", "pddNumber": "97388", "level": 3, "isChild": true, "isParent": false, "isParentAccessible": false, "parentProjectId": 97368, "parentProjectName": "Ardmore Drilling Site Wellhead Maintenance", "lastModifiedBy": "amathew", "lastUpdateDate": "\/Date(1079416800000-0500)\/", "timeSpanFromLastUpdate": "9 Years Ago", "targetCdpMilestoneId": 3, "targetCdpMilestoneName": "Concurrent Team Launch", "productGroupId": 2, "productGroupCode": "CLG", "exception": false, "plannedCommercializationDate": "\/Date(994309200000-0500)\/", "templateVersion": "1.15 (STS: 4.3.2.0)", "projectManager": "Sabina Scordamaglia", "productChampion": "Jonathan Guidry", "productMaturityTrackerWorksheetUrl": "\/stature\/control\/loadSlbStudy?versionId=1000011035&viewName=Requirement&ignoreViewGroup=true", "dfxWorksheetUrl": "\/stature\/control\/loadSlbStudy?versionId=1000016002&viewName=DfX&ignoreViewGroup=true", "riskRegisterWorksheetUrl": "\/stature\/control\/loadSlbStudy?versionId=1000013001&viewName=RiskRegister&ignoreViewGroup=true", "teamSiteUrl": "", "requirementsMaturityIndex": 37.502097868594383, "productMaturityIndex": 93.348699854383568, "productMaturityIncrementalIndex": 45.29525, "riskMaturityIndex": 80.695012249376163, "rollUpProductMaturityIndex": null, "rollUpProductMaturityIncrementalIndex": null, "rollUpRiskMaturityIndex": null, "dfxScore": 69.864986660827412, "manufacturabilityMfgScore": null, "manufacturabilityScScore": null, "reliabilityScore": null, "maintainabilityScore": null, "projects": null }];
            //}

            var store = Ext.create('Ext.data.Store', {
                autoLoad: true,
                fields: me.fields,
                data: data
                //proxy: {
                //    type: com.proxy,
                //    root: '',
                //    service: 'ProjectService',
                //    method: 'GetProjects',
                //    jsonData: sParams
                //}
            });
            me.down('grid').bindStore(store);
            dashboard.endLoading();
        })
        .fail(function (data) {
            throw data.status + '-' + data.statusText + ': ' + theUrl;
        });
    },

    renderProjectName: function (value, p, record) {
        return Ext.String.format(
		    '<b><a style="text-decoration: underline;font-family: Univers 57 condensed " href="/sites/{0}/Portal.aspx" xtarget="_blank">{1}</a></b>',
		    record.data.pddNumber,
		    record.data.projectName
	    );
    },

    renderLastUpdateDate: function (value, p, record) {
        return record.data.timeSpanFromLastUpdate;
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardPortletTemplate', {
    extend:  EMSPEED.dashboard.view.dashboardPortletBase ,
    alias: 'widget.dashboardPortletTemplate',
    title: 'Template',

    configModified: function (theConfig) {
        //alert(Ext.encode(theConfig));
    },

    sourceConfig: {
        title: {
            displayName: 'Title'
        }
    },

    initComponent: function () {
        Ext.apply(this, {
            items: [
                { html: 'hi' }
            ]
        });
        this.callParent(arguments);
    },

    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.dashboard.view.dashboardProperties', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.dashboardProperties',
    closeAction: 'hide',
    closable: false,
    layout: 'fit',
    modal: true,
    border: false,
    resizable: false,

    width: 325,
    padding: '0 0 0 0',

    setGrid: function () {
        var g = this.down('propertygrid');
        g.getStore().sorters.items = [];
        this.theConfig = {};
        for (var propertyName in this.clientArea.theConfig) {

            if (Object.prototype.toString.call(this.clientArea.theConfig[propertyName]) === '[object Object]') {
                this.theConfig[propertyName] = Ext.encode(this.clientArea.theConfig[propertyName]);
            }
            else {
                this.theConfig[propertyName] = this.clientArea.theConfig[propertyName];
            }
        }
        console.log(this.theConfig);
        console.log(this.clientArea.sourceConfig);
        g.setSource(this.theConfig, this.clientArea.sourceConfig);
    },

    listeners: {
        show: function (me, eOpts) {
            this.setGrid();
        }
    },

    grabConfig: function () {
        dashboard.startLoading();

        var me = this;
        var callMethod = function () {
            var g = me.down('propertygrid');
            var theStore = g.store;
            for (var i = 0; i < theStore.getCount() ; i++) {
                var r = theStore.getAt(i);
                if (r.data.name.indexOf('Date') !== -1) {
                    var d = new Date(r.data.value);
                    var dString = Ext.Date.format(d, 'm/d/Y');
                    me.clientArea.theConfig[r.data.name] = dString;
                }
                else {
                    me.clientArea.theConfig[r.data.name] = Ext.decode(r.data.value);
                }
                if (r.data.name === 'title') {
                    me.clientArea.setTitle(me.clientArea.theConfig[r.data.name]);
                }
            }
            dashboard.saveState();
            me.clientArea.configModified(me.clientArea.theConfig);
            dashboard.endLoading();
        };

        setTimeout(callMethod, 500);
    },

    initComponent: function () {
        Ext.apply(this, {
            items: [
                {
                    xtype: 'form',
                    border: false,
                    bodyBorder: false,
                    items: [
                        {
                            xtype: 'propertygrid',
                            enableColumnResize: false,
                            nameColumnWidth: 150,
                            buttons: [
                                {
                                    text: 'Apply',
                                    scope: this,
                                    handler: function () {
                                        this.grabConfig();
                                    }
                                },
                                {
                                    text: 'OK',
                                    scope: this,
                                    handler: function () {
                                        this.panelHeader.el.dom.style.backgroundColor = '#6084a8';
                                        this.grabConfig();
                                        this.hide();
                                    }
                                },
                                {
                                    text: 'Cancel',
                                    scope: this,
                                    handler: function () {
                                        this.panelHeader.el.dom.style.backgroundColor = '#6084a8';
                                        this.hide();
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });
        this.callParent(arguments);
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.dashboard.controller.dashboardController', {
    extend:  Ext.app.Controller ,
               

                                  
                                    
                                 
                             

                                           
                                                    
                                                            
                                                                 
                                                      
                                                     
                                                                           
                                                     
                                                        
                                                     
                                                            
                                                             
                                                          
                                                    

                                                              
                                                             

      
    stores: [
       // 'EMSPEED.dashboard.store.dashboardSubProjectsStore',
    ],
    models: [
      //  'EMSPEED.dashboard.model.dashboardSubProjectsModel'
    ],
        
    init: function () {
        //alert('init');
        this.control({
            '#dashboardPortalPanel': { activate: this.dashboardPortalPanel_activate },
            '#dashboardPortalPanel': { beforeLayout: this.dashboardPortalPanel_beforeLayout }
        });
        //alert('init2');
    },


        dashboardPortalPanel_beforeLayout: function () {
        alert('hi');
        },


    dashboardPortalPanel_activate: function (panel, e, eOpts) {
        //com.reportingBasePanelMask = Ext.getCmp('reportingBasePanel').setLoading('Working...');
    }

});

Ext.define('EMSPEED.feedback.view.feedback', {
    singleton: true,
    alternateClassName: 'feedback',
    constructor: function () {
//        this.imagesFolder = com.appFolder + '/provision' + '/resources/images/';
//        this.siteRoot = 'http://' + location.hostname + ':' + location.port + '/';
        this.serviceRoot = 'http://' + location.hostname + ':8095/';
        this.createTicketUrl = this.serviceRoot + 'TicketService.svc/json/CreateTicket';
        this.createTicketMethod = 'POST';

        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.feedback.view.feedbackBasePanel', {
    extend:  Ext.window.Window ,
    alias: 'widget.feedbackBasePanel',
    id: 'feedbackBasePanel',
    title:'Feedback',
    layout: 'vbox',
    height: 350,
    width: 800,
    border: false,
    closable: false,
    initComponent: function () {
        this.items = [
            { xtype: 'feedbackControls' }
        ];
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.feedback.view.feedbackCommonFieldSet', {
    extend:  Ext.form.FieldSet ,
    alias: 'widget.feedbackCommonFieldSet',
    collapsible: false,
    collapsed: false,
    border: true,
    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        borderColor: '#cccccc',
        borderStyle: 'solid'
    },
    margin: '10 10 10 10'
});

Ext.define('EMSPEED.feedback.view.feedbackControls', {
    extend:  EMSPEED.feedback.view.feedbackCommonFieldSet ,
    alias: 'widget.feedbackControls',
    id: 'feedbackControls',
    layout: 'vbox',
    border: false,
    //    title: 'Create Request',
    width: '100%',
    items: [
    {
        xtype: 'container',
        margin: '0 10 10 10',
        preventBodyReset: true,
        width: '100%',
        html: '<p>Some message about the feedback will go here. Included in the message should be an explanation of the routing and the expected response time.</p>'
        //,
        //style: {
        //    fontFamily: 'Univers 57 condensed',
        //    color: '#000000',
        //    fontSize: '12px'
        //}
    },
    {
        xtype: 'combobox',
        itemId: 'cbxFeedbackType',
        margin: '0 10 10 10',
        fieldLabel: 'Feedback Type',
        displayField: 'name',
        valueField: 'value',
        labelAlign: 'left',
        defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
        matchFieldWidth: false,
        editable: false,
        readonly: true,
        queryMode: 'local'
    },
    {
        xtype: 'combobox',
        itemId: 'cbxImpact',
        margin: '0 10 10 10',
        fieldLabel: 'Impact',
        displayField: 'name',
        valueField: 'value',
        labelAlign: 'left',
        defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
        matchFieldWidth: false,
        editable: false,
        readonly: true,
        queryMode: 'local'
    },
    {
        xtype: 'combobox',
        itemId: 'cbxUrgency',
        margin: '0 10 10 10',
        fieldLabel: 'Urgency',
        displayField: 'name',
        valueField: 'value',
        labelAlign: 'left',
        defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
        matchFieldWidth: false,
        editable: false,
        readonly: true,
        queryMode: 'local'
    },
    {
        xtype: 'textfield',
        itemId: 'txtDescription',
        margin: '0 10 10 10',
        name: 'description',
        emptyText: "Please describe your feedback...",
        allowBlank: false,
        blankText: 'Please provide a description',
        fieldLabel: 'Description',
        width: '100%',
        height: 120,
        labelAlign: 'left'
    },
    { 
        xtype: 'container',
        layout: 'hbox',
        margin: '0 10 10 10',
        items: [
            {
                xtype: 'button',
                margin: '0 5 0 600',
                width: 55,
                identifier: 'btnSaveFeedback',
                itemId: 'btnSaveFeedback',
                text: 'Save'           
            },
            {
                xtype: 'button',
                margin: '0 5 0 10',
                width: 55,
                identifier: 'btnCancelFeedback',
                itemId: 'btnCancelFeedback',
                text: 'Cancel'            
            }
        ]
    }
    ]
});


Ext.define('EMSPEED.feedback.controller.feedbackController', {
    extend:  Ext.app.Controller ,
               
                                         
                                                  
                                                 
                                                      
      
    init: function () {
        this.control({
            '#feedbackBasePanel': { activate: this.feedbackBasePanel_activate },
            '#feedbackControls button[identifier="btnSaveFeedback"]': { click: this.btnSaveFeedback_click },
            '#feedbackControls button[identifier="btnCancelFeedback"]': { click: this.btnCancelFeedback_click }
        });
    },
    feedbackBasePanel_activate: function (panel, e, eOpts) {
        var feedbackControls = Ext.getCmp('feedbackControls');
        
        var cbxFeedbackType = feedbackControls.getComponent('cbxFeedbackType');
        var cbxImpact = feedbackControls.getComponent('cbxImpact');
        var cbxUrgency = feedbackControls.getComponent('cbxUrgency');

        cbxFeedbackType.store = Ext.create('Ext.data.Store', {
            fields: ['value', 'name'],
            data: project.feedbackItems.typeItems
        }),

        cbxImpact.store = Ext.create('Ext.data.Store', {
            fields: ['value', 'name'],
            data: project.feedbackItems.impactItems
        }),

        cbxUrgency.store = Ext.create('Ext.data.Store', {
            fields: ['value', 'name'],
            data: project.feedbackItems.urgencyItems
        })

        cbxFeedbackType.setValue(cbxFeedbackType.store.data.items[0].data.value);
        cbxImpact.setValue(cbxImpact.store.data.items[0].data.value);
        cbxUrgency.setValue(cbxUrgency.store.data.items[0].data.value);

    },
    btnSaveFeedback_click: function (button, e, eOpts) {        
        var feedbackControls = Ext.getCmp('feedbackControls');
        var cbxFeedbackType = feedbackControls.getComponent('cbxFeedbackType');
        var cbxImpact = feedbackControls.getComponent('cbxImpact');
        var cbxUrgency = feedbackControls.getComponent('cbxUrgency');
        var txtDescription = feedbackControls.getComponent('txtDescription');

        if (txtDescription.isValid()) {
            var feedbackBasePanel = Ext.getCmp('feedbackBasePanel');
            feedbackBasePanel.setLoading('Submitting Feedback...');

            var feedbackType = cbxFeedbackType.getValue();
            var impact = cbxImpact.getValue();
            var urgency = cbxUrgency.getValue();
            var description = txtDescription.value;

            var createTicketRequestObject = {};
            createTicketRequestObject.ticketRequest = { "feedbackType": feedbackType, "urgency": urgency, "impact": impact, "description": description };

            Ext.Ajax.request({
                url: feedback.createTicketUrl,
                method: feedback.createTicketMethod,
                withCredentials: com.usesWithCredentials,
                scope: this,
                jsonData: createTicketRequestObject,
                success: function (response, opts) {
                    var response = Ext.decode(response.responseText);

                    if (response.statusCode === 0) {
                        Ext.Msg.alert('Feedback Submitted', 'Your provisioning request has been submitted.', Ext.emptyFn);
                        feedbackBasePanel.setLoading(false);
                        feedbackBasePanel.close();
                    }
                    else {
                        Ext.Msg.alert('Error', 'An error occurred while submitting your feedback.', Ext.emptyFn);
                    }
                    feedbackBasePanel.setLoading(false);
                },
                failure: function (response, opts) {
                    feedbackBasePanel.setLoading(false);
                    feedbackBasePanel.close();
                    com.showError(response, opts);
                }
            });
        }
        else {
            var errMsgDescription = 'Please enter a description';
            Ext.Msg.alert('Validation Error', errMsgDescription, Ext.emptyFn);
        }
    },

    btnCancelFeedback_click: function (button, e, eOpts) {
        var feedbackBasePanel = Ext.getCmp('feedbackBasePanel');
        feedbackBasePanel.close();
    }
});

Ext.define('EMSPEED.editteamsite.view.editteamsite', {
    singleton: true,
    alternateClassName: 'editteamsite',
    constructor: function () {
//        this.imagesFolder = com.appFolder + '/provision' + '/resources/images/';
//        this.siteRoot = 'http://' + location.hostname + ':' + location.port + '/';
//        this.serviceRoot = 'http://' + location.hostname + ':8095/';
//        this.getReportTypesUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/GetReportTypes';
//        this.getReportTypesMethod = 'POST';

        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.editteamsite.view.editteamsiteBasePanel', {
    //extend: 'EMSPEED.baseclass.view.baseclassPanel',
    extend:  Ext.window.Window ,
    alias: 'widget.editteamsiteBasePanel',
    id: 'editteamsiteBasePanel',
    title:'Edit Teamsite URL',
    layout: 'vbox',
    height: 75,
    width: 800,
    border: false,
    closable: false,
    initComponent: function () {
        this.items = [
            { xtype: 'editteamsiteControls' }
        ];
        this.callParent(arguments);
        //this.setTheTitle('Edit Teamsite URL');
    }
});

Ext.define('EMSPEED.editteamsite.view.editteamsiteCommonFieldSet', {
    extend:  Ext.form.FieldSet ,
    alias: 'widget.editteamsiteCommonFieldSet',
    collapsible: false,
    collapsed: false,
    border: true,
    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        borderColor: '#cccccc',
        borderStyle: 'solid'
    },
    margin: '10 10 10 10'
});

Ext.define('EMSPEED.editteamsite.view.editteamsiteControls', {
    extend:  EMSPEED.editteamsite.view.editteamsiteCommonFieldSet ,
    alias: 'widget.editteamsiteControls',
    id: 'editteamsiteControls',
    layout: 'hbox',
    border: false,
    //    title: 'Create Request',
    width: '100%',
    items: [
    {
        xtype: 'textfield',
        itemId: 'txtTeamSiteUrl',
        allowBlank: false,
        vtype: 'url',
        emptyText: 'ex. http://teamspace.slb.com/sites/yoursite',
        fieldLabel: 'Teamsite URL',
        margin: '0 5 0 10',
        width: 550,
        labelAlign: 'left'
    },
            {
                xtype: 'button',
                margin: '0 5 0 10',
                width: 55,
                identifier: 'btnSaveTeamsiteUrl',
                itemId: 'btnSaveTeamsiteUrl',
                text: 'Save'           
            },
            {
                xtype: 'button',
                margin: '0 5 0 10',
                width: 55,
                identifier: 'btnCancelTeamsiteUrl',
                itemId: 'btnCancelTeamsiteUrl',
                text: 'Cancel'            
            }
    ]
});


Ext.define('EMSPEED.editteamsite.controller.editteamsiteController', {
    extend:  Ext.app.Controller ,
               
                                                 
                                                          
                                                         
                                                              
      
    init: function () {
        this.control({
            '#editteamsiteBasePanel': { activate: this.editteamsiteBasePanel_activate },
            '#editteamsiteControls button[identifier="btnSaveTeamsiteUrl"]': { click: this.btnSaveTeamsiteUrl_click },
            '#editteamsiteControls button[identifier="btnCancelTeamsiteUrl"]': { click: this.btnCancelTeamsiteUrl_click }
        });
    },
    editteamsiteBasePanel_activate: function (panel, e, eOpts) {
        var editteamsiteControls = Ext.getCmp('editteamsiteControls');
        var txtTeamSiteUrl = editteamsiteControls.getComponent('txtTeamSiteUrl');
        var teamSite = this.getMenuItem('Team Site');
        if (teamSite != null && teamSite.menuItemUrl != null)
        {
            txtTeamSiteUrl.setValue(teamSite.menuItemUrl);
        }
    },
    btnSaveTeamsiteUrl_click: function (button, e, eOpts) {
        var editteamsiteControls = Ext.getCmp('editteamsiteControls');
        var txtTeamSiteUrl = editteamsiteControls.getComponent('txtTeamSiteUrl');
        var projectId = com.getProjectId();
        if (txtTeamSiteUrl.isValid()) {
            var editteamsiteBasePanel = Ext.getCmp('editteamsiteBasePanel');
            editteamsiteBasePanel.setLoading('Saving Team Site URL...');
            var teamSiteUrl = txtTeamSiteUrl.getValue();

            var editTeamsiteUrlObject = { projectID: projectId, url: teamSiteUrl };

            var store = Ext.create('Ext.data.Store', {
                autoLoad: {
                    params: editTeamsiteUrlObject
                },
                fields: [],
                proxy: {
                    type: 'SoapProxy',
                    service: 'ProjectService',
                    method: 'SetProjectSiteUrl',
                    serviceinterface: 'IProjectService',
                    record: 'SetProjectSiteUrlResponse'
                }
            });
            store.update({
                scope: this,
                callback: function (records, operation, success) {
                    this.updateTeamSiteMenuItem('Team Site', teamSiteUrl);
                    var successMsg = 'The teamsite url was successfully updated for project id ' + projectId + '.';
                    Ext.Msg.alert('Teamsite Url Updated', successMsg, Ext.emptyFn);
                    editteamsiteBasePanel.setLoading(false);
                }
            });
        }
        else {
            var errMsgTeamSiteUrl = 'Please enter a valid Team Site URL';
            Ext.Msg.alert('Validation Error', errMsgTeamSiteUrl, Ext.emptyFn);
        }
    },
    btnCancelTeamsiteUrl_click: function (button, e, eOpts) {
        var editteamsiteBasePanel = Ext.getCmp('editteamsiteBasePanel');
        editteamsiteBasePanel.close();
    },
    getMenuItem: function (menuItemName) {
        if (project.data.isParent) {
            for (var a = 0; a < project.programMenu.length; a++) {
                if (project.programMenu[a].menuItemName === menuItemName)
                {
                    return project.programMenu[a];
                }
            }
        }
        else
        {
            for (var a = 0; a < project.projectMenu.length; a++) {
                if (project.projectMenu[a].menuItemName === menuItemName) {
                    return project.projectMenu[a];
                }
            }
        }
        return null;
    },
    getMenuItemIndex: function (menuItemName) {
        if (project.data.isParent) {
            for (var a = 0; a < project.programMenu.length; a++) {
                if (project.programMenu[a].menuItemName === menuItemName) {
                    return a;
                }
            }
        }
        else {
            for (var a = 0; a < project.projectMenu.length; a++) {
                if (project.projectMenu[a].menuItemName === menuItemName) {
                    return a;
                }
            }
        }
        return -1;
    },
    updateTeamSiteMenuItem: function (menuItemName, teamSiteUrl)
    {
        var projectNavigation = Ext.getCmp('projectNavigation');
        var menuType = "Program Management";
        var index = this.getMenuItemIndex(menuItemName);
        if (index != -1) {
            if (project.data.isParent) {
                project.programMenu[index].menuItemUrl = teamSiteUrl;
            }
            else {
                project.projectMenu[index].menuItemUrl = teamSiteUrl;
                menuType = "Project Management";
            }
        }
        else {
            var teamSiteMenuItem = this.createTeamSiteMenuItem(teamSiteUrl);
            if (project.data.isParent) {             
                project.programMenu.push(teamSiteMenuItem);
            }
            else {
                project.projectMenu.push(teamSiteMenuItem);
                menuType = "Project Management";
            }
        }
        projectNavigation.setTheMenu(menuType);
    },
    createTeamSiteMenuItem: function(teamSiteUrl)
    {
        return { menuItemId: 12, menuItemName: "Team Site", menuItemBasePanel: "", menuItemIcon: "Icon-teamSite", menuItemTooltip: "Team Site", menuItemUrl: teamSiteUrl, sequence: 12, parentId: null, menuItems: null, level: 1, launchFormat: "Default", launch: true };
    }
});

Ext.define('EMSPEED.myprojects.view.myprojects', {
    singleton: true,
    alternateClassName: 'myprojects',

    constructor: function () {
        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.myprojects.view.myprojectsBasePanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.myprojectsBasePanel',
    id: 'myprojectsBasePanel',
               
                                            
      
    layout: 'fit',
    border: 0,

    getParams: function (searchCriteria) {
        var sParams = {
            "filter": {
                "displayType": 1,
                "loadAuditInfo": true,
                "loadBaseAttributes": true,
                "loadLevelInfo": true,
                "loadManagement": true,
                "loadPmtKpis": true,
                "loadPmtRollUpKpis": false,
                "loadUrls": true,
                "searchCriteria": searchCriteria
            }
        };
        return sParams;
    },

    getProjectsStore: function (searchCriteria) {

        var sUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService.svc/json/GetProjects';
        var theData = {};
        $.ajax({
            url: sUrl,
            type: 'POST',
            crossDomain: true,
            data: Ext.encode(this.getParams(searchCriteria)),
            contentType: "application/json; charset=utf-8",
            xhrFields: { withCredentials: true },
            dataType: 'json',
            async: false
        })
        .done(function (data) {
            theData = data;
        })
        .fail(function (data) {
            alert(data.status + '-' + data.statusText);
        });

        var store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            fields: this.fields,
            data: theData
            //proxy: {
            //    type: com.proxy,
            //    root: '',
            //    service: 'ProjectService',
            //    method: 'GetProjects',
            //    jsonData: sParams
            //}
        });

        return store;
    },


    initComponent: function () {

        this.fields = [
            { name: 'projectId', type: 'int', text: 'Project Id', dataIndex: 'projectId', width: 100, menuDisabled: true },
            { name: 'projectName', type: 'string', text: 'Project Name', dataIndex: 'projectName', flex: 1, menuDisabled: true, renderer: this.renderProjectName },
            { name: 'projectManager', type: 'string', text: 'Project Manager', dataIndex: 'projectManager', width: 200, menuDisabled: true },
            { name: 'productChampion', type: 'string', text: 'Product Champion', dataIndex: 'productChampion', width: 200, menuDisabled: true },
            { name: 'lastModifiedBy', type: 'string', text: 'Last Modified By', dataIndex: 'lastModifiedBy', width: 200, menuDisabled: true },
            { name: 'timeSpanFromLastUpdate', type: 'string', text: 'Last Update', dataIndex: 'timeSpanFromLastUpdate', width: 200, menuDisabled: true, hidden: true },
            {
                name: 'lastUpdateDate', type: 'string', text: 'Last Update', dataIndex: 'lastUpdateDate', width: 200, menuDisabled: true, renderer: this.renderLastUpdateDate,
                sortType: function (value) {
                    var theDate = new Date(parseInt(value.replace('/Date(', '')));
                    return theDate;
                }
            }
        ];

        this.dockedItems = [
            {
                xtype: 'container',
                dock: 'top',
                border: false,
                layout: 'hbox',
                height: 65,
                style: {
                    background: '#EDEDED'
                },
                items: [
                    {
                        xtype: 'label',
                        text: 'My Projects',
                        width: 200,
                        //id: 'lblProjectName',
                        style: { margin: '20px 0px 0px 25px', fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '25px' }
                    },
                    {
                        xtype: 'triggerfield',
                        width: 400,
                        labelStyle: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '25px' },
                        fieldLabel: 'Search',
                        labelWidth: 50,
                        xtype: 'searchfield',
                        margin: '25 0 0 0',
                        trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',
                        trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',
                        initComponent: function () {
                            var me = this;
                            me.callParent(arguments);
                            me.on('specialkey', function (f, e) {
                                if (e.getKey() == e.ENTER) {
                                    me.onTrigger2Click();
                                }
                            });
                        },
                        afterRender: function () {
                            var me = this;
                            //me.callParent(arguments);
                            me.triggerCell.item(0).setDisplayed(false);
                        },
                        onTrigger1Click: function () {
                            var me = this;
                            dashboard.startLoading();
                            setTimeout(function () {
                                me.setValue('');
                                me.triggerCell.item(0).setDisplayed(false);
                                me.updateLayout();
                                var thePanel = me.up('panel');
                                var theGrid = thePanel.down('grid');
                                theGrid.bindStore(thePanel.getProjectsStore());
                                dashboard.endLoading();
                            }, 500);
                        },
                        onTrigger2Click: function () {
                            var me = this,
                                value = me.getValue();
                            if (value.length < 4) {
                                alert('Search criteria must contain 4 or more characters');
                            }
                            else {
                                dashboard.startLoading();
                                setTimeout(function () {
                                    me.triggerCell.item(0).setDisplayed(true);
                                    me.updateLayout();
                                    var thePanel = me.up('panel');
                                    var theGrid = thePanel.down('grid');
                                    theGrid.bindStore(thePanel.getProjectsStore(value));
                                    dashboard.endLoading();
                                }, 500);
                            }
                        }
                    },
                    {
                        xtype: 'component',
                        itemId: 'status',
                        width: 150,
                        tpl: 'Matching projects: {count}',
                        margin: '30 0 0 5'
                    },
                    {
                        xtype: 'button',
                        cls: 'myprojects-button',
                        margin: '15px 5px 0px 160px',
                        height: 35, width: 150,
                        id: 'btnprovisionproject',
                        text: 'PROVISION PROJECT',
                        handler: function () {
                            if (this.c === undefined) {
                                this.c = Ext.create('EMSPEED.provision.view.provisionBasePanel', {});
                            }
                            this.c.show();
                        }
                    }
                ]
            }


        ];

        this.items = [
            {
                xtype: 'grid',
                columns: this.fields,
                border: false,
                margin: '0 0 3 0',
                width: '100%',
                height: 535,
                cls: 'myprojects-grid',
                disableSelection: true,
                enableCtxMenu: false,  // turn off header context menu
                enableColLock: false,  // turn off column lock context items
                enableColumnMove: false,  // turn off column reorder drag drop
                enableColumnResize: false,  // turn off column resize for whole grid
                enableRowHeightSync: true
                //listeners: {
                //    afterrender: function () {
                //        alert('afterrender');
                //    }
                //}
            }
        ];
        this.callParent(arguments);
        this.down('grid').bindStore(this.getProjectsStore());
    //    dashboard.endLoading();
    },

    renderProjectName: function (value, p, record) {
        return Ext.String.format(
		    '<b><a style="text-decoration: underline;font-family: Univers 57 condensed " href="/sites/{0}/Portal.aspx" xtarget="_blank">{1}</a></b>',
		    record.data.projectId,
		    record.data.projectName
	    );
    },

    renderLastUpdateDate: function (value, p, record) {
        return record.data.timeSpanFromLastUpdate;
    }
});

Ext.define('EMSPEED.myprojects.view.myprojectsHeaderPanel', {
    extend:  Ext.container.Container ,
    alias: 'widget.myprojectsHeaderPanel',
    config: {
        theStore: null
    },
    style: {
        background: '#EDEDED'
    },
    id: 'myprojectsHeaderPanel',
    border: false,
    layout: 'hbox',
    width: 1150,
    height: 65,

    initComponent: function () {

        //        var filters = {
        //            ftype: 'filters',
        //            encode: false, // json encode the filter query
        //            local: false   // defaults to false (remote filtering)
        //        };

        this.items = [
            {
                xtype: 'label',
                text: 'My Projects',
                width: 200,
                //id: 'lblProjectName',
                style: { margin: '20px 0px 0px 25px', fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '25px' }

            },
            {
                width: 400,
                labelStyle: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '25px' },
                fieldLabel: 'Search',
                labelWidth: 50,
                xtype: 'searchfield',
                margin: '25 0 0 0',
                store: this.theStore
            },
            {
                xtype: 'component',
                itemId: 'status',
                width: 150,
                tpl: 'Matching projects: {count}',
                margin: '30 0 0 5'
            },
        //            { xtype: 'button', margin: '25 5 0 0', id: 'btnmyprojects', text: 'CLEAR' },
            {
            xtype: 'button',
            cls: 'myprojects-button',
            margin: '15px 5px 0px 160px',
            height: 35, width: 150,
            id: 'btnprovisionproject',
            text: 'PROVISION PROJECT',
            handler: function () {
                if (this.c === undefined) {
                    this.c = Ext.create('EMSPEED.provision.view.provisionBasePanel', {  });
                }
                this.c.show();
            }


        }
         ]
        this.callParent(arguments);
    }
});


//                    {
//                        xtype: 'combobox',
//                        fieldLabel: 'FILTER',
//                        //id: 'cbxCDP',
//                        labelAlign: 'left',
//                        margin: '25 10 0 0',
//                        width: 225,
//                        defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
//                        valueField: 'id',
//                        displayField: 'name',
//                        editable: false,
//                        readonly: true,
//                        queryMode: 'local'
//                    },




//                    {
//                        xtype: 'textfield',
//                        //id: 'txtCdpReportTitle',
//                        //fieldLabel: 'Title:',
//                        //labelAlign: 'top',
//                        margin: '25 5 0 0',
//                        width: 200,
//                        name: 'reportTitle'
//                    },
//                    { xtype: 'button', margin: '25 5 0 0', id: 'btnmyprojects', text: 'CLEAR' },
//                    { xtype: 'button', height: 35, width: 150, margin: '15 5 0 260', id: 'btnprovisionproject', text: 'PROVISION PROJECT' }

Ext.define('EMSPEED.myprojects.view.myprojectsProgressBar', {
    //    extend: 'Ext.ProgressBar',
    extend:  Ext.container.Container ,
    alias: 'widget.myprojectsprogressbar',
    layout: 'hbox',
    border: false,
    //height: 200,
    //cls: 'EMSPEED-Transparent' ,

    //config: {
    //    value: 20
    //},

    constructor: function (config) {
        //	debugger;
        //this.initConfig(config);
        this.callParent(arguments);
    },

    initComponent: function () {
        var theValue = parseFloat(this.value) / 100.0;


        this.items = [
            { xtype: 'label', text: this.value + '%', height: 15, width: 30, margin: '0 10 0 0', xcls: 'EMSPEED-Transparent' },
            { xtype: 'progressbar', value: theValue, height: 13, width: 100, border: true, margin: '0 10 0 0', flex: 1, cls: 'EMSPEED-StatusBar meter xred xnostripes' }
        ];
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.myprojects.model.myprojectsModel', {
    extend:  Ext.data.Model ,
    fields: [
        {
            name: 'name',
            mapping: 'topic_title'
        },
        {
            name: 'id',
            mapping: 'post_id'
        },
        {
            name: 'upcomingcdp',
            mapping: 'forum_title'
        },
        {
            name: 'cdpindex',
            mapping: 'forumid'
        },
        {
            name: 'projectmanager',
            mapping: 'author'
        },
        {
            name: 'productchampion',
            mapping: 'author'
        },
        {
            name: 'status',
            mapping: 'forumid'
        },
        {
            name: 'updated',
            mapping: 'post_time',
            type: 'date',
            dateFormat: 'timestamp'
        }
    ],
    idProperty: 'post_id'
});

Ext.define('Ext.ux.form.SearchField', {
    extend:  Ext.form.field.Trigger ,

    alias: 'widget.searchfield',

    trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',

    trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',

    hasSearch : false,
    paramName : 'query',

    initComponent: function() {
        var me = this;

        me.callParent(arguments);
        me.on('specialkey', function(f, e){
            if (e.getKey() == e.ENTER) {
                me.onTrigger2Click();
            }
        });

        // We're going to use filtering
        me.store.remoteFilter = true;

        // Set up the proxy to encode the filter in the simplest way as a name/value pair

        // If the Store has not been *configured* with a filterParam property, then use our filter parameter name
        if (!me.store.proxy.hasOwnProperty('filterParam')) {
            me.store.proxy.filterParam = me.paramName;
        }
        me.store.proxy.encodeFilters = function(filters) {
            return filters[0].value;
        }
    },

    afterRender: function(){
        this.callParent();
        this.triggerCell.item(0).setDisplayed(false);
    },

    onTrigger1Click : function(){
        var me = this;

        if (me.hasSearch) {
            me.setValue('');
            me.store.clearFilter();
            me.hasSearch = false;
            me.triggerCell.item(0).setDisplayed(false);
            me.updateLayout();
        }
    },

    onTrigger2Click : function(){
        var me = this,
            value = me.getValue();

        if (value.length > 0) {
            // Param name is ignored here since we use custom encoding in the proxy.
            // id is used by the Store to replace any previous filter
            me.store.filter({
                id: me.paramName,
                property: me.paramName,
                value: value
            });
            me.hasSearch = true;
            me.triggerCell.item(0).setDisplayed(true);
            me.updateLayout();
        }
    }
});

Ext.define('EMSPEED.myprojects.controller.myprojectsController', {
    extend:  Ext.app.Controller ,
               
                                             
                                                      
                                                        
                                                        
                                                   
                                 
      
    init: function () {
        this.control({
            '#myprojectsBasePanel': { activate: this.myprojectsBasePanel_activate }
        //    '#btnmyprojects': { click: this.btnmyprojects_click }
        });
    },

    myprojectsBasePanel_activate: function (panel, e, eOpts) {

        Ext.getCmp('projectheaderBasePanel').setVisible(false);
        Ext.getCmp('projectNavigation').setVisible(false);
        //Ext.getCmp('menuHider').setVisible(false);
        //Ext.getCmp('tabsBasePanel').setVisible(false);

    }

//    btnmyprojects_click: function (button, e, eOpts) {
//        alert(button.text);
//    }

});

Ext.define('EMSPEED.interactive.view.interactiveBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.interactiveBasePanel',
    id: 'interactiveBasePanel',
    width: '100%',
    margin: '0 0 8 0',
    layout: 'card',
//    activeItem: 0, // index or id

    reportsLoaded: ['PMT'],
    currentProjectId: null,

    showInteractiveReport: function (report, projectId) {
        var me = this;
        me.currentProjectId = me.currentProjectId || project.projectId;
        
        if ($.inArray(report, me.reportsLoaded) == -1) {
            me.reportsLoaded.push(report);
        }

        $("#interactive td").removeClass('interactive-selected');
        $("#interactive td").each(function (el) {
            var $this = $(this);
            if (($this).attr('data-value') == report) {
                $this.addClass('interactive-have-report');
                $this.addClass('interactive-selected');
            }

        });
        
        if (projectId != "") {
            if (projectId != me.currentProjectId) {
                $("#interactive td").each(function (el) {
                    var $this = $(this);
                    if ((($this).attr('data-value') != 'PMT') && (($this).attr('data-value') != report)) {
                        $this.removeClass('interactive-have-report');
                    }

                });
                me.currentProjectId = projectId;
            }
        }
    },
    
    cleanUp:function() {
        $("#interactive td").each(function (el) {
            var $this = $(this);
            if (($this).attr('data-value') != 'PMT') {
                $this.removeClass('interactive-have-report');
                $this.removeClass('interactive-selected');
            }

        });
    },

    initComponent: function () {
        var me = this;
        var reportMasterLayout = Ext.getCmp('reportingInteractiveDetailPanel').masterLayout;
        var baseUrlTemplate = reportMasterLayout.interactiveBaseUrl + "{0}" + reportMasterLayout.interactiveBaseQueryString;
        baseUrlTemplate += "&contextId={1}&rc:LinkTarget=_self";
        
        var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
        var eventer = window[eventMethod];
        var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

        eventer(messageEvent, function (e) {
            var data = Ext.decode(e.data);
            
            var reportUrl = baseUrlTemplate.replace("{0}", data.reportPath).replace("{1}", data.projectId) + data.url;            
            Ext.getCmp('interactiveBasePanel').showInteractiveReport(data.reportType, data.projectId);
            Ext.getCmp('frame' + data.reportType).setSrc(reportUrl); //data.url
            var theActiveItem = Ext.getCmp('interactiveBasePanel').layout.setActiveItem(data.reportType);
            var reportTitle = data.title + " (" + data.projectId + ")";
            Ext.getCmp('interactiveBasePanel').setTheTitle(reportTitle);
            theActiveItem.theTitle = data.title;
        }, false);

        this.url = baseUrlTemplate.replace("{0}", reportMasterLayout.interactivePmtPath).replace("{1}", project.projectId);
        this.defaultReportTitel = "PMT (" + project.projectId + ")";
        var theSrc = this.url; 
        Ext.apply(this, {
            items: [
                {
                    id: 'framePMT',
                    itemId: 'PMT',
                    xtype: 'simpleIframe',
                    src: theSrc
                },
                {
                    id: 'frameRequirements',
                    itemId: 'Requirements',
                    xtype: 'simpleIframe'
                },
                {
                    id: 'framePAE',
                    itemId: 'PAE',
                    xtype: 'simpleIframe'
                },
                {
                    id: 'frameSpecificationByPhysicalArchitecture',
                    itemId: 'SpecificationByPhysicalArchitecture',
                    xtype: 'simpleIframe'
                },
                {
                    id: 'frameRisks',
                    itemId: 'Risks',
                    xtype: 'simpleIframe'
                },
                {
                    id: 'frameTests',
                    itemId: 'Tests',
                    xtype: 'simpleIframe'
                }
            ]
        });

        this.callParent(arguments);

        this.setTheTitle(this.defaultReportTitel);

        this.addDocked(
            {
                xtype: 'toolbar', dock: 'top',
                style: {
                    left: 0,
                    borderWidth: '0px',
                    padding: '0 0 0 0'
                },
                items: [
                    {
                        xtype: 'button',
                        margin: '0 0 10 0',
                        style: {
                            top: 0
                        },
                        id: 'theTBar',
                        text: '&laquo; Back to Interactive Report',
                        listeners : {
                            click: function() {
                                project.interactiveReporting = false;
                                Ext.getCmp('projectApplication').setActivePanel('reportingBasePanel');
                            }
                         }
                    },
                    {
                        xtype: 'button',
                        margin: '0 0 10 10',
                        style: {
                            top: 0
                        },
                        text: 'Reset',
                        listeners: {
                            scope: this, 
                            click: function () {
                                me.cleanUp();
                                Ext.getCmp('interactiveBasePanel').layout.setActiveItem('PMT');
                                Ext.getCmp('interactiveBasePanel').setTheTitle(this.defaultReportTitel);
                                this.items.items[0].setSrc(this.url);
                            }
                        }
                    }
                ]
            }
        );

        this.addDocked(
            {
                xtype: 'dataview',
                id: 'interactiveMenu',
                dock: 'bottom',
                listeners: {
                    scope: this,
                    itemclick: function (dataview, record, item, index, e, eOpts) {
                        var hasReport = $(item).hasClass('interactive-have-report'),
                            isSelected = $(item).hasClass('interactive-selected');
                        if (hasReport && !isSelected) {
                            var theActiveItem = Ext.getCmp('interactiveBasePanel').layout.setActiveItem(record.raw.menuItemId);
                            var reportTitle = record.raw.menuItemId + " (" + me.currentProjectId + ")";
                            Ext.getCmp('interactiveBasePanel').setTheTitle(reportTitle); //theActiveItem.theTitle
                            Ext.getCmp('interactiveBasePanel').showInteractiveReport(record.raw.menuItemId, "");
                        }
                    }
                },

                singleSelect: true,
                //overItemCls: 'x-view-over',
                selectedItemCls: 'theselected',
                itemSelector: 'td.selected',
                emptyText: 'No data available',
                deferInitialRefresh: false,
                store: Ext.create('Ext.data.Store', {
                    fields: ['menuItemName', 'menuItemId', 'state'],
                    data: [
                        { menuItemName: "PMT", menuItemId: "PMT", state: 'interactive-have-report interactive-selected' },
                        { menuItemName: "Requirement", menuItemId: "Requirements", state: '' },
                        { menuItemName: "Specification By PAE", menuItemId: "SpecificationByPhysicalArchitecture", state: '' },
                        { menuItemName: "Risk Register", menuItemId: "RiskRegister", state: '' },
                        { menuItemName: "Specification Risk", menuItemId: "SpecificationRisk", state: '' },
                        { menuItemName: "Corrective Action", menuItemId: "CorrectiveAction", state: '' },
                        { menuItemName: "Specifications", menuItemId: "Specifications", state: '' },
                        { menuItemName: "V & V", menuItemId: "VandV", state: '' },
                        { menuItemName: "PTT", menuItemId: "PTT", state: '' }
                    ]
                }),
                tpl: [
                    '<div class="interactive" id="interactive">',
                        '<table>',
                            '<tr>',
                                '<tpl for=".">',
                                    '<td data-value="{menuItemId}" class="selected {state}"><div class="">{menuItemName}</div></td>',
                                '</tpl>',
                            '</tr>',
                        '</table>',
                    '</div>'
                ]
            }
        );
    }
});

Ext.define('EMSPEED.interactive.controller.interactiveController', {
    extend:  Ext.app.Controller ,
               
                                                       
      

    init: function () {
        this.control({
            //            '#statureBasePanel': { activate: this.statureBasePanel_activate }
        });
    }

});

Ext.define('EMSPEED.pmtview.view.pmtview', {
    singleton: true,
    alternateClassName: 'pmtview',

    constructor: function () {
        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.pmtview.view.pmtviewBasePanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.pmtviewBasePanel',
    id: 'pmtviewBasePanel',
               
                                      
      
    bodyStyle: {
        background: '#ffffff'
    },
    //layout: 'vbox',
    //border: false,
    margin: '0 0 0 0',
    width: 944,
    height: 300,
    initComponent: function () {
        this.items = [
            { xtype: 'label', text: 'pmtview' },
            { xtype: 'button', id: 'btnPmtView', text: 'pmtview' }
        ];
        this.callParent(arguments);
    }
});


Ext.define('EMSPEED.pmtview.controller.pmtviewController', {
    extend:  Ext.app.Controller ,
               
                                           
                                                   
          

    init: function () {
        this.control({
            '#pmtviewBasePanel': { activate: this.pmtviewBasePanel_activate },
            '#btnPmtView': { click: this.btnPmtView_click }
        });
    },

    pmtviewBasePanel_activate: function (panel, e, eOpts) {
    },

    btnPmtView_click: function (button, e, eOpts) {
        alert(button.text);
    }

});

Ext.define('EMSPEED.project.view.project', {
    singleton: true,
    alternateClassName: 'project',

    interactiveReporting: false,

    imagesFolder: com.appFolder + '/project' + '/resources/images/',

    getProjectId: function () {
        var sSitePrefix = "/sites/",
            sSiteUrl = location.href,
            iPrefixStart = sSiteUrl.indexOf(sSitePrefix),
            start = iPrefixStart + sSitePrefix.length,
            projectId = sSiteUrl.substring(start, start + 5);
        return projectId;
    },

    getProjectData: function () {
        var data = {
            "projectId": 97370,
            "projectName": "Ardmore Drilling Site Supply Chain (m)",
            "pddNumber": "97370",
            "level": 3,
            "isChild": true,
            "isParent": false,
            "isParentAccessible": true,
            "parentProjectId": 97368,
            "parentProjectName": "Ardmore Drilling Site Wellhead Maintenance",
            "lastModifiedBy": "jshyu",
            "lastUpdateDate": "/Date(1079416800000-0500)/",
            "timeSpanFromLastUpdate": "9 Years Ago",
            "targetCdpMilestoneId": 3,
            "targetCdpMilestoneName": "Concurrent Team Launch",
            "productGroupId": 2,
            "productGroupCode": "CLG",
            "plannedCommercializationDate": "/Date(994309200000-0500)/",
            "templateVersion": "1.15 (STS: 4.3.2.0)",
            "projectManager": "Sabina Scordamaglia",
            "productChampion": "Jonathan Guidry",
            "productMaturityTrackerWorksheetUrl": "/stature/control/loadSlbStudy?versionId=1000011035&viewName=Requirement&ignoreViewGroup=true",
            "dfxWorksheetUrl": "/stature/control/loadSlbStudy?versionId=1000016002&viewName=DfX&ignoreViewGroup=true",
            "riskRegisterWorksheetUrl": "/stature/control/loadSlbStudy?versionId=1000013001&viewName=RiskRegister&ignoreViewGroup=true",
            "teamSiteUrl": "",
            "requirementsMaturityIndex": null,
            "productMaturityIndex": null,
            "productMaturityIncrementalIndex": null,
            "riskMaturityIndex": null,
            "rollUpProductMaturityIndex": null,
            "rollUpProductMaturityIncrementalIndex": null,
            "rollUpRiskMaturityIndex": null,
            "dfxScore": null,
            "manufacturabilityMfgScore": null,
            "manufacturabilityScScore": null,
            "reliabilityScore": null,
            "maintainabilityScore": null,
            "projects": null
        };
        return data;




        //var data = {};
        //data.projectId = project.projectId;
        //switch (project.projectId) {
        //    case "97366":




        //        data.projectManager = 'pm';
        //        data.productChampion = 'pc';
        //        data.isParentAccessible = true;
        //        data.level = 2;
        //        data.projectName = 'Parent and Child';
        //        data.parentProjectName = 'The Parent';
        //        data.parentProjectId = '11111';
        //        data.timeSpanFromLastUpdate = '5 days ago';
        //        break;
        //    case "97368":
        //        data.projectManager = 'pm';
        //        data.productChampion = 'pc';
        //        data.isParentAccessible = true;
        //        data.level = 1;
        //        data.projectName = 'Parent only';
        //        data.parentProjectName = 'The Parent';
        //        data.parentProjectId = '11111';
        //        data.timeSpanFromLastUpdate = '10 minutes ago';
        //        break;
        //    case "97370":
        //        data.projectManager = 'pm';
        //        data.productChampion = 'pc';
        //        data.isParentAccessible = true;
        //        data.level = 1;
        //        data.projectName = 'Neither Parent or Child';
        //        data.parentProjectName = 'The Parent';
        //        data.parentProjectId = '11111';
        //        data.timeSpanFromLastUpdate = '2 hours ago';
        //        break;
        //    default:
        //        data.projectManager = 'pm';
        //        data.productChampion = 'pc';
        //        data.isParentAccessible = true;
        //        data.level = 1;
        //        data.projectName = 'Project ' + project.projectId;
        //        data.parentProjectName = 'The Parent';
        //        data.parentProjectId = '11111';
        //        data.timeSpanFromLastUpdate = '2 hours ago';
        //}
        //return data;
    },
    getProgramMenu: function () {
        var programMenu = [
            {
                "menuItemId": 1,
                "menuItemName": "Home",
                "menuItemBasePanel": "dashboardBasePanel",
                "menuItemUrl": null,
                "sequence": 1,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-home",
                "menuItemTooltip": "Home",
                "menuItems": null
            },
            {
                "menuItemId": 2,
                "menuItemName": "Reporting",
                "menuItemBasePanel": "reportingBasePanel",
                "menuItemUrl": null,
                "sequence": 2,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-reporting",
                "menuItemTooltip": "Reporting",
                "menuItems": null
            },
            {
                "menuItemId": 4,
                "menuItemName": "Manage Team",
                "menuItemBasePanel": "teamBasePanel",
                "menuItemUrl": null,
                "sequence": 4,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-manageTeam",
                "menuItemTooltip": "Manage Team",
                "menuItems": null
            },
            {
                "menuItemId": 5,
                "menuItemName": "PDD Summary",
                "menuItemBasePanel": "statureBasePanel",
                "menuItemUrl": null,
                "sequence": 5,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-pddSummary",
                "menuItemTooltip": "PDD Summary",
                "menuItems": null
            },
            {
                "menuItemId": 6,
                "menuItemName": "PDD CLMS",
                "menuItemBasePanel": "cdpBasePanel",
                "menuItemUrl": null,
                "sequence": 6,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-pddClms",
                "menuItemTooltip": "PDD CLMS",
                "menuItems": null
            },
            {
                "menuItemId": 7,
                "menuItemName": "PDD Summary",
                "menuItemBasePanel": "pddsummaryBasePanel",
                "menuItemUrl": null,
                "sequence": 7,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-snapshots",
                "menuItemTooltip": "PDD Summary",
                "menuItems": null
            },
            {
                "menuItemId": 8,
                "menuItemName": "Clone PMT",
                "menuItemBasePanel": "cloningBasePanel",
                "menuItemUrl": null,
                "sequence": 8,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-ClonePmt",
                "menuItemTooltip": "Clone PMT",
                "menuItems": null
            },
            {
                "menuItemId": 9,
                "menuItemName": "PMT",
                "menuItemBasePanel": "",
                "menuItemUrl": null,
                "sequence": 9,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": "Icon-pmt",
                "menuItemTooltip": "PMT",
                "menuItems": null
            },
            {
                "menuItemId": 10,
                "menuItemName": "DfX",
                "menuItemBasePanel": "",
                "menuItemUrl": null,
                "sequence": 10,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": "Icon-dfx",
                "menuItemTooltip": "DfX",
                "menuItems": null
            },
            {
                "menuItemId": 11,
                "menuItemName": "Team Site",
                "menuItemBasePanel": "",
                "menuItemUrl": null,
                "sequence": 11,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": "Icon-teamSite",
                "menuItemTooltip": "Team Site",
                "menuItems": null
            }
        ];
        return programMenu;
    },
    getProjectMenu: function () {
        var projectMenu = [
            {
                "menuItemId": 1,
                "menuItemName": "Home",
                "menuItemBasePanel": "dashboardBasePanel",
                "menuItemUrl": null,
                "sequence": 1,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-home",
                "menuItemTooltip": "Home",
                "menuItems": null
            },
            {
                "menuItemId": 2,
                "menuItemName": "Reporting",
                "menuItemBasePanel": "reportingBasePanel",
                "menuItemUrl": null,
                "sequence": 2,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-reporting",
                "menuItemTooltip": "Reporting",
                "menuItems": null
            },
            {
                "menuItemId": 4,
                "menuItemName": "Manage Team",
                "menuItemBasePanel": "teamBasePanel",
                "menuItemUrl": null,
                "sequence": 4,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-manageTeam",
                "menuItemTooltip": "Manage Team",
                "menuItems": null
            },
            {
                "menuItemId": 5,
                "menuItemName": "PDD Summary",
                "menuItemBasePanel": "statureBasePanel",
                "menuItemUrl": null,
                "sequence": 5,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-pddSummary",
                "menuItemTooltip": "PDD Summary",
                "menuItems": null
            },
            {
                "menuItemId": 6,
                "menuItemName": "PDD CLMS",
                "menuItemBasePanel": "cdpBasePanel",
                "menuItemUrl": null,
                "sequence": 6,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-pddClms",
                "menuItemTooltip": "PDD CLMS",
                "menuItems": null
            },
            {
                "menuItemId": 7,
                "menuItemName": "Snapshots",
                "menuItemBasePanel": "snapshotsBasePanel",
                "menuItemUrl": null,
                "sequence": 7,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-snapshots",
                "menuItemTooltip": "Snapshots",
                "menuItems": null
            },
            {
                "menuItemId": 8,
                "menuItemName": "Clone PMT",
                "menuItemBasePanel": "cloningBasePanel",
                "menuItemUrl": null,
                "sequence": 8,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": "Icon-ClonePmt",
                "menuItemTooltip": "Clone PMT",
                "menuItems": null
            },
            {
                "menuItemId": 9,
                "menuItemName": "PMT",
                "menuItemBasePanel": "",
                "menuItemUrl": null,
                "sequence": 9,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": "Icon-pmt",
                "menuItemTooltip": "PMT",
                "menuItems": null
            },
            {
                "menuItemId": 10,
                "menuItemName": "DfX",
                "menuItemBasePanel": "",
                "menuItemUrl": null,
                "sequence": 10,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": "Icon-dfx",
                "menuItemTooltip": "DfX",
                "menuItems": null
            },
            {
                "menuItemId": 11,
                "menuItemName": "Team Site",
                "menuItemBasePanel": "",
                "menuItemUrl": null,
                "sequence": 11,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": "Icon-teamSite",
                "menuItemTooltip": "Team Site",
                "menuItems": null
            }
        ];
        return projectMenu;
    },
    getLast5Projects: function () {
        var last5Projects = [
            {
                "menuItemId": 10000,
                "menuItemName": "Ardmore Drilling Site Supply Chain",
                "menuItemBasePanel": "dashboardBasePanel",
                "menuItemUrl": "97370",
                "sequence": 1,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 10001,
                "menuItemName": "Ardmore Drilling Site Wellhead Maintenance",
                "menuItemBasePanel": "dashboardBasePanel",
                "menuItemUrl": "97368",
                "sequence": 2,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            }
        ];
        return last5Projects;
    },
    getGearMenu: function () {
        var gearMenu = [
            {
                "menuItemId": 12,
                "menuItemName": "Feedback",
                "menuItemBasePanel": "",
                "menuItemUrl": "javascript:openFeedBackDialog()",
                "sequence": 1,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 13,
                "menuItemName": "Help",
                "menuItemBasePanel": "",
                "menuItemUrl": "http://teamspace.slb.com/sites/EMSBusinessSystems/EngineeringSustaining/EMSPEED_Revised/EMSPEED%20Support/Wiki%20Pages/Home.aspx",
                "sequence": 2,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 14,
                "menuItemName": "Provision Project",
                "menuItemBasePanel": "provisionBasePanel",
                "menuItemUrl": null,
                "sequence": 3,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 15,
                "menuItemName": "Quick Reference Guide - General",
                "menuItemBasePanel": "",
                "menuItemUrl": "http://teamspace.slb.com/sites/EMSBusinessSystems/EngineeringSustaining/EMSPEED_Revised/EMSPEED%20Support/11%20Support%20Documents/EMSPEED%201.1%20Quick%20Reference%20Guide.pdf",
                "sequence": 4,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 16,
                "menuItemName": "Quick Reference Guide - Reporting",
                "menuItemBasePanel": "",
                "menuItemUrl": "http://teamspace.slb.com/sites/EMSBusinessSystems/EngineeringSustaining/EMSPEED_Revised/EMSPEED%20Support/11%20Support%20Documents/EMSPEED_Reporting_Quick_Reference_Guide.pdf",
                "sequence": 5,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 17,
                "menuItemName": "EMSPEED Role Access",
                "menuItemBasePanel": "",
                "menuItemUrl": "http://teamspace.slb.com/sites/EMSBusinessSystems/EngineeringSustaining/EMSPEED_Revised/EMSPEED%20Support/_layouts/xlviewer.aspx?id=/sites/EMSBusinessSystems/EngineeringSustaining/EMSPEED_Revised/EMSPEED%20Support/11%20Support%20Documents/EMSPEED%20Roles%20Access%20and%20Security%20Matrix.xlsx&Source=http%3A%2F%2Fteamspace%2Eslb%2Ecom%2Fsites%2FEMSBusinessSystems%2FEngineeringSustaining%2FEMSPEED_Revised%2FEMSPEED%2520Support%2F11%2520Support%2520Documents%2FForms%2FAllItems%2Easpx&DefaultItemOpen=1",
                "sequence": 6,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 18,
                "menuItemName": "FAQs",
                "menuItemBasePanel": "",
                "menuItemUrl": "http://teamspace.slb.com/sites/EMSBusinessSystems/EngineeringSustaining/EMSPEED_Revised/EMSPEED%20Support/Frequently%20Asked%20Questions/Forms/AllPages.aspx",
                "sequence": 7,
                "parentId": null,
                "level": 1,
                "launch": true,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            },
            {
                "menuItemId": 19,
                "menuItemName": "Edit Team Site",
                "menuItemBasePanel": "editteamSiteBasePanel",
                "menuItemUrl": null,
                "sequence": 8,
                "parentId": null,
                "level": 1,
                "launch": false,
                "menuItemIcon": null,
                "menuItemTooltip": null,
                "menuItems": null
            }
        ];
        return gearMenu;
    },
    getProjectDashboard: function () {
        var projectDashboard = [
	        {
	            xtype: 'portalpanel',
	            items: [
                    {
                        xtype: 'portalcolumn', columnWidth: 0.67,
                        items: [
                            { xtype: 'dashboardPortletKPI', collapsed: false, theConfig: { StartDate: null, EndDate: null, MarkerConfigSize: 4, YAxis: { unit: '1', step: 'month' } } }
                        ]
                    },
                    {
                        xtype: 'portalcolumn', columnWidth: 0.33,
                        items: [
                            { xtype: 'dashboardPortletDfX', theConfig: { title: 'DfX' } }
                        ]
                    }
	            ]
	        },
            {
                xtype: 'portalpanel',
                items: [
                    {
                        xtype: 'portalcolumn', columnWidth: 1,
                        items: [
                            { xtype: 'dashboardPortletRiskMatrix', theConfig: { title: 'Risks' } },
                            { xtype: 'dashboardPortletPMT', theConfig: { title: 'PMT' } }
                        ]
                    }
                ]
            }
        ];
        return projectDashboard;
    },
    getProgramDashboard: function () {
        var programDashboard = [
	        {
	            xtype: 'portalpanel',
	            items: [
                    {
                        xtype: 'portalcolumn', columnWidth: 1,
                        items: [
		                    { xtype: 'dashboardPortletRiskMatrix', theConfig: { title: 'Risks' } },
                            { xtype: 'dashboardPortletSubProjects', theConfig: { title: 'Sub Projects', Show: true, collapsed: true } }
                        ]
                    }
	            ]
	        }
        ];
        return programDashboard;
    }

});

//var isExpaned = true;

Ext.define('COMMON.MenuHider', {
    extend:  Ext.toolbar.Toolbar ,
    //extend: 'Ext.container.Container',
    alias: 'widget.menuhider',
    padding: '8px 0 0 0', //'8px 0px 8px 4px'
    margin: '0px 0px 0px 0px',
    id: 'menuHider',
    dock: 'left',
    style: { zIndex: '0' },


    border: false,
    menuHidder: true,
    
    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },
    initComponent: function () {
        Ext.apply(this, {
            //dockedItems: []
        });
        this.callParent(arguments);
    },

    items: [

        
        {
            xtype: 'image',
            cls: 'emspeed-menu-show-hide',
            width: 13,
            height: 18,
            src: com.appFolder + '/project' + '/resources/images/menu_collapsed.png',
            
            listeners: {
                afterrender: function (c) {
                    c.el.on('click', function (a, b, x, d) {
                        var theToolbar = Ext.getCmp('menuHider'); 
                        var theMenu = Ext.getCmp(theToolbar.menuToHide);
                        
                        if (theToolbar.menuHidder) {
                            $('#emspeed-menu li .emspeed-menu-link').hide();
                            theMenu.setWidth(50);
                            c.setSrc(com.appFolder + '/project' + '/resources/images/menu_expanded.png');
                            theToolbar.menuHidder = false;
                        } else {
                            $('#emspeed-menu li .emspeed-menu-link').show();
                            theMenu.setWidth(147);
                            c.setSrc(com.appFolder + '/project' + '/resources/images/menu_collapsed.png');
                            theToolbar.menuHidder = true;
                        }

                    });

                    /*c.el.on('mouseover', function (a, b, x, d) {
                        var theToolbar = Ext.getCmp('menuHider');
                        if (theToolbar.menuHidder) {
                            c.setSrc(com.appFolder + '/project' + '/resources/images/menu_collapsed_over.png');
                        } else {
                            c.setSrc(com.appFolder + '/project' + '/resources/images/menu_expaned_over.png');
                        }

                    });
                    
                    c.el.on('mouseout', function (a, b, x, d) {
                        var theToolbar = Ext.getCmp('menuHider');
                        if (theToolbar.menuHidder) {
                            c.setSrc(com.appFolder + '/project' + '/resources/images/menu_collapsed.png');
                        } else {
                            c.setSrc(com.appFolder + '/project' + '/resources/images/menu_expaned.png');
                        }
                    });*/
                }
            }
        }
        
    
    ]
});

Ext.define('EMSPEED.project.view.projectApplication', {
    extend:  EMSPEED.baseclass.view.baseclassApplication ,
    alias: 'widget.projectApplication',
    id: 'projectApplication',
    padding: '0px 0px 0px 0px ', // the border around the client area

               
                          
      
    listeners: {
        afterrender: function (me, eOpts) {
            //ko.applyBindings(project);
        }
    },
    constructor: function (config) {
        this.initConfig(config);
        var me = this;
        project.projectId = project.getProjectId();

        $.support.cors = true;

        if (com.proxy === 'memoryProxy') {
            me.loadTestData();
        }
        else {
            var userInterfaceUrl = 'http://' + location.hostname + ':8095/' + 'UserInterfaceService.svc/json/GetMasterLayout';
            var getMasterLayoutParams = { "contextId": parseFloat(project.projectId) };
            $.ajax({
                url: userInterfaceUrl,
                type: 'POST',
                crossDomain: true,
                data: Ext.encode(getMasterLayoutParams),
                contentType: "application/json; charset=utf-8",
                xhrFields: { withCredentials: true },
                dataType: 'json',
                async: false
            })
                .done(function(data) {
                    project.data = data.project;
                    project.programMenu = data.masterMenu.menus[0].menuItems;
                    project.projectMenu = data.masterMenu.menus[0].menuItems;
                    project.last5Projects = data.masterMenu.menus[1].menuItems;
                    project.gearMenu = data.masterMenu.menus[2].menuItems;
                    project.feedbackItems = data.feedbackItems;
                    project.projectDashboard = project.getProjectDashboard();
                    project.programDashboard = project.getProgramDashboard();
                    project.user = data.user;
                })
                .fail(function(data) {
                    throw data.status + '-' + data.statusText + '-' + userInterfaceUrl;
                });
            //.always(function (data) {
            //    alert('always');
            //})
            //.then(function (data) {
            //    alert('then');
            //})
        }

        Ext.getCmp('contextcontrollerBasePanel').setContextData();

        return this.callParent(arguments);
    },

    initComponent: function () {
        Ext.apply(this, {
            items: [
                { xtype: 'dashboardBasePanel' },
                { xtype: 'reportingBasePanel' },
                { xtype: 'manageteamBasePanel' },
                { xtype: 'viewteamBasePanel' },
                { xtype: 'pddsummaryBasePanel' },
                { xtype: 'cdpBasePanel' },
                { xtype: 'loadsnapshotBasePanel' },
                { xtype: 'createsnapshotBasePanel' },
                { xtype: 'clonepmtBasePanel' }
            ], 

            dockedItems: [
                { xtype: 'projectheaderBasePanel' },
                { xtype: 'projectNavigation' },
                { xtype: 'dashboardProperties', id: 'dashboardProperties', dock: 'right', hidden: true }
            ]
        });
        this.callParent(arguments);
    },

    loadTestData: function () {
        project.data = project.getProjectData();
        project.programMenu = project.getProgramMenu();
        project.projectMenu = project.getProjectMenu();
        project.last5Projects = project.getLast5Projects();
        project.gearMenu = project.getGearMenu();
        project.projectDashboard = project.getProjectDashboard();
        project.programDashboard = project.getProgramDashboard();
    }
});

Ext.define('EMSPEED.project.view.projectNavigation', {
    //extend: 'Ext.toolbar.Toolbar',
    extend:  Ext.view.View ,
    alias: 'widget.projectNavigation',
    id: 'projectNavigation',
    border: false,
    dock: 'left',
    padding: '0px 0px 0px 0px ',
    margin: '0px 0px 0px 0px',
    layout: 'fit',
    style: {backgroundColor: '#ededed' },
    width: 147,

    isMenuExpanded: true,

    listeners: {
        itemclick: function (dataview, record, item, index, e, eOpts) {
            //debugger;
            //dataview.store.data.items[0].className = 'liclass';
            //item.className = 'liclass emspeed-item-over';

            //jquery way
            var $elm = $('#emspeed-menu .emspeed-item-over');
                            
            //Ext way (not working)
            //var $elm = Ext.query('#emspeed-menu .emspeed-item-over');

            //if (com.currentTab == 'Program Management' && record.data.id == 'reporting') {
            if (record.raw.launch === true) {
                debugger;
                //Ext.getCmp('viewMenu').getSelectionModel().select(0);
                //if (record.raw.menuItemName === 'PMT' || record.raw.menuItemName === 'DfX') {
                if (record.raw.launchFormat === 'Stature') {
                    window.open('LoadingPage.aspx?l=http://' + location.hostname + record.raw.menuItemUrl, '_blank', 'titlebar=no,menubar=no,status=no,location=no');
                }
                else {
                    window.open(record.raw.menuItemUrl, '_blank', 'titlebar=no,menubar=no,status=no,location=no');
                }
            }
            else {
                $($elm).removeClass('emspeed-item-over');
                item.className = 'liclass emspeed-item-over';

                document.title = "EMSPEED - " + record.data.menuItemName;

                if (record.data.menuItemBasePanel === 'reportingBasePanel' && project.interactiveReporting === true) {
                    debugger;
                    Ext.getCmp('projectApplication').setActivePanel('interactiveBasePanel');
                }
                else {


                    var theItems = Ext.getCmp('projectApplication').items.items;
                    var found = false;
                    for (var i = 0; i < theItems.length; i++) {
                        if (record.data.menuItemBasePanel === theItems[i].xtype) {
                            found = true;
                        }
                    }
                    if (found === false) {
                        Ext.getCmp('projectApplication').add({ xtype: record.data.menuItemBasePanel });
                    }

                    if (record.data.menuItemBasePanel === 'loadsnapshotBasePanel') {
                        Ext.getCmp('loadsnapshotBasePanel').items.items[0].reload();
                    }

                    Ext.getCmp('projectApplication').setActivePanel(record.data.menuItemBasePanel);
                }
            }
        }
    },
    singleSelect: true,
    //overItemCls: 'x-view-over',
    //selectedItemCls: 'emspeed-item-over',
    itemSelector: 'li.liclass',
    emptyText: 'No data available',
    deferInitialRefresh: false,
    tpl: [
        '<div class="emspeed-menu-container">',
        '<span class="emspeed-show-hide-menu icon-collapsed" id="emspeed-show-hide-menu"></span>',
        '<ul class="emspeed-menu" id="emspeed-menu">',
        '<tpl for=".">',
            '<li id="menu{menuItemBasePanel}"  class="liclass  ',
                '<tpl if="menuItemBasePanel==' + "'dashboardBasePanel'" + '">emspeed-item-over</tpl>',
                '<tpl if="launch==' + "true" + '">emspeed-menu-item-external</tpl>">',
                '<tpl if="launch==' + 'true' + '">',
                    '<div class="emspeed-menu-icon emspeed-tooltip" data-tooltip="{menuItemName}"><img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/EMSPortal/app/project/resources/images/button_exe_on.png" alt="" title="" /></div>',
                '<tpl else>',
                    '<div class="emspeed-menu-icon emspeed-tooltip" data-tooltip="{menuItemName}"><img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/images/EMSPortal/{menuItemIcon}.png" alt="" title="" /></div>',
                '</tpl>',

            '<div class="emspeed-menu-link"><span>{menuItemName}</span></div><br class="clearfix" /></li>',

        '</tpl>',
        '</ul>',
        '</div>'
    ],






    setTheMenu: function (to) {
        com.currentTab = to;
        var theData = [];
        if (to === 'Program Management') {
            theData = project.programMenu;
        }
        else {
            theData = project.projectMenu;
        };
        var store = Ext.create('Ext.data.Store', {
            fields: ['menuItemBasePanel', 'menuItemName', 'launch', 'menuItemBaseUrl', 'menuItemIcon'],
            data: theData
        });
        //Ext.getCmp('projectNavigation').bindStore(store);
        this.bindStore(store);
        //Ext.getCmp('viewMenuTemp').bindStore(store);
    },

    initComponent: function () {
//        Ext.apply(this, {
//            items: [
//                {
//                    xtype: 'dataview',
//                    id: 'viewMenu',
//                    listeners: {
//                        itemclick: function (dataview, record, item, index, e, eOpts) {
//                            //debugger;
//                            //dataview.store.data.items[0].className = 'liclass';
//                            //item.className = 'liclass emspeed-item-over';

//                            //jquery way
//                            var $elm = $('#emspeed-menu .emspeed-item-over');
//                            
//                            //Ext way (not working)
//                            //var $elm = Ext.query('#emspeed-menu .emspeed-item-over');

//                            //if (com.currentTab == 'Program Management' && record.data.id == 'reporting') {
//                            if (record.raw.launch === true) {
//                                Ext.getCmp('viewMenu').getSelectionModel().select(0);
//                                window.open(record.raw.menuItemUrl, '_blank', 'titlebar=no,menubar=no,status=no,location=no');
//                            }
//                            else {
//                                $($elm).removeClass('emspeed-item-over');
//                                item.className = 'liclass emspeed-item-over';

//                                document.title = "EMSPEED - " + record.data.menuItemName;


//                                var theItems = Ext.getCmp('projectApplication').items.items;
//                                var found = false;
//                                for (var i = 0; i < theItems.length; i++) {
//                                    //if (record.data.id + 'BasePanel' === theItems[i].xtype) {
//                                    if (record.data.menuItemBasePanel === theItems[i].xtype) {
//                                        found = true;
//                                    }
//                                }
//                                if (found === false) {
//                                    //alert('new ' + record.data.id + 'BasePanel');
//                                    Ext.getCmp('projectApplication').add({ xtype: record.data.menuItemBasePanel });
//                                }

//                                //console.log(Ext.getCmp('projectApplication').items.items[0].xtype);



//                                Ext.getCmp('projectApplication').setActivePanel(record.data.menuItemBasePanel);
//                            }
//                        }
//                    },
//                    singleSelect: true,
//                    //overItemCls: 'x-view-over',
//                    //selectedItemCls: 'emspeed-item-over',
//                    itemSelector: 'li.liclass',
//                    emptyText: 'No data available',
//                    deferInitialRefresh: false,
//                    tpl: [
//                        '<ul class="emspeed-menu" id="emspeed-menu">',
//                        '<tpl for=".">',
//                            '<li class="liclass ',
//                                '<tpl if="menuItemBasePanel==' + "'dashboardBasePanel'" + '">emspeed-item-over</tpl>',
//                                '<tpl if="launch==' + "true" + '">emspeed-menu-item-external</tpl>">',
//                            '<tpl if="launch==' + 'true' + '">',
//                            '<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/EMSPortal/app/project/resources/images/button_exe_on.png" alt="" title="" />',
//                            '<tpl else>',
//                            '<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/EMSPortal/app/project/resources/images/button_exe_on_blue_square.png" alt="" title="" />',
//                            '</tpl>',
//                            '<span>{menuItemName}</span></li>',

//                        '</tpl>',
//                        '</ul>'
//                    ]
//                }
//            ]
//        });
        this.callParent(arguments);

        if (project.hasChildren === true) {
            this.setTheMenu("Program Management");
        }
        else {
            this.setTheMenu("Project Management");
        }

        //Ext.getCmp('viewMenu').getSelectionModel().select(0);
    }
});


/*tpl: [
        '<ul class="emspeed-menu" id="emspeed-menu">',
        '<tpl for=".">',
            '<li class="liclass ',
                '<tpl if="menuItemBasePanel==' + "'dashboardBasePanel'" + '">emspeed-item-over</tpl>',
                '<tpl if="launch==' + "true" + '">emspeed-menu-item-external</tpl>">',
            '<tpl if="launch==' + 'true' + '">',
            '<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/EMSPortal/app/project/resources/images/button_exe_on.png" alt="" title="" />',
            '<tpl else>',
            '<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/images/EMSPortal/{menuItemIcon}.png" alt="" title="" />',
            '</tpl>',
            '<span>{menuItemName}</span></li>',

        '</tpl>',
        '</ul>'
],*/

/*
'<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/images/EMSPortal/{menuItemIcon}.png" alt="" title="" />',
*/


/*tpl: [
        '<ul class="emspeed-menu" id="emspeed-menu">',
        '<tpl for=".">',
            '<li class="liclass ',
                '<tpl if="menuItemBasePanel==' + "'dashboardBasePanel'" + '">emspeed-item-over</tpl>',
                '<tpl if="launch==' + "true" + '">emspeed-menu-item-external</tpl>"><div class="emspeed-mneu-icon">x</div>',
                '<tpl if="launch==' + 'true' + '">',
                    '<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/EMSPortal/app/project/resources/images/button_exe_on.png" alt="" title="" />',
                '<tpl else>',
                    '<img style="margin:0px 5px 0px 0px" border="0" src="/_layouts/images/EMSPortal/{menuItemIcon}.png" alt="" title="" />',
                '</tpl>',

            '<span>{menuItemName}</span></li>',

        '</tpl>',
        '</ul>'
    ],*/

$(function() {
    $(document).on("click", "#emspeed-show-hide-menu", function() {
        var $this = $(this);
        var theToolbar = Ext.getCmp('projectNavigation');
        var theMenu = Ext.getCmp(theToolbar.menuToHide);

        if (theToolbar.isMenuExpanded) {
            $('#emspeed-menu').css({ width: '35px' });
            $('#emspeed-menu li .emspeed-menu-link').hide();
            theToolbar.setWidth(34);
           
            theToolbar.isMenuExpanded = false;

            $this.removeClass('icon-collapsed');
            $this.addClass('icon-expanded');

        } else {
            $('#emspeed-menu li .emspeed-menu-link').show();
            $('#emspeed-menu').css({ width: '148px' });
            theToolbar.isMenuExpanded = true;
            theToolbar.setWidth(147);
            
            $this.removeClass('icon-expanded');
            $this.addClass('icon-collapsed');
        }

    });
});

Ext.define('EMSPEED.project.controller.projectController', {
    extend:  Ext.app.Controller ,
               
                                       
                                               
                                                  
                                                
                                                          
      

    init: function () {
        this.control({
 //           '#snapshotsMainPanel': { activate: this.snapshotsMainPanel_activate }
        });
    }

//    snapshotsMainPanel_activate: function (panel, e, eOpts) {
//        Ext.util.Cookies.set('projectId', '12345');
//    }

});

Ext.define('EMSPEED.projectheader.view.projectheader', {
    singleton: true,
    alternateClassName: 'projectheader',

    constructor: function () {
        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.projectheader.view.projectheaderBasePanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.projectheaderBasePanel',
    id: 'projectheaderBasePanel',
               
                                                  
      
    bodyStyle: {
        background: '#EDEDED'
    },
    border: false,
    margin: '0 0 0 0',


    reload: function () {
        dashboard.startLoading();
        var me = this;
        setTimeout(function () {
            me.getData();
            dashboard.reloadPortlets();
        }, 50);
    },

    initComponent: function () {
        dashboard.startLoading();
        this.items = [
            {
                xtype: 'container',
                margin: '10 10 10 10',
                tpl: [
                    '<div class="project-header">',
                    '<tpl if="level &gt; 1">',
                        '<div class="row">',
                            '<tpl if="isParentAccessible==true">',
                                '<div class="parent-project"><p><a href="/sites/{parentProjectId}/Portal.aspx"><span class="pdd-id">{parentProjectId} &ndash; </span> {parentProjectName}</a></p></div>',
                            '<tpl else>',
                                '<div class="parent-project"><p><span class="pdd-id">{parentProjectId} &ndash; </span> {parentProjectName}</p></div>',
                            '</tpl>',
                        '</div>',
                    '</tpl>',
                    '<div class="row">',
                        '<div class="project-title <tpl if="level &gt; 1">has-parent</tpl>"><h2><span>{projectId} &ndash; </span> {projectName} <span class="product-group">{productGroupCode}</span></h2></div>',
                        '<div class="project-last-update"><span class="label">Updated:</span> <span class="value">{timeSpanFromLastUpdate}</span> </div>',
                    '</div>',
                    '<div class="row">',
                        '<div class="pm-pc">',
                            '<span class="label">Project Manager:</span> <span class="value">{projectManager}</span>',
                            '<span class="spacer">&nbsp;</span>',
                            '<span class="label">Product Champion:</span> <span class="value">{productChampion}</span>',
                        '</div>',
                    '</div>',
                '</div>'
                ]
            }
            //,{ xtype: 'button', align: 'right', text: 'Reload', scope: this, handler: function () { this.reload();} }
        ];

        this.callParent(arguments);
        this.getData();
    },

    getParams: function () {
        var sParams = {
            "filter": {
                "loadAuditInfo": true,
                "loadBaseAttributes": true,
                "loadDfxKpis": false,
                "loadLevelInfo": false,
                "loadManagement": true,
                "loadPmtKpis": false,
                "loadUrls": false,
                "projectId": parseFloat(project.getProjectId()),
                "rollUpThresholdId": 1,
                "rollUpSubProjectIds": [1]
            }
        };
        return sParams;
    },

    getData: function () {

        //var theData;
        //theData = project.data;
        //this.down('container').update(theData);
        //dashboard.endLoading();

        var me = this;
        var theUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService.svc/json/GetProject';
        var theData = {};
        $.ajax({
            url: theUrl,
            type: 'POST',
            crossDomain: true,
            data: Ext.encode(this.getParams()),
            contentType: "application/json; charset=utf-8",
            xhrFields: { withCredentials: true },
            dataType: 'json',
            async: false
        })
        .done(function (data) {
            project.data = data;
            me.down('container').update(project.data);
            dashboard.endLoading();
        })
        .fail(function (data) {
            throw data.status + '-' + data.statusText + ': ' + theUrl;
        });
    }
});

function reloadPage() {
    Ext.getCmp('projectheaderBasePanel').reload();
    var image = new Image();
    image.src = "/_Layouts/EMSPortal/app/projectheader/resources/images/icon-reload-animated.gif";
    $("#emspeed-reload").attr('src', image.src);
}

/*tpl: [
                    '<div class="project-header">',
                    '<div class="row">',
                        '<div class="project-title"><h2><span class="pdd-id">{projectId} &ndash; </span> {name} <span class="product-group">SLB</span></h2></div>',
                        '<div class="project-last-update"><span class="label">Updated:</span> <span class="value">5 days ago</span></div>',
                        '<div class="emspeed-gear">',
                            '<ul id="gears">',
                                '<li class="gear-icon">',
                                    '<a href="#"><img src="/_layouts/EMSPortal/app/projectheader/resources/images/gear.png" class="emspeed-show-gear-menu" alt="" title="" /></a>',
                                    '<ul class="gears-submenu">',
                                        '<li><a href="#">Help</a></li>',
                                        '<li><a href="#">Feedback</a></li>',
                                        '<li><a href="#">Settings</a></li>',
                                    '</ul>',
                                '</li> ',
                                '<li class="fullscreen-icon">',
                                    '<a href="#"><img src="/_layouts/EMSPortal/app/projectheader/resources/images/maximize_screen.png" /></a>',
                                '</li>',
                            '</ul>',
                        '</div>',
                    '</div>',
                    '<div class="row">',
                        '<div class="pm-pc">',
                            '<span class="label">Project Manager:</span> <span class="value">Sabian Scordamaglia</span>',
                            '<span class="spacer">&nbsp;</span>',
                            '<span class="label">Product Champion:</span> <span class="value">Sabian Scordamaglia</span>',
                        '</div>',
                    '</div>',
                '</div>'
],*/

Ext.define('EMSPEED.projectheader.controller.projectheaderController', {
    extend:  Ext.app.Controller ,
               
                                                   
                                                           
      

    init: function () {
        this.control({
//            '#projectheaderBasePanel':
//                {
//                    activate: this.projectheaderBasePanel_activate,
//                    afterlayout: this.projectheaderBasePanel_afterlayout
//                },
            //            '#btnHelp': { click: this.btnHelp_click },
            '#btnSize': { click: this.btnSize_click }
            //'#btnRefresh': { click: this.btnRefresh_click },
            //'#btnRefresh2': { click: this.btnRefresh2_click }

        });
    },


    btnSize_click: function (button, e, eOpts) {
        if (Ext.util.Cookies.get('header') === '49px') {
            button.up('panel').setHeight(115);
            button.setIconCls('upArrow');
            button.setTooltip('small header');
            Ext.util.Cookies.set('header', '115px');
        }
        else {
            button.up('panel').setHeight(49);
            button.setIconCls('dnArrow');
            button.setTooltip('large header');
            Ext.util.Cookies.set('header', '49px');
        }
    },

    projectheaderBasePanel_activate: function (panel, e, eOpts) {
        //alert('projectheaderBasePanel_activate');
        //Ext.getCmp('lblCdpPercent').setText('75%');
        //Ext.getCmp('pbrCdpPercent').updateProgress(.75, '75%', true);
    }
});

Ext.define('EMSPEED.provision.view.provision', {
    singleton: true,
    alternateClassName: 'provision',
    constructor: function () {
//        this.imagesFolder = com.appFolder + '/provision' + '/resources/images/';
//        this.siteRoot = 'http://' + location.hostname + ':' + location.port + '/';
          this.serviceRoot = 'http://' + location.hostname + ':8095/';
          this.submitProvisioningRequestUrl = this.serviceRoot + 'ProvisioningService.svc/json/SubmitProvisioningRequest';
          this.submitProvisioningRequestMethod = 'POST';

        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.provision.view.provisionBasePanel', {
    //extend: 'EMSPEED.baseclass.view.baseclassPanel',
    extend:  Ext.window.Window ,
    alias: 'widget.provisionBasePanel',
    id: 'provisionBasePanel',
    layout: 'vbox',
    height: 325,
    width: 800,
    border: false,
    title: 'Request Project Provisioning',
    closable: false,
    initComponent: function () {
        this.items = [
            { xtype: 'provisionCreateRequest' }
        ];
        this.callParent(arguments);
        //this.setTheTitle('Request Project Provisioning');
    }
});

Ext.define('EMSPEED.provision.view.provisionCommonFieldSet', {
    extend:  Ext.form.FieldSet ,
    alias: 'widget.provisionCommonFieldSet',
    collapsible: false,
    collapsed: false,
    border: true,
    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        borderColor: '#cccccc',
        borderStyle: 'solid'
    },
    margin: '10 10 10 10'
});

Ext.define('EMSPEED.provision.view.provisionCreateRequest', {
    extend:  EMSPEED.provision.view.provisionCommonFieldSet ,
    alias: 'widget.provisionCreateRequest',
    id: 'provisionCreateRequest',
    layout: 'vbox',
    width: '100%',
    border: false,
    items: [
        {
            xtype: 'container',
            margin: '10 5 0 10',
            preventBodyReset: true,
            width: '100%',
            html: '<p>Please provide the information needed for L2 Support to provision your project in EMSPEED. ' +
                    'A Remedy ticket will be created on your behalf and you will receive notification once the project is ready for you to access in EMSPEED. ' +
                    'Please note the following rules prior to requesting a project:</p>' +
                    '<br/><ol><li>The project must exist in PDD prior to requestion provisioning in EMSPEED.</li><li>You must be the PM of record in PDD in order to request a project.</li><li>The project must be a CLMS project.</li></ol>'
        },
        {
            xtype: 'numberfield',
            name: 'pddid',
            itemId: 'txtPddId',
            identifier: 'txtPddId',
            allowNegative: false,
            allowBlank: false,
            allowDecimals: false,
            emptyText: "10000",
            maxLength: 5,
            minLength: 1,
            fieldLabel: 'PDD ID',
            margin: '10 5 0 10',
            width: '50%',
            labelAlign: 'left'
        },
        {
            xtype: 'textfield',
            name: 'comment',
            itemId: 'txtComment',
            identifier: 'txtComment',
            emptyText: "Please add your comments...",
            fieldLabel: 'Comment',
            margin: '10 5 0 10',
            width: '100%',
            height: 80,
            labelAlign: 'left'
        },

        { 
            xtype: 'container',
            layout: 'hbox',
            margin: '10 0 10 0',
            items: [
                {
                    xtype: 'button',
                    margin: '0 5 0 620',
                    identifier: 'btnSubmitRequest',
                    width: 55,
                    itemId: 'btnSubmitRequest',
                    text: 'Submit'
                },
                {
                    xtype: 'button',
                    margin: '0 5 0 10',
                    identifier: 'btnCancelRequest',
                    width: 55,
                    itemid: 'btnCancelRequest',
                    text: 'Cancel'            
                }
            ]
        }
    ]
});


Ext.define('EMSPEED.provision.controller.provisionController', {
    extend:  Ext.app.Controller ,
               
                                           
                                                    
                                                        
                                                        
      
    init: function () {
        this.control({
            '#provisionBasePanel': { activate: this.provisionBasePanel_activate },
            '#provisionCreateRequest button[identifier="btnSubmitRequest"]': { click: this.btnSubmitRequest_click },
            '#provisionCreateRequest button[identifier="btnCancelRequest"]': { click: this.btnCancelRequest_click }
        });
    },
    provisionBasePanel_activate: function (panel, e, eOpts) {
    },

    btnSubmitRequest_click: function (button, e, eOpts) {
        var provisionBasePanel = Ext.getCmp('provisionBasePanel');
        var provisionCreateRequest = Ext.getCmp('provisionCreateRequest');
        var txtPddId = provisionCreateRequest.getComponent('txtPddId');
        var txtComment = provisionCreateRequest.getComponent('txtComment');
        if (txtPddId.isValid()) {
            provisionBasePanel.setLoading('Submitting Provisioning Request...');


            var pddId = txtPddId.getValue();
            var comments = txtComment.getValue();

            var submitProvisioningRequestObject = { "parentProjectID": null, "paeID": null, "pddID": pddId, "currentUser": null, "comments": comments, "productGroup": null };

            Ext.Ajax.request({
                url: provision.submitProvisioningRequestUrl,
                method: provision.submitProvisioningRequestMethod,
                withCredentials: com.usesWithCredentials,
                scope: this,
                jsonData: submitProvisioningRequestObject,
                success: function (response, opts) {

                    var response = Ext.decode(response.responseText);

                    if (response.statusCode === 0) {
                        Ext.Msg.alert('Provisioning Request Submitted', 'Your provisioning request has been submitted.', Ext.emptyFn);
                        provisionBasePanel.setLoading(false);
                        provisionBasePanel.close();
                    }
                    else {
                        Ext.Msg.alert('Error', 'An error occurred while processing your provisioning request.', Ext.emptyFn);
                        provisionBasePanel.setLoading(false);
                        provisionBasePanel.close();
                    }
                },
                failure: function (response, opts) {
                    com.showError(response, opts);
                    provisionBasePanel.setLoading(false);
                    provisionBasePanel.close();
                }
            });
        }
        else {

            var errMsgPddId = 'Please enter a valid PDD ID';
            Ext.Msg.alert('Validation Error', errMsgPddId, Ext.emptyFn); 
        }
    },

    btnCancelRequest_click: function (button, e, eOpts) {
        provisionBasePanel = Ext.getCmp('provisionBasePanel');
        provisionBasePanel.close();
    }

});

Ext.define('EMSPEED.reporting.model.reportingSectionsModel', {
    extend:  Ext.data.Model ,
    fields: [
            { name: 'enabled', type: 'bool', mapping: 'enabled' },
            { name: 'allowsSnapshot', type: 'bool', mapping: 'allowsSnapshot' },
            { name: 'cdp', type: 'string', mapping: 'cdp', persist: false },
            { name: 'id', type: 'int', mapping: 'id' },
            { name: 'name', type: 'string', mapping: 'name' },
            { name: 'description', type: 'string', mapping: 'description' },
            { name: 'sortWindowWidth', type: 'auto', mapping: 'sortWindowWidth' },
            { name: 'sortWindowHeight', type: 'auto', mapping: 'sortWindowHeight' },
            { name: 'sortRowTitleWidth', type: 'auto', mapping: 'sortRowTitleWidth' },
            { name: 'sortRowValueWidth', type: 'auto', mapping: 'sortRowValueWidth' },

            { name: 'filterWindowWidth', type: 'auto', mapping: 'filterWindowWidth' },
            { name: 'filterWindowHeight', type: 'auto', mapping: 'filterWindowHeight' },
            { name: 'filterRowTitleWidth', type: 'auto', mapping: 'filterRowTitleWidth' },

            { name: 'sectionFiltersAvailable', type: 'auto', mapping: 'sectionFiltersAvailable' },
            { name: 'sectionSortGroupsAvailable', type: 'auto', mapping: 'sectionSortGroupsAvailable' },
            { name: 'sectionFiltersSelected', type: 'auto', mapping: 'sectionFiltersSelected' },
            { name: 'sectionSortGroupsSelected', type: 'auto', mapping: 'sectionSortGroupsSelected' }
    ]
});

Ext.define('EMSPEED.reporting.model.reportingProjectsModel', {
    extend:  Ext.data.Model ,
    fields: [
                 { name: 'projectId', mapping: 'projectId', type: 'int' },
                 { name: 'projectName', mapping: 'projectName', type: 'string' },
                 { name: 'pddNumber', mapping: 'pddNumber', type: 'string' },
                 { name: 'parentProjectId', mapping: 'parentProjectId', type: 'int' },
                 { name: 'parentProjectName', mapping: 'parentProjectName', type: 'string' },
                 { name: 'level', mapping: 'level', type: 'int' },
                 { name: 'isChild', mapping: 'isChild', type: 'boolean' },
                 { name: 'isParent', mapping: 'isParent', type: 'boolean' },
                 { name: 'projectManager', mapping: 'projectManager', type: 'string' },
                 { name: 'productChampion', mapping: 'productChampion', type: 'string' },
                 { name: 'productGroupId', mapping: 'productGroupId', type: 'int' },
                 { name: 'productGroupCode', mapping: 'productGroupCode', type: 'string' },
                 {
                     name: 'leaf',
                     mapping: 'isParent',
                     convert: function (v, rec) {
                         var leaf = !rec.data.isParent;
                         if (rec.data.projectId === 0) {
                             leaf = false
                         }
                         return leaf;
                     }
                 },
                 { name: 'checked', mapping: 'selected', type: 'boolean', defaultValue: false },
                 { name: 'expanded', mapping: 'expanded', type: 'boolean', defaultValue: true, persist: false }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingCommonFieldSet', {
    extend:  Ext.form.FieldSet ,
    alias: 'widget.reportingCommonFieldSet',
    collapsible: true,
    collapsed: false,
    border: true,
    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        //padding: '1px 1px 1px 1px',
//        borderColor: '#99BCE8',
        borderColor: '#cccccc',
        borderStyle: 'solid',
        //borderTop: '1px',
        borderBottom: '1px',
        borderLeft: '1px',
        borderRight: '1px'
    },                   
    margin: '0 0 0 0'
//    layout: {
//        type: 'hbox',
//        defaultMargins: { top: 0, right: 5, bottom: 0, left: 0 },
//        align: 'middle'
//    }

});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetConfigurationActions', {
    // extend: 'EMSPEED.reporting.view.reportingCommonFieldSet',
    extend:  Ext.container.Container ,
    alias: 'widget.reportingCdpFieldsetConfigurationActions',
    margin: '0 0 0 10',
    collapsible: false,
    collapsed: false,
    width: '100%',
    layout: 'vbox',
    initComponent: function () {
        Ext.apply(this, {
            items: [
                {
                    xtype: 'container',
                    layout: 'hbox',
                    margin: '0 0 10 0',
                    items: [
                            {
                                xtype: 'combobox',/// <reference path="../testStatureWebServices/testIndex.js" />

                                fieldLabel: 'CDP',
                                id: 'cbxCDP',
                                labelAlign: 'top',
                                margin: '0 10 0 0',
                                width: 225,
                                defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
                                valueField: 'id',
                                displayField: 'name',
                                editable: false,
                                readonly: true,
                                queryMode: 'local'
                            },  //CDP
                            {
                                xtype: 'textfield',
                                id: 'txtCdpReportTitle',
                                fieldLabel: 'Title:',
                                labelAlign: 'top',
                                margin: '0 5 0 0',
                                width: 390,
                                name: 'reportTitle'
                            }  //Report Title
                    ]
                }, //first row
                {
                    xtype: 'container',
                    layout: 'hbox',
                    margin: '0 0 10 0',
                    items: [
                            {
                                xtype: 'combobox',
                                id: 'cbxConfigurations',
                                fieldLabel: 'Configurations:',
                                labelAlign: 'top',
                                margin: '0 10 0 0',
                                width: 625,
                                defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
                                valueField: 'id',
                                displayField: 'name',
                                //value: 'Default',
                                editable: false,
                                readonly: true,
                                queryMode: 'local'
                            }  //Configurations
                    ]
                }, //second row
                {
                xtype: 'container',
                layout: 'hbox',
                margin: '0 0 10 0',
                items: [

                        {
                            xtype: 'textfield',
                            id: 'txtConfigurationName',
                            fieldLabel: 'Configuration Name:',
                            labelAlign: 'top',
                            margin: '0 10 0 0',
                            width: 375,
                            value: ''
                            //                        fieldStyle: {
                            //                            backgroundColor: 'yellow'
                            //                        },

                            //name: 'reportTitle'
                        }, //Configuration name
                        { xtype: 'button', margin: '20 10 0 0', width: 70, id: 'btnSaveConfiguration', text: 'Save' },
                        { xtype: 'button', margin: '20 10 0 0', width: 70, id: 'btnSaveAsConfiguration', text: 'Save As...' },
                        { xtype: 'button', margin: '20 10 0 0', width: 70, id: 'btnDeleteConfiguration', text: 'Delete' }

                    ]
                },
                {
                    xtype: 'container',
                    layout: 'hbox',
                    margin: '0 0 0 0',
                    items: [
                        {
                            xtype: 'label',
                            id: 'lblError',
                            cls: 'x-form-item',
                            height: 15,
                            //text: 'error',
                            style: {
                                backgroundColor: '#FFFFCC'
                            }
                        } //error
                    ]
                }
            ]
    });
    this.callParent(arguments);
}
});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetGlobalFilters', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingCdpFieldsetGlobalFilters',
    id: 'reportingCdpFieldsetGlobalFilters',
    collapsible: true,
    collapsed: true,
    title: 'Global Filters',
    width: '100%',
    layout: 'vbox',
    margin: '0 0 10 0',
    items: [
        { xtype: 'container', xitemId: 'globalFiltersParentContainer', id: 'globalFiltersParentContainer' }
    ]

});

Ext.define('EMSPEED.reporting.view.reportingProgramProjectTreeGridToolbar', {
    extend:  Ext.toolbar.Toolbar ,
    itemId: 'reportingProgramProjectTreeGridToolbar',
    alias: 'widget.reportingProgramProjectTreeGridToolbar',
    style: {
        left: 0,
        borderColor: '#99bce8'
    },
    dock: 'top',
    items: [
        {
            text: 'All',
            itemId: 'btnProgramProjectAllClear',
            tooltip: 'select or clear all projects',
            width: 65,
            pressed: false,
            enableToggle: true
        },
        '-'
    ]
});

Ext.define('EMSPEED.reporting.view.reportingProgramProjectTreeGrid', {
    extend:  Ext.tree.Panel ,
    alias: 'widget.reportingProgramProjectTreeGrid',
    itemId: 'reportingProgramProjectTreeGrid',
    width: '100%',
    useArrows: true,
    rootVisible: false,
    enableCtxMenu: false,  // turn off header context menu
    enableColLock: false,  // turn off column lock context items
    enableColumnMove: false,  // turn off column reorder drag drop
    enableColumnResize: false,  // turn off column resize for whole grid
    margin: '10 0 10 0',

    dockedItems: [{ xtype: 'reportingProgramProjectTreeGridToolbar' }],
    columns: [
        {
            text: 'Project ID',
            width: 80,
            dataIndex: 'projectId'
        },
        {
            xtype: 'treecolumn',
            text: 'Project Name',
            flex: 1,
            dataIndex: 'projectName',
            sortable: true
        }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingProgramProjects', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingProgramProjects',
    width: '100%',
    layout: 'vbox',
    collapsible: false,
    collapsed: false,
    title: 'Roll Up Filters',
    itemId: 'reportingProgramProjects',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 300
    },
    items: [
        {
            xtype: 'reportingProgramProjectTreeGrid'
        },
        {
            xtype: 'combobox',
            fieldLabel: 'Risk Threshold',
            displayField: 'name',
            valueField: 'id',
            labelAlign: 'top',
            matchFieldWidth: false,
            margin: '5 10 25 0',
            emptyText: 'Select a Filter',
            selectOnFocus: true,
            listConfig: {
                autoHeight: true,
                minWidth: 300,
                maxWidth: 500,
                getInnerTpl: function () {
                    var tpl = '<div class="emspeed-menu-icon emspeed-tooltip"  data-tooltip="Risk between {lowerBoundary} and {upperBoundary}"><img style="margin:0px 5px 5px 0px" border="0" src="/_layouts/EMSPortal/app/reporting/resources/images/{image}.png" alt="" title=""/ align="top"> <span>{name}</span>'
                    return tpl;
                }
            }
        }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetReportSectionsToolbar', {
    extend:  Ext.toolbar.Toolbar ,
    alias: 'widget.reportingCdpFieldsetReportSectionsToolbar',

    style: {
        left: 0,
        borderColor: '#99bce8'
    },
    dock: 'top',
    items: [
        {
            text: 'All',
            id: 'btnReportSectionsAllClear',
            tooltip: 'select or clear all sections',
            width: 60,
            enableToggle: true,
            listeners: {
                scope: this,
                toggle: function (button, pressed, eOpts) {
                    Ext.getCmp('reportingBasePanel').setLoading('Working...');
                    setTimeout(function () {
                        Ext.getCmp('btnReportSectionsShowHide').toggle(false, false);
                        //Ext.getCmp('btnReportSectionsShowHide').setText('hide unselected sections');

                        var store = Ext.getCmp('grdReportSections').getStore();
                        if (pressed) {
                            store.clearFilter(false);
                            button.setText('Clear');
                        }
                        else {
                            button.setText('All');
                        }
                        store.each(function (rec, index, count) {
                            rec.set('enabled', button.pressed);
                        });

                        reporting.setChangedMessage();
                        reporting.drawSummary(Ext.getCmp('grdReportSections').store.data.items);
                        Ext.getCmp('reportingBasePanel').setLoading(false);
                    }, 1000);
                }
            }
        },
        '-',
        {
            text: 'Apply',
            id: 'btnReportSectionsApply',
            tooltip: 'apply CDP recommendations as section selections',
            width: 60,
            listeners: {
                scope: this,
                click: function (button, e, eOpts) {

                    Ext.getCmp('reportingBasePanel').setLoading('Working...');
                    setTimeout(function () {
                        Ext.getCmp('btnReportSectionsShowHide').toggle(false, false);
                        Ext.getCmp('btnReportSectionsAllClear').toggle(false, false);
                        var store = Ext.getCmp('grdReportSections').getStore();
                        store.clearFilter(false);

                        store.each(function (rec, index, count) {
                            if (rec.get('cdp') === 'x') {
                                rec.set('enabled', true);
                            }
                            else {
                                rec.set('enabled', false);
                            }
                        });
                        reporting.setChangedMessage();
                        reporting.drawSummary(Ext.getCmp('grdReportSections').store.data.items);
                        Ext.getCmp('reportingBasePanel').setLoading(false);
                    }, 1000);
                }
            }
        },
        '-',
        {
            text: 'Hide Unselected Sections',
            id: 'btnReportSectionsShowHide',
            tooltip: 'hide or show unselected sections',
            width: 150,
            enableToggle: true,
            listeners: {
                scope: this,
                toggle: function (button, pressed, eOpts) {
                    Ext.getCmp('reportingBasePanel').setLoading('Working...');
                    setTimeout(function () {
                        var store = Ext.getCmp('grdReportSections').getStore();
                        if (pressed) {
                            button.setText('Show All Sections');
                            store.filter("enabled", button.pressed);
                        }
                        else {
                            button.setText('Hide Unselected Sections');
                            store.clearFilter(false);
                        }
                        Ext.getCmp('reportingBasePanel').setLoading(false);
                    }, 1000);
                }
            }
        }
    ]
});

/**
 * @class Ext.ux.CheckColumn
 * @extends Ext.grid.column.Column
 * A Header subclass which renders a checkbox in each column cell which toggles the truthiness of the associated data field on click.
 *
 * Example usage:
 * 
 *    // create the grid
 *    var grid = Ext.create('Ext.grid.Panel', {
 *        ...
 *        columns: [{
 *           text: 'Foo',
 *           ...
 *        },{
 *           xtype: 'checkcolumn',
 *           text: 'Indoor?',
 *           dataIndex: 'indoor',
 *           width: 55
 *        }]
 *        ...
 *    });
 *
 * In addition to toggling a Boolean value within the record data, this
 * class adds or removes a css class <tt>'x-grid-checked'</tt> on the td
 * based on whether or not it is checked to alter the background image used
 * for a column.
 */
Ext.define('EMSPEED.reporting.view.reportingCdpCheckColumn', {
    extend:  Ext.grid.column.Column ,
    alias: 'widget.reportingCdpCheckColumn',

    /**
     * @cfg {Boolean} [stopSelection=true]
     * Prevent grid selection upon mousedown.
     */
    stopSelection: true,

    tdCls: Ext.baseCSSPrefix + 'grid-cell-checkcolumn',

    constructor: function() {
        this.addEvents(
            /**
             * @event beforecheckchange
             * Fires when before checked state of a row changes.
             * The change may be vetoed by returning `false` from a listener.
             * @param {Ext.ux.CheckColumn} this CheckColumn
             * @param {Number} rowIndex The row index
             * @param {Boolean} checked True if the box is to be checked
             */
            'beforecheckchange',
            /**
             * @event checkchange
             * Fires when the checked state of a row changes
             * @param {Ext.ux.CheckColumn} this CheckColumn
             * @param {Number} rowIndex The row index
             * @param {Boolean} checked True if the box is now checked
             */
            'checkchange'
        );
        this.callParent(arguments);
    },

    /**
     * @private
     * Process and refire events routed from the GridView's processEvent method.
     */
    processEvent: function(type, view, cell, recordIndex, cellIndex, e, record, row) {
        var me = this,
            key = type === 'keydown' && e.getKey(),
            mousedown = type == 'mousedown';

        if (mousedown || (key == e.ENTER || key == e.SPACE)) {
            var dataIndex = me.dataIndex,
                checked = !record.get(dataIndex);

            // Allow apps to hook beforecheckchange
            if (me.fireEvent('beforecheckchange', me, recordIndex, checked) !== false) {
                record.set(dataIndex, checked);
                me.fireEvent('checkchange', me, recordIndex, checked);

                // Mousedown on the now nonexistent cell causes the view to blur, so stop it continuing.
                if (mousedown) {
                    e.stopEvent();
                }

                // Selection will not proceed after this because of the DOM update caused by the record modification
                // Invoke the SelectionModel unless configured not to do so
                if (!me.stopSelection) {
                    view.selModel.selectByPosition({
                        row: recordIndex,
                        column: cellIndex
                    });
                }

                // Prevent the view from propagating the event to the selection model - we have done that job.
                return false;
            } else {
                // Prevent the view from propagating the event to the selection model if configured to do so.
                return !me.stopSelection;
            }
        } else {
            return me.callParent(arguments);
        }
    },

    // Note: class names are not placed on the prototype bc renderer scope
    // is not in the header.
    renderer : function(value){
        var cssPrefix = Ext.baseCSSPrefix,
            cls = [cssPrefix + 'grid-checkheader'];

        if (value) {
            cls.push(cssPrefix + 'grid-checkheader-checked');
        }
        //return '<div style="background-color: red" class="' + cls.join(' ') + '">&#160;</div>';
        return '<div class="' + cls.join(' ') + '">&#160;</div>';
    }
});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetReportSectionsSortGroupsColumn', {
    extend:  Ext.grid.column.Action ,
    alias: 'widget.reportingCdpFieldsetReportSectionsSortGroupsColumn',
                                      
    header: 'Sorts',
    dataIndex: 'sectionSortGroupsSelected',
    enableColumnHide: false,
    align: 'center',
    sortable: false,
    menuDisabled: true,
    width: 60,
    icon: '',
    //    items: [
    //                        {
    getClass: function (v, meta, rec) {
        if (rec.get('sectionSortGroupsSelected').length === 0) {
            return 'sort-empty-col';
        } else {
            return 'sort-notempty-col';
        }
    },
    getTip: function (value, metaData, record, rowIndex, colIndex, store) {
        var theSummary = '';
        var theSectionSortGroupsSelected = record.get('sectionSortGroupsSelected');
        for (var a = 0; a < theSectionSortGroupsSelected.length; a++) {
            if (a === 0) {
                theSummary += '<div style=font-size:12px;>Sorts Selected</div>';
            }
            if (theSectionSortGroupsSelected[a].sortGroupFieldsSelected.length > 0) {
                theSummary += '<hr>' + theSectionSortGroupsSelected[a].sortGroupsAvailableName + '<br>';
                for (var b = 0; b < theSectionSortGroupsSelected[a].sortGroupFieldsSelected.length; b++) {
                    theSummary += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + theSectionSortGroupsSelected[a].sortGroupFieldsSelected[b].sortGroupFieldsAvailableName + '';
                    theSummary += ' (' + theSectionSortGroupsSelected[a].sortGroupFieldsSelected[b].arrangementTypeSelectedName + ')<br>';
                }
            }
        }
        if (theSummary === '') {
            //theSummary = 'No sorts defined';
        }
        return theSummary;
    },
    handler: function (grid, rowIndex, colIndex) {
        var record = grid.store.getAt(rowIndex);

        if (record.get('sectionSortGroupsAvailable').length === 0) {
            Ext.Msg.show({
                title: 'No sorts available',
                msg: 'No sorts are available for the ' + record.get('name') + ' section',
                width: 400,
                height: 400,
                closable: false,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            })
            return;
        }

        record.set('enabled', true);
        reporting.setChangedMessage();
        reporting.drawSummary(Ext.getCmp('grdReportSections').store.data.items);

        if (record.get('enabled') === false) {
            Ext.Msg.show({
                title: 'Edit disabled',
                msg: 'You must enable section before editing the sorts',
                width: 400,
                height: 400,
                closable: false,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            })
        }
        else {
            var l = Ext.getCmp('reportingBasePanel').setLoading('Loading sorts window...');
            setTimeout(function () {
                //Ext.suspendLayouts();
                Ext.create("EMSPEED.reporting.view.reportingSorts", { grid: grid, rowIndex: rowIndex }).show();
                //Ext.resumeLayouts(true);
            }, 1000);
        }
    }
    //                        }
    //                    ]


});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetReportSectionsFiltersColumn', {
    extend:  Ext.grid.column.Action ,
    alias: 'widget.reportingCdpFieldsetReportSectionsFiltersColumn',
                                      
    header: 'Filters',
    dataIndex: 'sectionFiltersSelected',
    align: 'center',
    sortable: false,
    menuDisabled: true,
    width: 60,
//    items: [
//        {
            getClass: function (v, meta, rec) {
                if (rec.get('sectionFiltersSelected').length === 0) {
                    return 'filter-empty-col';
                } else {
                    return 'filter-notempty-col';
                }
            },
            getTip: function (value, metaData, record, rowIndex, colIndex, store) {
                var theSummary1 = '';
                var theSectionFiltersSelected = record.get('sectionFiltersSelected');
                for (var b = 0; b < theSectionFiltersSelected.length; b++) {
                    if (b === 0) {
                        theSummary1 += '<div style=font-size:12px;>Filters Selected</div><hr><table border=0 >';
                    }
                    if (theSectionFiltersSelected[b].selected === true) {
                        theSummary1 += '<table border=0 ><tr style=border-bottom:1px; ><td style=padding:3px;>' + theSectionFiltersSelected[b].filtersAvailableName + ':</td>';

                        switch (theSectionFiltersSelected[b].filterTypeId) {
                            case 1: //'Multi-Select List'
                                if (theSectionFiltersSelected[b].multiSelectFilterValuesSelected != null) {
                                    if (theSectionFiltersSelected[b].multiSelectFilterValuesSelected.length > 0) {
                                        theSummary1 += '<td style=padding:1px;>' + theSectionFiltersSelected[b].multiSelectFilterValuesSelected[0].filterValueName + '</td></tr>';
                                        for (var c = 1; c < theSectionFiltersSelected[b].multiSelectFilterValuesSelected.length; c++) {
                                            theSummary1 += '<tr><td></td><td style=padding:1px;>' + theSectionFiltersSelected[b].multiSelectFilterValuesSelected[c].filterValueName + '</td></tr>';
                                        }
                                        theSummary1 += '</table>';
                                    }
                                }
                                break;
                            case 2: //'Single-Select List' 
                                if (theSectionFiltersSelected[b].singleSelectFilterValueSelectedName != null) {
                                    theSummary1 += '<td style=padding:1px;>' + theSectionFiltersSelected[b].singleSelectFilterValueSelectedName;
                                    theSummary1 += '</td></tr></table>';
                                }
                                break;
                            case 3: //'Date'    
                                if (theSectionFiltersSelected[b].lowerValueSelected != null) {
                                    theSummary1 += '<td style=padding:1px;>' + theSectionFiltersSelected[b].prefixText + ' ' + theSectionFiltersSelected[b].lowerValueSelected;
                                    theSummary1 += '</td></tr></table>';
                                }
                                break;
                            case 4: //'Date Range'  
                                if (theSectionFiltersSelected[b].lowerValueSelected != null) {
                                    theSummary1 += '<td style=padding:1px;>' + theSectionFiltersSelected[b].prefixText + ' ' + theSectionFiltersSelected[b].rangeTypeSelectedName + ' ' + theSectionFiltersSelected[b].lowerValueSelected;
                                    if (theSectionFiltersSelected[b].upperValueSelected != null) {
                                        theSummary1 += ' and ' + theSectionFiltersSelected[b].upperValueSelected;
                                    }
                                    theSummary1 += '</td></tr></table>';
                                }
                                break;
                            case 5: //'Numeric'    
                                if (theSectionFiltersSelected[b].lowerValueSelected != null) {
                                    theSummary1 += '<td style=padding:1px;>' + theSectionFiltersSelected[b].prefixText + ' ' + theSectionFiltersSelected[b].lowerValueSelected;
                                    theSummary1 += '</td></tr></table>';
                                }
                                break;
                            case 6: //'Numeric Range' 
                                if (theSectionFiltersSelected[b].lowerValueSelected != null) {
                                    theSummary1 += '<td style=padding:1px;>' + theSectionFiltersSelected[b].prefixText + ' ' + theSectionFiltersSelected[b].rangeTypeSelectedName + ' ' + theSectionFiltersSelected[b].lowerValueSelected;
                                    if (theSectionFiltersSelected[b].upperValueSelected != null) {
                                        theSummary1 += ' and ' + theSectionFiltersSelected[b].upperValueSelected;
                                    }
                                    theSummary1 += '</td></tr></table>';
                                }
                                break;
                            default:
                                break;
                        }

                        if (b + 1 === theSectionFiltersSelected.length) {
                        }
                        else {
                            theSummary1 += '<hr>';
                        }
                    }
                }
                if (theSummary1 === '') {
                    //theSummary1 = 'No filters defined';
                }
                return theSummary1;
            },
            handler: function (grid, rowIndex, colIndex) {
                var record = grid.store.getAt(rowIndex);

                if (record.get('sectionFiltersAvailable').length === 0) {
                    Ext.Msg.show({
                        title: 'No filters available',
                        msg: 'No filters are available for the ' + record.get('name') + ' section',
                        width: 400,
                        height: 400,
                        closable: false,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    })
                    return;
                }

                record.set('enabled', true);
                reporting.setChangedMessage();
                reporting.drawSummary(Ext.getCmp('grdReportSections').store.data.items);

                if (record.get('enabled') === false) {
                    Ext.Msg.show({
                        title: 'Edit disabled',
                        msg: 'You must enable section before editing the filters',
                        width: 400,
                        height: 400,
                        closable: false,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    })
                }
                else {
                    var l = Ext.getCmp('reportingBasePanel').setLoading('Loading filters window...');
                    setTimeout(function () {
                        Ext.create("EMSPEED.reporting.view.reportingFilters", { grid: grid, rowIndex: rowIndex }).show();
                    }, 1000);
                }
            }
//        }
//    ]
});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetReportSections', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingCdpFieldsetReportSections',
    width: '100%',
    layout: 'vbox',
    collapsible: false,
    collapsed: false,
    title: 'Report Sections',
    id: 'reportingCdpFieldsetReportSections',
    itemId: 'reportingCdpFieldsetReportSections',
    margin: '0 0 25 0',
    //height: 900,
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 300
    },
    items: [
        {
            xtype: 'grid',
            id: 'grdReportSections',
            width: '100%',
            disableSelection: true,
            enableCtxMenu: false,  // turn off header context menu
            enableColLock: false,  // turn off column lock context items
            enableColumnMove: false,  // turn off column reorder drag drop
            enableColumnResize: false,  // turn off column resize for whole grid
            enableRowHeightSync: true,
            margin: '10 0 10 0',
            dockedItems: [{ xtype: 'reportingCdpFieldsetReportSectionsToolbar'}],
            columns: [
                {
                    xtype: 'reportingCdpCheckColumn',
                    header: 'Enabled',
                    dataIndex: 'enabled',
                    id: 'cbxEnabled',
                    sortable: false,
                    menuDisabled: true,
                    width: 75
                },
                {
                    xtype: 'actioncolumn',
                    icon: Ext.BLANK_IMAGE_URL,
                    header: 'CDP',
                    align: 'center',
                    sortable: false,
                    menuDisabled: true,
                    width: 75,
                    getClass: function (v, meta, rec) {
                        if (rec.get('cdp') === 'x') {
                            var theTooltip = 'The CDP icon in this column indicates that the ' + rec.get('name') + ' section is recommended for your currently selected CDP';
                            meta.tdAttr = 'data-qtip="' + theTooltip + '"';
                            return 'showCdp';
                        } else {
                            return 'hideCdp';
                        }
                    }
                },
                {
                    header: 'Section Name',
                    dataIndex: 'name',
                    width: 263,
                    sortable: false,
                    menuDisabled: true,
                    renderer: function (value, meta, record) {
                        meta.tdAttr = 'data-qtip="' + record.get('description') + '"';
                        return value;
                    }
                },
                { xtype: 'reportingCdpFieldsetReportSectionsSortGroupsColumn', sortable: false },
                { xtype: 'reportingCdpFieldsetReportSectionsFiltersColumn', sortable: false }
           ]
        }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetCustomConfigurations', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingCdpFieldsetCustomConfigurations',
    width: '100%',
    layout: 'vbox',
    collapsible: false,
    collapsed: false,
    title: 'Custom Configurations',

    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        //padding: '1px 1px 1px 1px',
        //        borderColor: '#99BCE8',
        borderColor: '#cccccc',
        borderStyle: 'solid',
        //borderTop: '1px',
        borderBottom: '1px',
        borderLeft: '1px',
        borderRight: '1px'
    },

    items: [
        { xtype: 'reportingCdpFieldsetConfigurationActions' },
        { xtype: 'reportingCdpFieldsetGlobalFilters', hidden: true },
        { xtype: 'reportingProgramProjects'},
        { xtype: 'reportingCdpFieldsetReportSections' }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingCdpFieldsetGenerateReport', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingCdpFieldsetGenerateReport',
    width: '100%',
    layout: 'vbox',
    margin: '0 0 0 10',
    collapsible: false,
    collapsed: false,
    title: 'Generate Report',
    initComponent: function () {
        Ext.apply(this, {
            items: [
            {
                xtype: 'container',
                layout: 'hbox',
                margin: '0 0 25 0',
                items: [
                        {
                            xtype: 'combobox',
                            id: 'cbxOutputType',
                            fieldLabel: 'Output Type',
                            labelAlign: 'left',
                            margin: '10 10 0 0',
                            labelWidth: 80,
                            width: 200,
                            valueField: 'id',
                            displayField: 'name',
                            editable: false,
                            readonly: true,
                            queryMode: 'local'
                        },  //Output Type
                        {
                            xtype: 'checkbox',
                            id: 'chkZip',
                            labelAlign: 'right',
                            fieldLabel: 'Generate as Zip file',
                            labelWidth: 120,
                            border: false,
                            //align: 'center',
                            inputValue: '1',
                            margin: '10 0 0 0'
                        },
                        {
                            xtype: 'checkbox',
                            id: 'chkCreateSnapshot',
                            labelAlign: 'right',
                            fieldLabel: 'Create Snapshot',
                            labelWidth: 120,
                            border: false,
                            //align: 'center',
                            inputValue: '1',
                            margin: '10 10 0 0'
                        },
                        {
                            xtype: 'button', 
                            id:'btnGenerateReport', 
                            margin: '8 0 0 10', 
                            text: 'Generate Report'
                        }
                    ]
            } //third row
            ]   
        });
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.reporting.view.reportingCdpDetailPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingCdpDetailPanel',
    id: 'reportingCdpDetailPanel',
    layout: 'vbox',
    title: 'Report Details',
    header: false,
    border: false,
    bodyBorder: false,
    bodyPadding: '0 0 0 0',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 290,
        anchor: '100%'
    },
    items: [
        { xtype: 'reportingCdpFieldsetCustomConfigurations' },
        { xtype: 'reportingCdpFieldsetGenerateReport' }
    ],
    //tbar: [
    //    { id: 'btnCdpBack', text: '&laquo; Back to Report Types', margin: '0 0 15 0', style: { left: 0} }
    //]

    dockedItems: [
    {
        xtype: 'toolbar', dock: 'top',
        style: {
            top: 0,
            left: 0,
            borderWidth: '1px',
            padding: '0 0 0 0'
        },
        items: [
            {
                xtype: 'button',
                margin: '0 0 10 0',
                style: {
                    top: 0
                },
                id: 'btnCdpBack',
                text: '&laquo; Back'
            }
        ]
    }
    ]

});

Ext.define('EMSPEED.reporting.view.reportingCdpSummaryPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingCdpSummaryPanel',
    id: 'reportingCdpSummaryPanel',
    itemId: 'reportingCdpSummaryPanel',
    margin: '0 0 0 0',
    border: false,
    bodyBorder: false,
    bodyPadding: '10 10 10 10',
    layout: 'vbox',
    fieldDefaults: {
        labelAlign: 'top'
    },
    bodyStyle: {
        backgroundColor: '#F2F2F2'
    },
    items: [
        { xtype: 'image', id: 'imgCdpType', margin: '0 0 5 0', height: '72px' },
        { xtype: 'label', id: 'lblCdpType', margin: '0 0 5 0' },
        { xtype: 'label', id: 'lblCdpDesc', margin: '0 0 5 0', width: 275 },
        {
            xtype: 'container',
            id: 'lblCdpSummary',
            hidden: true,
            width: 275,
            margin: '20 0 5 0',
            items: [
                { xtype: 'label', text: 'Sections Enabled', margin: '0 0 15 0', style: { fontWeight: 'bold'} },
                { xtype: 'label', id: 'lblCdpSection', margin: '30 0 0 0' }
            ]
        }
    ],
    loadRecord: function (image) {
        Ext.getCmp('lblCdpType').setText(image.data.name);
        Ext.getCmp('imgCdpType').setSrc(reporting.imagesFolder + image.data.iconFile);
        Ext.getCmp('lblCdpDesc').setText(image.data.description);
    }
});


Ext.define('EMSPEED.reporting.view.reportingCommonGenerateConfirm', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingCommonGenerateConfirm',
    id: 'winReport',
    modal: true,
    floating: true,
    frame: true,
    bodyPadding: 10,
    bodyStyle: { background: 'white' },
    style: { background: 'white' },
    //shadow: true,
    width: 400,
    height: 180,
    //margin: '10 10 10 10',
    //minWidth: 1000,
    //minHeight: 700,
    //closeAction: 'hide',
    plain: false,
    border: false,
    closable: false,
    resizable: false,
    layout: 'vbox',
    items: [
//        {
//            //zindex: 10,
//            xtype: 'image',
//            src: 'add.png',
//            x: 880,
//            y: 0
    //        },

        {
            xtype: 'label',
            style: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '16px' },
            width: 370,
            margin: '0 0 10 0',
            text: 'Report Submitted'
        },

        {
            xtype: 'label',
            width: 370,
            margin: '0 0 10 0',
            text: 'Your report generation request has been submitted.  The report will be downloaded to your browser page when it is completed.'
        },
        {
            xtype: 'label',
            width: 370,
            margin: '0 0 10 0',
            text: 'Do not close your browser window until the report has been downloaded, or the report will not be downloaded and you will need to resubmit.'
        },


        {
            xtype: 'button',
            id: 'btnReportConfirmClose',
            width: 100,
            text: 'OK',
            handler: function () {
                Ext.getCmp('winReport').close();
            }
        }
    ]
});

Ext.define('EMSPEED.reporting.controller.reportingCdpController', {
    extend:  Ext.app.Controller ,

               

                                                             
                                                             

                                                             
                                                                        
                                                                              
                                                                              
                                                                       
                                                                        
                                                                               
                                                                                        
                                                                                     
                                                                     
                                                                            
                                                              
                                                              
                                                             
                                                             
                                                                   
      

    init: function () {
        this.control({
            '#reportingCdpDetailPanel': { activate: this.reportingCdpDetailPanel_activate },

            '#cbxCDP': { select: this.cbxCDP_select, change: this.cbxCDP_change },
            '#cbxConfigurations': { select: this.cbxConfigurations_select, beforeselect: this.cbxConfigurations_beforeselect },
            '#cbxOutputType': { select: this.cbxOutputType_select },
            '#cbxRiskThreshold': { select: this.cbxRiskThreshold_select},
            '#btnGenerateReport': { click: this.btnGenerateReport_click },
            '#reportingProgramProjects > reportingProgramProjectTreeGrid': { checkchange: this.reportingProgramProjectTreeGrid_checkchange },
            '#reportingProgramProjects > reportingProgramProjectTreeGrid > reportingProgramProjectTreeGridToolbar > button': { toggle: this.btnCdpProgramProjectAllClear_toggle },

            '#txtConfigurationName': { change: this.txtConfigurationName_change },
            '#btnSaveConfiguration': { click: this.btnSaveConfiguration_click },
            '#btnSaveAsConfiguration': { click: this.btnSaveAsConfiguration_click },
            '#btnDeleteConfiguration': { click: this.btnDeleteConfiguration_click },

            '#cbxEnabled': { checkchange: this.cbxEnabled_checkchange },

            '#btnCdpBack': { click: this.btnCdpBack_click }
        });
    },

    reportingCdpDetailPanel_activate: function (panel, e, eOpts) {
        Ext.getCmp('reportingBasePanel').setLoading('Working...');
        reporting.resetGridToolbar();
        Ext.getCmp('lblCdpSummary').setVisible(true);
        var reportingProgramProjects = Ext.getCmp('reportingCdpDetailPanel').down('reportingProgramProjects');;
        var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
        var cbxRiskThreshold = reportingProgramProjects.down('combobox');
        var cbxCDP = Ext.getCmp('cbxCDP');
        var txtCdpReportTitle = Ext.getCmp('txtCdpReportTitle');

        if (reporting.selectedReportType.data.id === 4) {
            cbxCDP.setVisible(false);
            reportingProgramProjects.setVisible(true);
            txtCdpReportTitle.width = 625;
        }
        else {
            cbxCDP.setVisible(true);
            reportingProgramProjects.setVisible(false);
            txtCdpReportTitle.width = 390;
        }

        var getMasterLayoutParms = { "reportTypeId": reporting.selectedReportType.data.id, "contextId": com.getProjectId() };
        Ext.Ajax.request({
            url: reporting.getMasterLayoutUrl,
            method: reporting.getMasterLayoutMethod,
            withCredentials: com.usesWithCredentials,
            scope: this,
            jsonData: getMasterLayoutParms,
            success: function (response, opts) {
                var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
                var cbxConfigurations = Ext.getCmp('cbxConfigurations');
                var cbxOutputType = Ext.getCmp('cbxOutputType');
                var chkCreateSnapshot = Ext.getCmp('chkCreateSnapshot');

                var response = Ext.decode(response.responseText);
                DetailPanel.masterLayout = response;

                if (DetailPanel.masterLayout.project.timeSpanFromLastUpdate === null) {
                    com.showErrorFromTry2('This project is not yet available on the EMSPEED portal.');
                }
                else {

                    cbxCDP.store = Ext.create('Ext.data.Store', {
                        fields: ['id', 'name'],
                        data: DetailPanel.masterLayout.reportTypeItems
                    });

                    cbxConfigurations.store = Ext.create('Ext.data.Store', {
                        fields: ['id', 'name'],
                        data: DetailPanel.masterLayout.configurations
                    }),
                    cbxConfigurations.setValue(DetailPanel.masterLayout.configurationId);

                    cbxOutputType.store = Ext.create('Ext.data.Store', {
                        fields: ['id', 'name'],
                        data: DetailPanel.masterLayout.fileFormats
                    }),
                    cbxOutputType.setValue(1);

                    if (DetailPanel.masterLayout.reportTypeId === 4) {

                        var testStore = Ext.create('Ext.data.TreeStore', {
                            model: 'EMSPEED.reporting.model.reportingProjectsModel',
                            defaultRootProperty: 'projects',
                            proxy: {
                                type: 'memory',
                                data: DetailPanel.masterLayout.projects,
                                reader: {
                                    type: 'json',
                                    root: 'projects'
                                }
                            },
                            root:
                            {
                                expanded: true
                            }
                        });

                        reportingProgramProjectTreeGrid.bindStore(testStore);

                        cbxRiskThreshold.store = Ext.create('Ext.data.Store', {
                            fields: ['id', 'name', 'color', 'image','lowerBoundary', 'upperBoundary', 'sequence'],
                            data: DetailPanel.masterLayout.riskThresholds
                        });

                        txtCdpReportTitle.setValue(DetailPanel.masterLayout.project.projectId + ' - ' + DetailPanel.masterLayout.project.projectName);
                    }

                    this.getConfigurationFromServer(true, DetailPanel.masterLayout.reportTypeId, DetailPanel.masterLayout.configurationId, DetailPanel.masterLayout.isL2Support);

                }


            },
            failure: function (response, opts) {
                com.showError(response, opts);
            }
        });
    },

    cbxCDP_select: function (combobox, newVal, oldVal, eOpts) {
        var valueField = newVal[0].data.id
        var displayField = newVal[0].raw.name;

        this.cbxCDP_change(combobox, valueField, displayField, eOpts);
    },
    cbxCDP_change: function (combobox, valueField, displayField, eOpts) {
        reporting.resetGridToolbar();
        var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
        DetailPanel.masterLayout.currentReportTypeItemId = valueField;

        var store = combobox.getStore();
        store.each(function (rec, index, count) {
            if (rec.get('id') === valueField) {
                displayField = rec.get('name');
            }
        });

        if (DetailPanel.masterLayout.reportTypeId == 1) {
            var theRecommendedSectionIds;
            for (var r = 0; r < DetailPanel.masterLayout.reportTypeItems.length; r++) {
                if (valueField === DetailPanel.masterLayout.reportTypeItems[r].id) {
                    theRecommendedSectionIds = DetailPanel.masterLayout.reportTypeItems[r].recommendedSectionIds;
                    break;
                }
            }
            var store = Ext.getCmp('grdReportSections').getStore();
            store.each(function (rec, index, count) {

                var i = -1;
                var obj = rec.get('id');
                for (var j = 0; j < theRecommendedSectionIds.length; j++) {
                    if (theRecommendedSectionIds[j] == obj) {
                        i = j;
                    }
                }
                //var i = theRecommendedSectionIds.indexOf(rec.get('id'));

                if (i === -1) {
                    rec.set('cdp', '');
                }
                else {
                    rec.set('cdp', 'x');
                }
            });

            Ext.getCmp('txtCdpReportTitle').setValue(DetailPanel.masterLayout.project.projectId + ' - ' + DetailPanel.masterLayout.project.projectName + ' - ' + displayField);
        };


    },
    cbxConfigurations_select: function (combobox, newVal, oldVal) {

        reporting.resetGridToolbar();

        Ext.getCmp('reportingBasePanel').setLoading('Working...');
        var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
        this.getConfigurationFromServer(false, DetailPanel.masterLayout.reportTypeId, newVal[0].data.id);
        DetailPanel.masterLayout.configurationId = newVal[0].data.id;
    },

    cbxConfigurations_beforeselect: function (combo, record, index, eOpts) {
        if (Ext.getCmp('lblError').text === 'You have unsaved changes to the report configuration') {
            var answer;
            answer = window.confirm('You have unsaved changes to the report configuration\n\nClick OK to continue without saving changes\n\nClick CANCEL to retrun to unsaved configuration');

            if (answer === true) {
                return true;
            }
            else {
                combo.collapse();
                return false;
            }
        }
        else {
            return true;
        }
    },

    cbxOutputType_select: function (combobox, newVal, oldVal) {
        //alert('select: ' + oldVal);
    },

    btnGenerateReport_click: function (button, e, eOpts) {
        reporting.eventType = 'Generate Report';
        var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');

        var reportGenerationObject = {};
        reportGenerationObject.contextId = com.getProjectId();
        reportGenerationObject.siteRoot = reporting.siteRoot;
        reportGenerationObject.reportTitle = Ext.getCmp('txtCdpReportTitle').getValue();
        reportGenerationObject.fileFormatId = Ext.getCmp('cbxOutputType').getValue(); ; // need to figure this out getComboText('cbxOutputType');
        reportGenerationObject.reportTypeId = DetailPanel.masterLayout.reportTypeId;
        reportGenerationObject.dfxTargetCdpEvent = DetailPanel.masterLayout.project.targetCdpMilestoneName,
        reportGenerationObject.pddNextCdpEvent = DetailPanel.masterLayout.pddNextCdpEvent,
        reportGenerationObject.reportTypeName = DetailPanel.masterLayout.reportTypeId;
        reportGenerationObject.generateSnapshot = Ext.getCmp('chkCreateSnapshot').getValue();  //need to get this
        reportGenerationObject.zippedFile = Ext.getCmp('chkZip').getValue(); //bool
        reportGenerationObject.configuration = {};
        if (Ext.getCmp('lblError').text === '') {
            reportGenerationObject.configurationId = DetailPanel.masterLayout.configurationId;
        }
        else {
            reportGenerationObject.configurationId = 0;
            reportGenerationObject.configuration = this.getConfigurationObjectForSave(DetailPanel.masterLayout.reportTypeId, Ext.getCmp('txtConfigurationName').getValue(), DetailPanel.masterLayout.configurationId, DetailPanel.masterLayout.project);
        }
        var reportGenerationString = Ext.encode(reportGenerationObject);
        reporting.reportGenerationObject = reportGenerationObject;
        Ext.create("EMSPEED.reporting.view.reportingCommonGenerateConfirm", {}).show();
        if (reporting.enableGenerateReport === true) {
            Ext.getDom('reportGeneration').setAttribute("value", reportGenerationString);
            Ext.getDom('theReportGenerationForm').submit();
        }
    },

    txtConfigurationName_change: function (textbox, newValue, oldValue, eOpts) {
        if (reporting.isSelected === false) {
            reporting.setChangedMessage();
        }
        else {
            if (Ext.getCmp('lblError').text === 'You have unsaved changes to the report configuration') {
                alert('warning, unsaved changes...');
            }
            Ext.getCmp('lblError').setText('');
            Ext.get('txtConfigurationName-inputEl').applyStyles('backgroundColor: white');
        }
    },

    btnSaveConfiguration_click: function (button, e, eOpts) {
        reporting.eventType = 'Edit Configuration';
        var theName = Ext.getCmp('txtConfigurationName').rawValue;
        var combo = Ext.getCmp('cbxConfigurations');
        var currentName = this.getSelectedComboBoxItemValue(combo);
        var isGood = true;
        if (Ext.isEmpty(theName)) {
            var newMsg = '<span style="color:red">Please enter a value for your configuration name</span>';
            Ext.Msg.alert('Validation Error', newMsg, Ext.emptyFn);
            isGood = false;
        }
        if (this.checkConfigurationNameForDuplicates(theName) && theName != currentName) {
            var newMsg = '<span style="color:red">Please enter a unique name for your configuration</span>';
            Ext.Msg.alert('Validation Error', newMsg, Ext.emptyFn);
            isGood = false;
        }
        //other checks to see if this name already used
        if (isGood === true) {

            Ext.getCmp('reportingBasePanel').setLoading('Working...');
            var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
            var theConfigurationObject = {};
            theConfigurationObject.configuration = this.getConfigurationObjectForSave(DetailPanel.masterLayout.reportTypeId, theName, DetailPanel.masterLayout.configurationId);
            var s = Ext.encode(theConfigurationObject);
            Ext.Ajax.request({
                url: reporting.saveConfigurationUrl,
                method: reporting.saveConfigurationMethod,
                withCredentials: com.usesWithCredentials,
                scope: this,
                jsonData: theConfigurationObject,
                success: function (response, opts) {
                    var response = Ext.decode(response.responseText);
                    var cbxConfigurations = Ext.getCmp('cbxConfigurations');
                    var theStore = Ext.create('Ext.data.Store', {
                        fields: ['id', 'name'],
                        data: response.configurations
                    });
                    cbxConfigurations.bindStore(theStore);
                    cbxConfigurations.setValue(response.configurationId);
                    DetailPanel.masterLayout.configurations = response.configurations;
                    this.getConfigurationFromServer(false, DetailPanel.masterLayout.reportTypeId, response.configurationId, DetailPanel.masterLayout.isL2Support);
                    Ext.getCmp('reportingBasePanel').setLoading(false);
                },
                failure: function (response, opts) {
                    com.showError(response, opts);
                }
            });
        }
    },

    btnSaveAsConfiguration_click: function (button, e, eOpts) {
        reporting.eventType = 'Save New Configuration';
        var theName = Ext.getCmp('txtConfigurationName').rawValue;
        Ext.Msg.prompt('New Configuration', 'Enter a name for your new configuration:', function (btn, text, cfg) {

            var isGood = true;
            if (btn == 'ok') {
                if (Ext.isEmpty(text)) {
                    var newMsg = '<span style="color:red">Enter a name for your new configuration:</span>';
                    Ext.Msg.show(Ext.apply({}, { msg: newMsg }, cfg));
                    isGood = false;
                }
                if (this.checkConfigurationNameForDuplicates(text)) {
                    var newMsg = '<span style="color:red">Enter a name for your new configuration:</span>';
                    Ext.Msg.show(Ext.apply({}, { msg: newMsg }, cfg));
                    isGood = false;
                }
                //other checks to see if this name already used
                if (isGood === true) {

                    var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
                    var isL2Support = DetailPanel.masterLayout.isL2Support;
                    var defaultConfigMsg = 'Is ' + text + ' a new configuration?';
                    //                    if (isL2Support) {
                    //                        Ext.Msg.show({
                    //                            title: 'Default Configuration?',
                    //                            msg: defaultConfigMsg,
                    //                            buttons: Ext.Msg.YESNOCANCEL,
                    //                            fn: processResult,
                    //                            icon: Ext.window.MessageBox.INFO
                    //                        });
                    //                    }


                    Ext.getCmp('reportingBasePanel').setLoading('Working...');
                    var theConfigurationObject = {};
                    theConfigurationObject.configuration = this.getConfigurationObjectForSave(DetailPanel.masterLayout.reportTypeId, text, 0);
                    //var s = Ext.encode(theConfigurationObject);
                    Ext.Ajax.request({
                        url: reporting.saveConfigurationUrl,
                        method: reporting.saveConfigurationMethod,
                        withCredentials: com.usesWithCredentials,
                        scope: this,
                        jsonData: theConfigurationObject,
                        success: function (response, opts) {

                            var response = Ext.decode(response.responseText);
                            var cbxConfigurations = Ext.getCmp('cbxConfigurations');
                            var theStore = Ext.create('Ext.data.Store', {
                                fields: ['id', 'name'],
                                data: response.configurations
                            });
                            cbxConfigurations.bindStore(theStore);
                            cbxConfigurations.setValue(response.configurationId);
                            DetailPanel.masterLayout.configurations = response.configurations;
                            //DetailPanel.masterLayout.configurationId = response.data.configurationId;
                            this.getConfigurationFromServer(false, DetailPanel.masterLayout.reportTypeId, response.configurationId, DetailPanel.masterLayout.isL2Support);

                            Ext.getCmp('reportingBasePanel').setLoading(false);
                        },
                        failure: function (response, opts) {
                            com.showError(response, opts);
                        }
                    });
                }
            }



        }, this, false, theName);
    },

    btnDeleteConfiguration_click: function (button, e, eOpts) {
        reporting.eventType = 'Delete Configuration';
        Ext.getCmp('reportingBasePanel').setLoading('Working...');
        var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
        var configurationId = Ext.getCmp('cbxConfigurations').getValue();
        var s = { "reportTypeId": reporting.selectedReportType.data.id, "configurationId": configurationId };
        Ext.Ajax.request({
            url: reporting.deleteConfigurationUrl,
            method: reporting.deleteConfigurationMethod,
            withCredentials: com.usesWithCredentials,
            scope: this,
            jsonData: s,
            success: function (response, opts) {
                var response = Ext.decode(response.responseText);
                var cbxConfigurations = Ext.getCmp('cbxConfigurations');
                var theStore = Ext.create('Ext.data.Store', {
                    fields: ['id', 'name'],
                    data: response.configurations
                });
                cbxConfigurations.bindStore(theStore);
                cbxConfigurations.setValue(response.configurationId);

                DetailPanel.masterLayout.configurations = response.configurations;
                //DetailPanel.masterLayout.configurationId = response.data.configurationId;
                this.getConfigurationFromServer(false, DetailPanel.masterLayout.reportTypeId, response.configurationId, DetailPanel.masterLayout.isL2Support);

                Ext.getCmp('reportingBasePanel').setLoading(false);
            },
            failure: function (response, opts) {
                com.showError(response, opts);
            }
        });
    },

    cbxEnabled_checkchange: function (column, recordIndex, checked) {
        reporting.setChangedMessage();
        reporting.drawSummary(Ext.getCmp('grdReportSections').store.data.items);
    },

    btnCdpBack_click: function (panel, eOpts) {
        if (Ext.getCmp('lblError').text === reporting.changeMessage) {
            var answer;
            answer = window.confirm('You have unsaved changes to the report configuration\n\nClick OK to continue without saving changes\n\nClick CANCEL to retrun to unsaved configuration');
            if (answer === true) {
                Ext.getCmp('pnlReportingDetail').setChild('reportingManagerDetailPanel');
                Ext.getCmp('lblCdpDesc').setVisible(true);
                Ext.getCmp('lblCdpSummary').setVisible(false);
            }
        }
        else {
            Ext.getCmp('pnlReportingDetail').setChild('reportingManagerDetailPanel');
            Ext.getCmp('lblCdpDesc').setVisible(true);
            Ext.getCmp('lblCdpSummary').setVisible(false);
        }
    },

    getConfigurationObjectForSave: function (reportTypeId, reportName, configurationId, project) {
        var theObject = {};
        theObject = {};
        theObject.id = configurationId;
        theObject.name = reportName;
        theObject.reportTypeId = reportTypeId;
        theObject.isDefault = false;
        theObject.contextsSelected = [];
        theObject.sectionsSelected = [];

        var thePanel = Ext.getCmp('reportingCdpFieldsetGlobalFilters');
        var globalFiltersParentContainer = thePanel.down('#globalFiltersParentContainer');
        var globalFiltersSelected = reporting.filters.getFilterValues(globalFiltersParentContainer);

        theObject.globalFiltersSelected = globalFiltersSelected;

        var store = Ext.getCmp('grdReportSections').getStore();
        store.clearFilter(true);
        store.each(function (rec, index, count) {
            var theSection = {};
            theSection.id = index + 1;
            theSection.configurationId = configurationId;
            theSection.sectionsAvailableId = rec.get('id');
            theSection.enabled = rec.get('enabled');
            theSection.sectionFiltersSelected = rec.get('sectionFiltersSelected');
            theSection.sectionSortGroupsSelected = rec.get('sectionSortGroupsSelected');
            theObject.sectionsSelected.push(theSection);
        });

        if (reportTypeId === 4) {

            var reportingProgramProjects = Ext.getCmp('reportingCdpDetailPanel').down('reportingProgramProjects');;
            var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
            var cbxRiskThreshold = reportingProgramProjects.down('combobox');
            theObject.riskThresholdIdSelected = cbxRiskThreshold.getValue();

            var theRootContext = {};
            var idNumber = 1;
            theRootContext.id = idNumber;
            theRootContext.contextId = com.getProjectId();
            theRootContext.configurationId = configurationId;
            if (reporting.eventType === 'Generate Report') {
                theRootContext.contextName = project.projectName;
                theRootContext.pddNumber = project.pddNumber;
                theRootContext.parentContextId = project.parentProjectId;
                theRootContext.parentContextName = project.parentProjectName;
                theRootContext.level = project.level;
                theRootContext.isChild = project.isChild;
                theRootContext.isParent = project.isParent;
                theRootContext.projectManager = project.projectManager;
                theRootContext.productChampion = project.productChampion;
                theRootContext.productGroupId = project.productGroupId;
                theRootContext.productGroupCode = project.productGroupCode;
            }
            theObject.contextsSelected.push(theRootContext);

            reportingProgramProjectTreeGrid.getRootNode().cascadeBy(function () {
                if (this.get('checked') && this.get('projectId') != 0) {
                    var theSubContext = {};
                    theSubContext.id = idNumber;
                    theSubContext.contextId = this.get('projectId');
                    theSubContext.configurationId = configurationId;
                    if (reporting.eventType === 'Generate Report') {
                        theSubContext.contextName = this.get('projectName');
                        theSubContext.pddNumber = this.get('pddNumber');
                        theSubContext.parentContextId = this.get('parentProjectId');
                        theSubContext.parentContextName = this.get('parentProjectName');
                        theSubContext.level = this.get('level');
                        theSubContext.isChild = this.get('isChild');
                        theSubContext.isParent = this.get('isParent');
                        theSubContext.projectManager = this.get('projectManager');
                        theSubContext.productChampion = this.get('productChampion');
                        theSubContext.productGroupId = this.get('productGroupId');
                        theSubContext.productGroupCode = this.get('productGroupCode');
                    }
                    theObject.contextsSelected.push(theSubContext);
                    idNumber++;
                }
            });
        }

        return theObject;
    },

    getConfigurationFromServer: function (initialRun, reportTypeId, configurationId, isL2Support) {
        // call getConfiguration web method to get the configuration data for the passed in configurationId
        // grab the 'sectionsSelected' array
        // loop through the masterLayout.sectionsAvailable array and add
        //   sectionsSelected.enabled, sectionsSelected.sectionFiltersSelected and sectionsSelected.sectionSortGroupsSelected
        // set the store for the sections grid to the masterLayout.sectionsAvailable array
        // draw the summary
        // if initial run, get global filter controls and set cdp list box item
        // set select values for global filters
        // set save and delete button states based on if configuration is a default
        // set configuration name text box
        // set cdp icons in section grid

        var s = { "reportTypeId": reportTypeId, "configurationId": configurationId };
        Ext.Ajax.request({
            url: reporting.getConfigurationUrl,
            method: reporting.getConfigurationMethod,
            withCredentials: com.usesWithCredentials,
            jsonData: s,
            scope: this,
            success: function (response, opts) {
                var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
                var grdReportSections = Ext.getCmp('grdReportSections');

                var response = Ext.decode(response.responseText);
                DetailPanel.masterLayout.configurationId = response.id;

                for (var a = 0; a < DetailPanel.masterLayout.sectionsAvailable.length; a++) {
                    DetailPanel.masterLayout.sectionsAvailable[a].enabled = false;
                    DetailPanel.masterLayout.sectionsAvailable[a].sectionFiltersSelected = [];
                    DetailPanel.masterLayout.sectionsAvailable[a].sectionSortGroupsSelected = [];
                }

                var sectionsSelected = response.sectionsSelected;
                sectionsSelected.sort(com.compareSectionsAvailableId);
                for (var r = 0; r < sectionsSelected.length; r++) {
                    var theIndex = com.getIndexFromId(DetailPanel.masterLayout.sectionsAvailable, sectionsSelected[r].sectionsAvailableId);
                    if (theIndex != undefined) {

                        DetailPanel.masterLayout.sectionsAvailable[theIndex].enabled = sectionsSelected[r].enabled;
                        DetailPanel.masterLayout.sectionsAvailable[theIndex].sectionFiltersSelected = sectionsSelected[r].sectionFiltersSelected;
                        DetailPanel.masterLayout.sectionsAvailable[theIndex].sectionSortGroupsSelected = sectionsSelected[r].sectionSortGroupsSelected;

                        //DetailPanel.masterLayout.sectionsAvailable[theIndex].allowsSnapshot = sectionsSelected[r].allowsSnapshot;
                        // start
                        //var n = DetailPanel.masterLayout.sectionsAvailable[theIndex].name;
                        //if (n === 'Project Dashboard' || n === 'Requirements') {
                        //    DetailPanel.masterLayout.sectionsAvailable[theIndex].allowsSnapshot = true;
                        //}
                        //else {
                        //    DetailPanel.masterLayout.sectionsAvailable[theIndex].allowsSnapshot = false;
                        //}
                        // end
                    }

                }


                DetailPanel.masterLayout.sectionsAvailable.sort(com.compareSequence);
                var theStore = Ext.create('Ext.data.Store', {
                    model: 'EMSPEED.reporting.model.reportingSectionsModel',
                    data: DetailPanel.masterLayout.sectionsAvailable
                });



                grdReportSections.reconfigure(theStore);

                if (DetailPanel.masterLayout.reportTypeId == 1) {
                    grdReportSections.columns[1].setVisible(true);
                }
                if (DetailPanel.masterLayout.reportTypeId == 4) {
                    grdReportSections.columns[1].setVisible(false);
                }

                reporting.drawSummary(grdReportSections.store.data.items);

                var thePanel = Ext.getCmp('reportingCdpFieldsetGlobalFilters');
                var globalFiltersParentContainer = thePanel.down('#globalFiltersParentContainer');
                if (initialRun === true) {
                    var globalFilterControls = reporting.filters.getAllFilterControls('global', DetailPanel.masterLayout.globalFiltersAvailable, 'global', 100);
                    globalFiltersParentContainer.add(globalFilterControls);
                    var cbxCDP = Ext.getCmp('cbxCDP');
                    cbxCDP.setValue(DetailPanel.masterLayout.currentReportTypeItemId);
                }
                reporting.filters.globalFiltersSelected = response.globalFiltersSelected;
                reporting.filters.setValuesForAllFilters(globalFiltersParentContainer, reporting.filters.globalFiltersSelected, DetailPanel.masterLayout.globalFiltersAvailable);

                var theIndex = com.getIndexFromId(DetailPanel.masterLayout.configurations, configurationId);
                var isDefault = DetailPanel.masterLayout.configurations[theIndex].isDefault;
                var isDisabled = this.getSaveConfigurationEntitlements(isDefault, isL2Support);

                var btnSave = Ext.getCmp('btnSaveConfiguration');
                btnSave.setDisabled(isDisabled);
                var btnDelete = Ext.getCmp('btnDeleteConfiguration');
                btnDelete.setDisabled(isDisabled);
                var txtConfigurationName = Ext.getCmp('txtConfigurationName');
                txtConfigurationName.setDisabled(isDisabled);

                reporting.clearChangedMessage();

                reporting.isSelected = true;
                Ext.getCmp('txtConfigurationName').setValue(com.getComboText('cbxConfigurations'));
                Ext.getCmp('txtConfigurationName').Begin = com.getComboText('cbxConfigurations');
                reporting.isSelected = false;

                if (DetailPanel.masterLayout.reportTypeId == 1) {
                    var theRecommendedSectionIds;
                    var valueField = DetailPanel.masterLayout.currentReportTypeItemId;
                    for (var r = 0; r < DetailPanel.masterLayout.reportTypeItems.length; r++) {
                        if (valueField === DetailPanel.masterLayout.reportTypeItems[r].id) {
                            theRecommendedSectionIds = DetailPanel.masterLayout.reportTypeItems[r].recommendedSectionIds;
                            break;
                        }
                    }

                    //mjg - is this logic repeated?
                    var store = Ext.getCmp('grdReportSections').getStore();
                    store.each(function (rec, index, count) {

                        var i = -1;
                        var obj = rec.get('id');
                        for (var j = 0; j < theRecommendedSectionIds.length; j++) {
                            if (theRecommendedSectionIds[j] == obj) {
                                i = j;
                            }
                        }
                        //var i = theRecommendedSectionIds.indexOf(rec.get('id'));

                        if (i === -1) {
                            rec.set('cdp', '');
                        }
                        else {
                            rec.set('cdp', 'x');
                        }
                    });
                    //mjg
                };

                if (DetailPanel.masterLayout.reportTypeId === 4)
                {
                    var theSelectedSubProjects = response.contextsSelected;
                    var reportingProgramProjects = Ext.getCmp('reportingCdpDetailPanel').down('reportingProgramProjects');;
                    var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
                    var cbxRiskThreshold = reportingProgramProjects.down('combobox');
                    reportingProgramProjectTreeGrid.getRootNode().cascadeBy(function () {
                        for (var j = 0; j < theSelectedSubProjects.length; j++) {
                            if (theSelectedSubProjects[j].contextId == this.data.projectId) {
                                this.set('checked', true);
                            }
                        }
                        
                    });

                    cbxRiskThreshold.setValue(response.riskThresholdIdSelected);
                }

                Ext.getCmp('reportingBasePanel').setLoading(false);

            },
            failure: function (response, opts) {
                com.showError(response, opts);
            }
        });
    },

    reportingProgramProjectTreeGrid_checkchange: function (node, checked, eOpts)
    {
        var parentNode = node.parentNode;
        var changeOccurred = true;
        if (checked)
        {
            while (parentNode)
            {
                parentNode.set('checked', true);
                parentNode = parentNode.parentNode;
            }
        }

        if (!checked && node.data.isParent)
        {
            var childChecked = false;
            node.cascadeBy(function () {
                if (this.get('checked')) {
                    childChecked = true;
                }
            })

            if (childChecked) {
                node.set('checked', true);
                var newMsg = 'A project may not be deselected while it has selected sub projects';
                Ext.Msg.alert('Validation Error', newMsg, Ext.emptyFn);
                changeOccurred = false;
            }
        }

        if (changeOccurred) {
            reporting.setChangedMessage();
        }

        var reportingProgramProjects = Ext.getCmp('reportingCdpDetailPanel').down('reportingProgramProjects');
        var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
        var btnProgramProjectAllClear = reportingProgramProjectTreeGrid.down('reportingProgramProjectTreeGridToolbar').down();

        var isAllChecked = this.isTreePanelAllChecked(reportingProgramProjectTreeGrid);

        if (isAllChecked) {
            reportingProgramProjectTreeGrid.store.clearFilter(false);
            btnProgramProjectAllClear.pressed = true;
            btnProgramProjectAllClear.setText('Clear');
        }
        else {
            btnProgramProjectAllClear.pressed = false;
            btnProgramProjectAllClear.setText('All');
        }
    },

    btnCdpProgramProjectAllClear_toggle: function (button, pressed, eOpts) {
        var reportingProgramProjectTreeGrid = Ext.getCmp('reportingCdpDetailPanel').down('reportingProgramProjectTreeGrid');

        var store = reportingProgramProjectTreeGrid.getStore();
        if (pressed) {
            store.clearFilter(false);
            button.setText('Clear');
        }
        else {
            button.setText('All');
        }

        reportingProgramProjectTreeGrid.getRootNode().cascadeBy(function () {
            this.set('checked', button.pressed);
        });

        reporting.setChangedMessage();
    },

    cbxRiskThreshold_select: function (combobox, newVal, oldVal) {
        reporting.setChangedMessage();
    },

    isTreePanelAllChecked: function(treePanel)
    {
        var treePanelRootNode= treePanel.getRootNode();
        var isAllChecked = true;

        treePanelRootNode.cascadeBy(function() {
            if(!this.get('checked'))
            {
                isAllChecked = false;
            }
        });

        return isAllChecked;
    },

    getSaveConfigurationEntitlements: function (isDefault, isL2Support) {
        var isDisabled = false;
        if (isDefault && !isL2Support) { isDisabled = true; }
        return isDisabled;
    },

    checkConfigurationNameForDuplicates: function (configurationName) {
        var store = Ext.getCmp('cbxConfigurations').getStore();
        var isDuplicate = false;
        store.each(function (rec, index, count) {
            if (rec.get('name') === configurationName) {
                isDuplicate = true;
            }
        });
        return isDuplicate;
    },

    getSelectedComboBoxItemValue: function (combo) {
        var selectValue = combo.getStore().find('id', combo.getValue());
        return combo.getStore().getAt(selectValue).get('name');
    }
});

Ext.define('EMSPEED.reporting.view.reportingCdpForPddFieldsetGenerateReport', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingCdpForPddFieldsetGenerateReport',
    width: '100%',
    height: 200,
    layout: 'vbox',
    collapsible: false,
    collapsed: false,
    title: 'Generate Report',
    initComponent: function () {
        Ext.apply(this, {
            items: [
                {
                    xtype: 'container',
                    layout: 'hbox',
                    margin: '0 0 10 0',
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'txtCdpForPddReportTitle',
                            fieldLabel: 'Report Title:',
                            labelAlign: 'top',
                            margin: '0 20 0 0',
                            width: 325,
                            name: 'reportTitle'
                        }, 
                        {
                            xtype: 'checkbox',
                            id: 'chkCdpForPddCreateSnapshot',
                            labelAlign: 'right',
                            fieldLabel: 'Create Snapshot',
                            labelWidth: 120,
                            border: false,
                            inputValue: '1',
                            margin: '21 20 0 0'
                        },
                        {
                            xtype: 'button', 
                            id:'btnGenerateCdpForPddReport',
                            margin: '21 0 0 0', 
                            text: 'Generate Report'
                        }
                    ]
                }
            ]   
        });
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.reporting.view.reportingCdpForPddDetailPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingCdpForPddDetailPanel',
    id: 'reportingCdpForPddDetailPanel',
    itemId: 'reportingCdpForPddDetailPanel',
    layout: 'vbox',
    title: 'Generate CDP Milestone Report',
    header: false,
    border: false,
    bodyBorder: false,
    bodyPadding: '0 0 0 0',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 290,
        anchor: '100%'
    },
    items: [
        { xtype: 'reportingCdpForPddFieldsetGenerateReport' }
    ],
    dockedItems: [
    {
        xtype: 'toolbar', dock: 'top',
        style: {
            top: 0,
            left: 0,
            borderWidth: '1px',
            padding: '0 0 0 0'
        },
        items: [
            {
                xtype: 'button',
                margin: '0 0 10 0',
                style: {
                    top: 0
                },
                id: 'btnCdpForPddBack',
                text: '&laquo; Back'
            }
        ]
    }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingCdpForPddSummaryPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingCdpForPddSummaryPanel',
    id: 'reportingCdpForPddSummaryPanel',
    itemId: 'reportingCdpForPddSummaryPanel',
    margin: '0 0 0 0',
    border: false,
    bodyBorder: false,
    bodyPadding: '10 10 10 10',
    layout: 'vbox',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 90,
        anchor: '100%'
    },
    bodyStyle: {
        backgroundColor: '#F2F2F2'
    },
    items: [
        { xtype: 'image', id: 'imgCdpForPddType', margin: '0 0 5 00', height: '72px' },
        { xtype: 'label', id: 'lblCdpForPddType', margin: '0 0 15 0' },
        { xtype: 'label', id: 'lblCdpForPddDesc', margin: '0 0 15 0', width: 250 }
    ],
    loadRecord: function (image) {
        Ext.getCmp('imgCdpForPddType').setSrc(reporting.imagesFolder + image.data.iconFile);
        Ext.getCmp('lblCdpForPddType').setText(image.data.name);
        Ext.getCmp('lblCdpForPddDesc').setText(image.data.description);
    }
});

Ext.define('EMSPEED.reporting.controller.reportingCdpForPddController', {
    extend:  Ext.app.Controller ,
               
                                                               
                                                                          
                                                                
                                                         
                                                               
      

    init: function () {
        this.control({
            '#reportingCdpForPddDetailPanel': { activate: this.reportingCdpForPddDetailPanel_activate },
            '#btnGenerateCdpForPddReport': { click: this.btnGenerateCdpForPddReport_click },
            '#btnCdpForPddBack': { click: this.btnCdpForPddBack_click }
        });
    },

    reportingCdpForPddDetailPanel_activate: function (panel, e, eOpts) {
        Ext.getCmp('reportingBasePanel').setLoading('Working...');
        reporting.resetGridToolbar();

        var getMasterLayoutParms = { "reportTypeId": reporting.selectedReportType.data.id, "contextId": com.getProjectId() };
        Ext.Ajax.request({
            url: reporting.getMasterLayoutUrl,
            method: reporting.getSnapshotEntitlementsMethod,
            withCredentials: com.usesWithCredentials,
            scope: this,
            jsonData: getMasterLayoutParms,
            success: function (response, opts) {
                var DetailPanel = Ext.getCmp('reportingCdpForPddDetailPanel');
                var response = Ext.decode(response.responseText);
                DetailPanel.masterLayout = response;
                Ext.getCmp('chkCdpForPddCreateSnapshot').setDisabled(!DetailPanel.masterLayout.projectEntitlements.AllowSnapshot);
                Ext.getCmp('txtCdpForPddReportTitle').setValue(DetailPanel.masterLayout.project.projectId + ' - ' + DetailPanel.masterLayout.project.projectName + ' - ' + this.getFormattedDate());
                Ext.getCmp('reportingBasePanel').setLoading(false);
            },
            failure: function (response, opts) {
                com.showError(response, opts);
            }
        });
    },

    btnGenerateCdpForPddReport_click: function (button, e, eOpts) {
        var DetailPanel = Ext.getCmp('reportingCdpForPddDetailPanel');

        var metadata = reporting.selectedReportType.raw.metadata.split(';');

        var reportGenerationPMTApprovalObject = {};
        reportGenerationPMTApprovalObject.contextId = com.getProjectId();
        reportGenerationPMTApprovalObject.siteRoot = reporting.siteRoot;
        reportGenerationPMTApprovalObject.reportTitle = Ext.getCmp('txtCdpForPddReportTitle').getValue();
        reportGenerationPMTApprovalObject.fileFormatId = metadata[1]; //fileformatid is stored at index[1] of the metadata object
        reportGenerationPMTApprovalObject.reportTypeId = reporting.selectedReportType.raw.id;
        reportGenerationPMTApprovalObject.reportTypeName = 'CDP Report';
        reportGenerationPMTApprovalObject.dfxTargetCdpEvent = DetailPanel.masterLayout.project.targetCdpMilestoneName,
        reportGenerationPMTApprovalObject.pddNextCdpEvent = DetailPanel.masterLayout.pddNextCdpEvent,
        reportGenerationPMTApprovalObject.generateSnapshot = Ext.getCmp('chkCdpForPddCreateSnapshot').getValue();
        reportGenerationPMTApprovalObject.dfxTargetCdpEvent = DetailPanel.masterLayout.project.targetCdpMilestoneName,
        reportGenerationPMTApprovalObject.pddNextCdpEvent = DetailPanel.masterLayout.pddNextCdpEvent,
        reportGenerationPMTApprovalObject.zippedFile = metadata[2]; //zipped boolean value is stored at index[2] of the metadata object
        reportGenerationPMTApprovalObject.configuration = {};

        reportGenerationPMTApprovalObject.configurationId = metadata[0]; //configurationid is stored at index[0] of the metadata object

        var reportGenerationPMTApprovalString = Ext.encode(reportGenerationPMTApprovalObject);

        var reportGenerationDfXApprovalObject = {};
        reportGenerationDfXApprovalObject.contextId = com.getProjectId();
        reportGenerationDfXApprovalObject.siteRoot = reporting.siteRoot;
        reportGenerationDfXApprovalObject.reportTitle = Ext.getCmp('txtCdpForPddReportTitle').getValue();
        reportGenerationDfXApprovalObject.fileFormatId = metadata[4]; //fileformatid is stored at index[4] of the metadata object
        reportGenerationDfXApprovalObject.reportTypeId = reporting.selectedReportType.raw.id;
        reportGenerationDfXApprovalObject.reportTypeName = 'CDP Report';
        reportGenerationDfXApprovalObject.dfxTargetCdpEvent = DetailPanel.masterLayout.project.targetCdpMilestoneName,
        reportGenerationDfXApprovalObject.pddNextCdpEvent = DetailPanel.masterLayout.pddNextCdpEvent,
        reportGenerationDfXApprovalObject.generateSnapshot = Ext.getCmp('chkCdpForPddCreateSnapshot').getValue();
        reportGenerationDfXApprovalObject.dfxTargetCdpEvent = DetailPanel.masterLayout.project.targetCdpMilestoneName,
        reportGenerationDfXApprovalObject.pddNextCdpEvent = DetailPanel.masterLayout.pddNextCdpEvent,
        reportGenerationDfXApprovalObject.zippedFile = metadata[5]; //zipped boolean value is stored at index[5] of the metadata object
        reportGenerationDfXApprovalObject.configuration = {};

        reportGenerationDfXApprovalObject.configurationId = metadata[3]; //configurationid is stored at index[3] of the metadata object

        var reportGenerationDfxApprovalString = Ext.encode(reportGenerationDfXApprovalObject);

        reporting.reportGenerationObject = reportGenerationPMTApprovalObject;
        reporting.reportGenerationObject = reportGenerationDfXApprovalObject;
        Ext.create("EMSPEED.reporting.view.reportingCommonGenerateConfirm", {}).show();
        if (reporting.enableGenerateReport === true) {
            Ext.getDom('reportGeneration').setAttribute("value", reportGenerationPMTApprovalString);
            Ext.getDom('theReportGenerationForm').submit();
            Ext.getDom('reportGeneration').setAttribute("value", reportGenerationDfxApprovalString);
            Ext.getDom('theReportGenerationForm').submit();
        }
    },

    btnCdpForPddBack_click: function (panel, eOpts) {
        Ext.getCmp('pnlReportingDetail').setChild('reportingManagerDetailPanel');
    },
    getFormattedDate: function () {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) { dd = '0' + dd }
        if (mm < 10) { mm = '0' + mm }
        today = mm + '/' + dd + '/' + yyyy;

        return today;
    }

});

Ext.define('EMSPEED.reporting.view.reportingFilters', {
    extend:  Ext.window.Window ,
    alias: 'widget.reportingFilters',
    id: 'reportingFilters',
    modal: true,
    floating: true,
    frame: false,
    overflowY: 'auto',
    bodyStyle: {
        background: '#ffffff',
        paddingTop: '10px',
        paddingRight: '0px',
        paddingBottom: '0px',
        paddingLeft: '10px'
    },
    //bodyPadding: '10 10 10 10',
    closable: false,
    layout: 'vbox',
    config: {
        grid: null,
        rowIndex: null,
        sectionFiltersAvailable: null,
        sectionFiltersSelected: null
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    },
    initComponent: function () {
        var rec = this.grid.store.getAt(this.rowIndex);
        var name = rec.get('name');

        Ext.apply(this, {
            height: rec.get('filterWindowHeight'),
            width: rec.get('filterWindowWidth'),
            items: [
                {
                    xtype: 'label',
                    text: name + ' Section Filters',
                    margin: '0 0 5 0',
                    style: {
                        fontFamily: 'Univers 57 condensed',
                        color: '#000000',
                        fontSize: '18px'
                    }
                },
                {
                    xtype: 'label',
                    width: '100%',
                    //text: 'Disabled filters are overridden by a global filter.  The red and italic items are the selected global filter values.',
                    text: 'Select filters for this section.',
                    margin: '0 0 10 0',
                    cls: 'x-form-item'
                },
                { xtype: 'container', itemId: 'reportingFiltersContainer' }
            ],
            buttons: [
                { id: 'btnFiltersOk', text: 'OK' },
                { id: 'btnFiltersCancel', text: 'Cancel' }
            ]
        });
        this.callParent(arguments);
    }
});





//                {
//                    xtype: 'label',
//                    text: name + ' Section Filters',
//                    margin: '0 0 5 0',
//                    style: {
//                        fontFamily: 'Univers 57 condensed',
//                        color: '#000000',
//                        fontSize: '18px'
//                    }
//                },
//                {
//                    xtype: 'label',
//                    width: '100%',
//                    text: 'The filters...',
//                    margin: '0 0 20 0',
//                    cls: 'x-form-item'
//                },





//                                {
//                                    xtype: 'button',
//                                    text: 'simulate an edit',
//                                    handler: function (button, e, eOptsx) {
//                                        //alert('hi');
//                                        filtersSelected = [];;
//                                    }
//                                },


//                {
//                    xtype: 'grid',
//                    store: Ext.create('Ext.data.Store', {
//                        fields: ['Id', 'Name', 'FilterTypeId', 'LowerBoundary', 'UpperBoundary', 'Visible', 'GlobalFilterId', 'FilterValues', 'Columns' ],
//                        data: sectionFilters
//                    }),
//                    disableSelection: true,
//                    columns: [ 
//                        { header: 'Id', dataIndex: 'Id', width: 100 },
//                        { header: 'FilterTypeId', dataIndex: 'FilterTypeId', width: 100 },
//                        { header: 'LowerBoundary', dataIndex: 'LowerBoundary', width: 100 },
//                        { header: 'UpperBoundary', dataIndex: 'UpperBoundary', width: 100 },
//                        { header: 'Visible', dataIndex: 'Visible', width: 100 },
//                        { header: 'GlobalFilterId', GlobalFilterId: 'Visible', width: 100 },


//                        { header: 'FilterValues', dataIndex: 'FilterValues', width: 100,
//                            renderer: function (value, meta, record) {
//                                meta.tdAttr = 'data-qtip="' + JSON.stringify(value) + '"';
//                                return JSON.stringify(value);
//                            }
//                        },
//                        { header: 'Columns', dataIndex: 'Columns', width: 100 },

//                    ]
//                },
//                {
//                    xtype: 'grid',
//                    store: Ext.create('Ext.data.Store', {
//                        fields: ['Id', 'SectionFilterId', 'RangeTypeId', 'LowerValue', 'UpperValue', 'SelectedFilterValueIds' ],
//                        data: this.filtersSelected
//                    }),
//                    disableSelection: true,
//                    columns: [ 
//                        { header: 'Id', dataIndex: 'Id', width: 100 },
//                        { header: 'SectionFilterId', dataIndex: 'SectionFilterId', width: 100 },
//                        { header: 'RangeTypeId', dataIndex: 'RangeTypeId', width: 100 },
//                        { header: 'LowerValue', dataIndex: 'LowerValue', width: 100 },
//                        { header: 'UpperValue', dataIndex: 'UpperValue', width: 100 },
//                        { header: 'SelectedFilterValueIds', dataIndex: 'SelectedFilterValueIds', width: 125,
//                            renderer: function (value, meta, record) {
//                                return JSON.stringify(value);
//                            }
//                        }
//                    ]
//                }

Ext.define('EMSPEED.reporting.view.reportingFilterBaseClass', {
    extend:  Ext.container.Container ,
    alias: 'widget.reportingFilterBaseClass',
                                       
    margin: '0 0 0 0',
    layout: 'vbox',
    labelAlign: 'top',
    theTextMargin: '3 5 0 0', //date
    theControlMargin: '0 5 0 0', //date

    style: {
        borderWidth: '1px',
        borderColor: '#cccccc',
        borderStyle: 'solid',
        borderTop: '1px',
        //borderBottom: '1px',
        borderLeft: '1px',
        borderRight: '1px'
    },

    config: {
        localOrGlobal: null,
        filtersAvailableObject: null,
        section: null,
        rangeTypes: null
    },

    getTheId: function (section, name) {
        var theId = section + '-' + name;
        theId = theId.split(' ').join('_');
        theId = theId.split('%').join('_');
        theId = theId.split('/').join('_');
        return theId;
    },

    getTheItemId: function (section, name, itemName) {
        var theItemId = section + '-' + name + '-' + itemName;
        theItemId = theItemId.split(' ').join('_');
        theItemId = theItemId.split('%').join('_');
        theItemId = theItemId.split('/').join('_');
        return theItemId;
    },

    getStringValue: function () {
        var theSummary = '';
        theSummary += this.filtersAvailableName + ': ';
        var o = this.getFilterValuesObject();
        if (o.lowerValueSelected != null) {
            if (o.rangeTypeSelectedName === null) {
                //                theSummary += ' ' + o.prefixText + ' ' + o.lowerValueSelected;
                theSummary += ' ' + "" + ' ' + o.lowerValueSelected;
            }
            else {
                theSummary += ' ' + o.rangeTypeSelectedName + ' ' + o.lowerValueSelected;
                if (o.upperValueSelected != null) {
                    theSummary += ' and ' + o.upperValueSelected;
                }
            }
            //theSummary += '<br>';
        }
        return theSummary;
    },

    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    },

    initComponent: function () {
        this.filtersAvailableId = this.filtersAvailableObject.id;
        this.filtersAvailableName = this.filtersAvailableObject.name;
        this.globalFilterId = this.filtersAvailableObject.globalFilterID;
        this.filterTypeId = this.filtersAvailableObject.filterTypeId;
        this.lowerValue = this.filtersAvailableObject.lowerValue;
        this.upperValue = this.filtersAvailableObject.upperValue;
        this.singleSelectFilterValueIdSelected = this.filtersAvailableObject.singleSelectFilterValueIdSelected;
        this.multiSelectFilterValuesSelected = this.filtersAvailableObject.multiSelectFilterValuesSelected;

        this.sequence = this.filtersAvailableObject.id;

        var theMargin;
        if (this.localOrGlobal === 'local') {
            theMargin = '7 0 0 0';
        }
        else {
            theMargin = '5 10 0 0';
        }

        var theTooltip = { xtype: 'label', width: 16, height: 1 };
        if (this.filtersAvailableObject.shortDescription != null) {
            if (this.filtersAvailableObject.longDescription != null) {
                theTooltip = { xtype: 'button', text: '?', width: 16, height: 16, margin: theMargin, tooltip: this.filtersAvailableObject.shortDescription, scope: this,
                    handler: function (button, event) {
                        Ext.Msg.show({
                            title: 'Help for ' + this.filtersAvailableObject.name + ' section filter',
                            msg: this.filtersAvailableObject.longDescription,
                            //msg: 'further detail on ' + this.filtersAvailableObject.name + ' section filter<h3>h3</h3><p>paragraph1</p><br><p>paragraph2</p>',
                            //width: 400,
                            //height: 800,
                            closable: false,
                            buttons: Ext.MessageBox.OK,
                            icon: Ext.MessageBox.INFO
                        })
                    }
                };
            }
            else {
                theTooltip = { xtype: 'button', text: '?', width: 16, height: 16, margin: theMargin, tooltip: this.filtersAvailableObject.shortDescription, scope: this };
            }
        }


        if (this.localOrGlobal === 'local') {
            this.layout = 'hbox';
            this.items = [
                    theTooltip,
                    { xtype: 'label', cls: 'x-form-item', width: this.filterRowTitleWidth, margin: '10 0 5 5', text: this.filtersAvailableObject.name + ':' },
                    { xtype: 'container', itemId: 'theDetails', layout: 'hbox', margin: '7 0 7 10', items: this.theItems }
                ]
        }
        else {
            this.layout = 'vbox';
            this.items = [
                { xtype: 'container', layout: 'hbox', margin: '0 0 0 0',
                    items: [
                        theTooltip,
                        { xtype: 'label', cls: 'x-form-item', margin: '9 0 0 0', width: 200, text: this.filtersAvailableObject.name + ':' }
                    ]
                },
                { xtype: 'container', itemId: 'theDetails', layout: 'hbox', margin: '5 0 10 0', items: this.theItems }
            ]
        }
        this.callParent(arguments);
    }
});


//"FilterTypes": [
//    { "Id": 1, "Name": "Multi-Select List"},
//    { "Id": 2, "Name": "Single-Select List"},
//    { "Id": 3, "Name": "Date" },
//    { "Id": 4, "Name": "Date Range"},
//    { "Id": 5, "Name": "Numeric"},
//    { "Id": 6, "Name": "Numeric Range"},
//],

Ext.define('EMSPEED.reporting.view.reportingFilterMultiSelectList', {
    extend:  EMSPEED.reporting.view.reportingFilterBaseClass ,
    alias: 'widget.reportingFilterMultiSelectList',

    setDisabledForGlobal: function (globalFilterControl) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        var multiSelectItems = this.theMultiSelectItems;
        var theGlobalFiltersObject = globalFilterControl.getFilterValuesObject();
        for (var l = 0; l < theGlobalFiltersObject.multiSelectFilterValuesSelected.length; l++) {
            var theLocalId = theGlobalFiltersObject.multiSelectFilterValuesSelected[l].filterValueId;
            // var d = multiSelectItems.items[theLocalId - 1].id + '-boxLabelEl';
            // var theD = Ext.getDom(d);
            // theD.style.color = 'red';
            multiSelectItems.items[theLocalId - 1].bodyEl.dom.style.color = 'red';
            multiSelectItems.items[theLocalId - 1].bodyEl.dom.style.fontWeight = 'bold';
            multiSelectItems.items[theLocalId - 1].bodyEl.dom.style.fontStyle = 'italic';
        }
        this.down('#' + theId + '-cbgMultiSelectList').setDisabled(true);
        var idMultiSelectList = theId + '-cbgMultiSelectList';
        var theidMultiSelectListDOM = Ext.getDom(idMultiSelectList);
        theidMultiSelectListDOM.style.opacity = .7;
    },

    setFilterValues: function (theFiltersSelectedObject) {
        var multiSelectItems = this.theMultiSelectItems;
        this.filtersSelectedId = theFiltersSelectedObject.id;
        for (var k = 0; k < multiSelectItems.items.length; k++) {
            var justTheIds = [];
            for (var l = 0; l < theFiltersSelectedObject.multiSelectFilterValuesSelected.length; l++) {
                justTheIds.push(theFiltersSelectedObject.multiSelectFilterValuesSelected[l].filterValueId);
            }

            var i = -1;
            var obj = multiSelectItems.items[k].FieldId;
            for (var j = 0; j < justTheIds.length; j++) {
                if (justTheIds[j] == obj) {
                    i = j;
                }
            }
            //var i = justTheIds.indexOf(k + 1) //indexOf not implemented in IE

            if (i != -1) {
                multiSelectItems.items[k].setValue(true);
            }
        }
    },

    clearFilterValues: function () {
        var multiSelectItems = this.theMultiSelectItems;
        for (var k = 0; k < multiSelectItems.items.length; k++) {
            multiSelectItems.items[k].setValue(false);
            try {
                multiSelectItems.items[k].bodyEl.dom.style.color = 'black';
                multiSelectItems.items[k].bodyEl.dom.style.fontWeight = 'normal';
                multiSelectItems.items[k].bodyEl.dom.style.fontStyle = 'normal';
            }
            catch (err) { } 
        }
    },

    getFilterValuesObject: function (parmId) {
        var theObject = {};
        var multiSelectItems = this.theMultiSelectItems;
        var empty = true;
        for (var k = 0; k < multiSelectItems.items.length; k++) {
            if (multiSelectItems.items[k].getValue() === true) {
                empty = false;
            }
        }
        if (empty === false) {
            theObject.selected = true
        }
        else {
            theObject.selected = false
        }
        theObject.id = parmId;
        theObject.filterTypeId = this.filtersAvailableObject.filterTypeId;
        theObject.filtersAvailableId = this.filtersAvailableId;
        theObject.filtersAvailableName = this.filtersAvailableName;
        theObject.rangeTypeSelectedId = null;
        theObject.rangeTypeSelectedName = null;
        theObject.lowerValueSelected = null;
        theObject.upperValueSelected = null;
        theObject.singleSelectFilterValueSelectedId = null;
        theObject.singleSelectFilterValueSelectedName = null;
        if (multiSelectItems.items.length === 0) {
            theObject.multiSelectFilterValuesSelected = null;
        }
        else {
            theObject.multiSelectFilterValuesSelected = [];
            var theId = 1;
            for (var k = 0; k < multiSelectItems.items.length; k++) {
                if (multiSelectItems.items[k].getValue() === true) {
                    var theItem = {};
                    var theSelectedItem = k + 1;
                    theItem.id = theId++;
                    theItem.filterValueId = multiSelectItems.items[k].FieldId;
                    theItem.filterValueName = multiSelectItems.items[k].boxLabel;
                    theObject.multiSelectFilterValuesSelected.push(theItem);
                }
            }
            if (theObject.multiSelectFilterValuesSelected.length === 0) {
                theObject.multiSelectFilterValuesSelected = null;
            }
        }
        return theObject;
    },

    initComponent: function () {
        var theGroupItems = [];
        for (var i = 0; i < this.filtersAvailableObject.filterValues.length; i++) {
            var theItemId = this.getTheItemId(this.section, this.filtersAvailableObject.name, this.filtersAvailableObject.filterValues[i].name);
            var newItem = {
                id: theItemId,
                FieldId: this.filtersAvailableObject.filterValues[i].id,
                Sequence: this.filtersAvailableObject.filterValues[i].sequence,
                listeners: {
                    scope: this,
                    change: function (me, newValue, oldValue, eOpts) {
                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                },
                boxLabel: this.filtersAvailableObject.filterValues[i].name
            };
            theGroupItems.push(newItem);
        }
        theGroupItems.sort(com.compareSequence);

        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);
        this.theItems = [
            {
                xtype: 'checkboxgroup',
                id: theId + '-cbgMultiSelectList',
                margin: '0 5 0 0',
                columns: Ext.decode(this.filtersAvailableObject.columns),
                items: theGroupItems
            }
        ];

        this.callParent(arguments);
        this.theMultiSelectItems = this.down('#' + theId + '-cbgMultiSelectList').items;
    }
});

Ext.define('EMSPEED.reporting.view.reportingFilterSingleSelectList', {
    extend:  EMSPEED.reporting.view.reportingFilterBaseClass ,
    alias: 'widget.reportingFilterSingleSelectList',

    setDisabledForGlobal: function (globalFilterControl) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        var singleSelectItems = this.theSingleSelectItems;
        var theGlobalFiltersObject = globalFilterControl.getFilterValuesObject();
        var theLocalId = theGlobalFiltersObject.singleSelectFilterValueSelectedId;
        singleSelectItems.items[theLocalId - 1].bodyEl.dom.style.color = 'red';
        singleSelectItems.items[theLocalId - 1].bodyEl.dom.style.fontWeight = 'bold';
        singleSelectItems.items[theLocalId - 1].bodyEl.dom.style.fontStyle = 'italic';
        this.down('#' + theId + '-rgpSingleSelectList').setDisabled(true);
        var idSingleSelectList = theId + '-rgpSingleSelectList';
        var theidSingleSelectListDOM = Ext.getDom(idSingleSelectList);
        theidSingleSelectListDOM.style.opacity = .7;
    },

    setFilterValues: function (theFiltersSelectedObject) {
        var singleSelectItems = this.theSingleSelectItems;
        for (var k = 0; k < singleSelectItems.items.length; k++) {
            singleSelectItems.items[k].setValue(false);
        }
        var theItemSelected = theFiltersSelectedObject.singleSelectFilterValueSelectedId - 1;
        singleSelectItems.items[theItemSelected].setValue(true);
    },

    clearFilterValues: function () {
        var singleSelectItems = this.theSingleSelectItems;
        for (var k = 0; k < singleSelectItems.items.length; k++) {
            singleSelectItems.items[k].setValue(false);
            try {
                singleSelectItems.items[k].bodyEl.dom.style.color = 'black';
                singleSelectItems.items[k].bodyEl.dom.style.fontWeight = 'normal';
                singleSelectItems.items[k].bodyEl.dom.style.fontStyle = 'normal';
            }
            catch (err) { }
        }
    },

    getFilterValuesObject: function (parmId) {
        var theObject = {};
        var singleSelectItems = this.theSingleSelectItems;
        this.filtersSelectedId = this.filtersSelectedId;
        var empty = true;
        for (var k = 0; k < singleSelectItems.items.length; k++) {
            if (singleSelectItems.items[k].getValue() === true) {
                empty = false;
            }
        }
        if (empty === false) {
            theObject.selected = true
        }
        else {
            theObject.selected = false
        }
        theObject.id = parmId;
        theObject.filterTypeId = this.filtersAvailableObject.filterTypeId;
        theObject.filtersAvailableId = this.filtersAvailableId;
        theObject.filtersAvailableName = this.filtersAvailableName;
        theObject.rangeTypeSelectedId = null;
        theObject.rangeTypeSelectedName = null;
        theObject.lowerValueSelected = null;
        theObject.upperValueSelected = null;
        if (singleSelectItems.items.length === 0) {
            theObject.singleSelectFilterValueSelectedId = null;
            theObject.singleSelectFilterValueSelectedName = null;
        }
        else {
            var theSelectedItemId = null;
            var theSelectedItemName = null;
            for (var k = 0; k < singleSelectItems.items.length; k++) {
                if (singleSelectItems.items[k].getValue() === true) {
                    theSelectedItemId = k + 1;
                    theSelectedItemName = singleSelectItems.items[k].boxLabel;
                }
            }
            theObject.singleSelectFilterValueSelectedId = theSelectedItemId;
            theObject.singleSelectFilterValueSelectedName = theSelectedItemName;
        }
        theObject.multiSelectFilterValuesSelected = null;
        return theObject;
    },

    initComponent: function () {
        var theGroupItems = [];
        for (var i = 0; i < this.filtersAvailableObject.filterValues.length; i++) {
            var theItemId = this.getTheItemId(this.section, this.filtersAvailableObject.name, this.filtersAvailableObject.filterValues[i].name);

            var newItem = {
                id: theItemId,
                FieldId: this.filtersAvailableObject.filterValues[i].id,
                Sequence: this.filtersAvailableObject.filterValues[i].sequence,
                listeners: {
                    scope: this,
                    change: function (me, newValue, oldValue, eOpts) {
                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                },
                boxLabel: this.filtersAvailableObject.filterValues[i].name,
                name: this.filtersAvailableObject.name,
                value: i + 1
            };
            theGroupItems.push(newItem);
        }
        theGroupItems.sort(com.compareSequence);

        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);
        this.theItems = [
            {
                xtype: 'radiogroup',
                id: theId + '-rgpSingleSelectList',
                margin: '0 5 0 0',
                columns: Ext.decode(this.filtersAvailableObject.columns),
                items: theGroupItems
            },
            {
                xtype: 'button',
                text: 'clear',
                listeners: {
                    scope: this,
                    click: function (me, e, eOpts) {
                        var rg = Ext.getCmp(theId + '-rgpSingleSelectList');   
                        for (var rb = 0; rb < rg.items.items.length; rb++) {
                            rg.items.items[rb].setValue(false);
                        }
                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            }
        ];

        this.callParent(arguments);
        this.theSingleSelectItems = this.down('#' + theId + '-rgpSingleSelectList').items;
    }
});

Ext.define('EMSPEED.reporting.view.reportingFilterDate', {
    extend:  EMSPEED.reporting.view.reportingFilterBaseClass ,
    alias: 'widget.reportingFilterDate',

    setDisabledForGlobal: function (globalFilterControl) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#theDetails').setDisabled(true);
        var g = this.down('#' + theId + '-globalVal');
        if (g != null) {
            this.down('#' + theId + '-globalVal').setText(globalFilterControl.getStringValue());
        }
    },

    setFilterValues: function (theFiltersSelectedObject) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.filtersSelectedId = theFiltersSelectedObject.id;
        this.down('#' + theId + '-txtDate').setValue(theFiltersSelectedObject.lowerValueSelected);
    },

    clearFilterValues: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#' + theId + '-txtDate').setValue('');
    },

    getFilterValuesObject: function (parmId) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        var theObject = {};
        var dateObj1a = this.down('#' + theId + '-txtDate').getValue();
        if (dateObj1a != null) {
            theObject.selected = true
        }
        else {
            theObject.selected = false
        }
        theObject.id = parmId;
        theObject.filterTypeId = this.filtersAvailableObject.filterTypeId;
        theObject.filtersAvailableId = this.filtersAvailableId;
        theObject.filtersAvailableName = this.filtersAvailableName;
        theObject.rangeTypeSelectedId = null;
        theObject.rangeTypeSelectedName = null;
        theObject.prefixText = this.filtersAvailableObject.prefixText;
        var dateObj1 = this.down('#' + theId + '-txtDate').getValue();
        if (dateObj1 != null) {
            var dateString1 = (dateObj1.getMonth() + 1) + '/' + dateObj1.getDate() + '/' + dateObj1.getFullYear();
            theObject.lowerValueSelected = dateString1;
        }
        else {
            theObject.lowerValueSelected = null;
        }
        theObject.upperValueSelected = null;
        theObject.singleSelectFilterValueSelectedId = null;
        theObject.multiSelectFilterValuesSelected = null;
        return theObject;
    },

    initComponent: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.theItems = [
            { xtype: 'label', id: theId + '-lblPrefixText', cls: 'x-form-item', margin: this.theTextMargin, text: this.filtersAvailableObject.prefixText },
            { xtype: 'datefield', editable: false, id: theId + '-txtDate', width: 100, margin: this.theControlMargin,
                listeners: {
                    scope: this,
                    change: function (me, newValue, oldValue, eOpts) {
                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            },
            {
                xtype: 'button',
                text: 'clear',
                listeners: {
                    scope: this,
                    click: function (me, e, eOpts) {

                        Ext.getCmp(theId + '-txtDate').setValue('');

                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            },

            { xtype: 'label', id: theId + '-globalVal', width: 300, margin: this.theTextMargin, style: { color: 'red'} }
        ];
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.reporting.view.reportingFilterDateRange', {
    extend:  EMSPEED.reporting.view.reportingFilterBaseClass ,
    alias: 'widget.reportingFilterDateRange',

    setDisabledForGlobal: function (globalFilterControl) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#theDetails').setDisabled(true);
        var g = this.down('#' + theId + '-globalVal');
        if (g != null) {
            this.down('#' + theId + '-globalVal').setText(globalFilterControl.getStringValue());
        }
    },

    setFilterValues: function (theFiltersSelectedObject) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.filtersSelectedId = theFiltersSelectedObject.id;
        this.down('#' + theId + '-txtDate1').setValue(theFiltersSelectedObject.lowerValueSelected);
        this.down('#' + theId + '-txtDate2').setValue(theFiltersSelectedObject.upperValueSelected);
        this.down('#' + theId + '-cbxRangeType').setValue(theFiltersSelectedObject.rangeTypeSelectedId);
    },

    clearFilterValues: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#' + theId + '-txtDate1').setValue('');
        this.down('#' + theId + '-txtDate2').setValue('');
        this.down('#' + theId + '-cbxRangeType').setValue(7);
    },

    getFilterValuesObject: function (parmId) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        var theObject = {};
        var dateObj1a = this.down('#' + theId + '-txtDate1').getValue();
        if (dateObj1a != null) {
            theObject.selected = true
        }
        else {
            theObject.selected = false
        }
        theObject.id = parmId;
        theObject.filterTypeId = this.filtersAvailableObject.filterTypeId;
        theObject.filtersAvailableId = this.filtersAvailableId;
        theObject.filtersAvailableName = this.filtersAvailableName;
        theObject.rangeTypeSelectedId = this.down('#' + theId + '-cbxRangeType').getValue();
        theObject.rangeTypeSelectedName = this.down('#' + theId + '-cbxRangeType').getRawValue();
        theObject.prefixText = 'is';
        var dateObj1 = this.down('#' + theId + '-txtDate1').getValue();
        if (dateObj1 != null) {
            var dateString1 = (dateObj1.getMonth() + 1) + '/' + dateObj1.getDate() + '/' + dateObj1.getFullYear();
            theObject.lowerValueSelected = dateString1;
        }
        else {
            theObject.lowerValueSelected = null;
        }
        var dateObj2 = this.down('#' + theId + '-txtDate2').getValue();
        if (dateObj2 != null) {
            var dateString2 = (dateObj2.getMonth() + 1) + '/' + dateObj2.getDate() + '/' + dateObj2.getFullYear();
            theObject.upperValueSelected = dateString2;
        }
        else {
            theObject.upperValueSelected = null;
        }
        theObject.singleSelectFilterValueSelectedId = null;
        theObject.multiSelectFilterValuesSelected = null;
        return theObject;
    },

    initComponent: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);
        this.theItems = [
            { xtype: 'label', xwidth: 20, cls: 'x-form-item', margin: this.theTextMargin, text: 'is' },
            {
                xtype: 'combobox',
                id: theId + '-cbxRangeType',
                margin: this.theControlMargin,
                width: 180,
                valueField: 'id',
                displayField: 'name',
                queryMode: 'local',
                store: Ext.create('Ext.data.Store', {
                    fields: ['id', 'name'],
                    data: this.rangeTypes
                }),
                value: 7,
                listeners: {
                    scope: this,
                    change: function (object, newValue, oldValue, eOpts) {
                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                        if (newValue === 5 || newValue === 6) {
                            object.up('container').down('#' + theId + '-lblAnd').show();
                            object.up('container').down('#' + theId + '-txtDate2').show();
                        }
                        else {
                            Ext.getCmp(theId + '-globalVal').setText('');
                            object.up('container').down('#' + theId + '-txtDate2').setValue('');
                            object.up('container').down('#' + theId + '-lblAnd').hide();
                            object.up('container').down('#' + theId + '-txtDate2').hide();
                        }
                    }
                }
            },
            { xtype: 'datefield', editable: false, id: theId + '-txtDate1', width: 100, margin: this.theControlMargin,
                listeners: {
                    scope: this,
                    change: function (me, newValue, oldValue, eOpts) {

                        var theValue = newValue;
                        if (theValue != '' && theValue != null) {
                            var theOtherValue = Ext.getCmp(theId + '-txtDate2').getValue();
                            if (theOtherValue != '' && theOtherValue != null) {
                                if (theValue >= theOtherValue) {
                                    alert('First date must be less than second date');
                                    me.setValue('');
                                }
                            }
                        }

                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            },
            { xtype: 'label', id: theId + '-lblAnd', cls: 'x-form-item', margin: this.theTextMargin, text: 'and' },
            { xtype: 'datefield', editable: false, id: theId + '-txtDate2', width: 100, margin: this.theControlMargin,
                theSection: this.section,
                listeners: {
                    change: function (me, newValue, oldValue, eOpts) {

                        var theValue = newValue;
                        if (theValue != '' && theValue != null) {
                            var theOtherValue = Ext.getCmp(theId + '-txtDate1').getValue();
                            if (theOtherValue != '' && theOtherValue != null) {
                                if (theOtherValue >= theValue) {
                                    alert('First date must be less than second date');
                                    me.setValue('');
                                }
                            }
                        }

                        if (this.theSection === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            },
            {
                xtype: 'button',
                text: 'clear',
                listeners: {
                    scope: this,
                    click: function (me, e, eOpts) {

                        Ext.getCmp(theId + '-txtDate1').setValue('');
                        Ext.getCmp(theId + '-txtDate2').setValue('');

                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            },

            { xtype: 'label', id: theId + '-globalVal', width: 300, margin: this.theTextMargin, style: { color: 'red'} }
        ]

        this.callParent(arguments);

        if (this.rangeTypeId === 5 || this.rangeTypeId === 6) {
            this.down('#' + theId + '-lblAnd').show();
            this.down('#' + theId + '-txtDate2').show();
        }
        else {
            this.down('#' + theId + '-lblAnd').hide();
            this.down('#' + theId + '-txtDate2').hide();
        }
    }
});

Ext.define('EMSPEED.reporting.view.reportingFilterNumeric', {
    extend:  EMSPEED.reporting.view.reportingFilterBaseClass ,
    alias: 'widget.reportingFilterNumeric',

    setDisabledForGlobal: function (globalFilterControl) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#theDetails').setDisabled(true);
        var g = this.down('#' + theId + '-globalVal');
        if (g != null) {
            this.down('#' + theId + '-globalVal').setText(globalFilterControl.getStringValue());
        }
    },

    setFilterValues: function (theFiltersSelectedObject) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.filtersSelectedId = theFiltersSelectedObject.id;
        this.down('#' + theId + '-txtNumber').setValue(theFiltersSelectedObject.lowerValueSelected);
    },

    clearFilterValues: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#' + theId + '-txtNumber').setValue('');
    },

    getFilterValuesObject: function (parmId) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        var theObject = {};
        var theNumber = this.down('#' + theId + '-txtNumber').getValue();
        if (theNumber != '') {
            theObject.selected = true
        }
        else {
            theObject.selected = false
        }
        theObject.id = parmId;
        theObject.filterTypeId = this.filtersAvailableObject.filterTypeId;
        theObject.filtersAvailableId = this.filtersAvailableId;
        theObject.filtersAvailableName = this.filtersAvailableName;
        theObject.rangeTypeSelectedId = null;
        theObject.rangeTypeSelectedName = null;
        theObject.prefixText = this.filtersAvailableObject.prefixText;
        var numObj1 = this.down('#' + theId + '-txtNumber').getValue();
        if (numObj1 === '') {
            theObject.lowerValueSelected = null;
        }
        else {
            theObject.lowerValueSelected = theNumber;
        }
        theObject.upperValueSelected = null;
        theObject.singleSelectFilterValueSelectedId = null;
        theObject.multiSelectFilterValuesSelected = null;
        return theObject;
    },

    initComponent: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.theItems = [
            { xtype: 'label', id: theId + '-lblPrefixText', cls: 'x-form-item', margin: this.theTextMargin, text: this.filtersAvailableObject.prefixText },
            { xtype: 'textfield', id: theId + '-txtNumber', margin: this.theControlMargin, width: 40, enableKeyEvents: true,
                listeners: {
                    scope: this,
                    //                    change: function (me, newValue, oldValue, eOpts) {
                    //                        var theValue = newValue;
                    blur: function (me, event, eOpts) {
                        var theValue = me.getValue();
                        if (theValue != '') {

                            var intRegex = /^\d+$/;
                            if (!intRegex.test(theValue)) {
                                alert('Only integer values are allowed');
                                me.setValue('');
                            }

                            if (this.filtersAvailableObject.lowerBoundary != null) {
                                if (theValue < this.filtersAvailableObject.lowerBoundary) {
                                    alert('Value cannot be less than ' + this.filtersAvailableObject.lowerBoundary);
                                    me.setValue('');
                                }
                            }
                            if (this.filtersAvailableObject.upperBoundary != null) {
                                if (theValue > this.filtersAvailableObject.upperBoundary) {
                                    alert('Value cannot be greater than ' + this.filtersAvailableObject.upperBoundary);
                                    me.setValue('');
                                }
                            }

                        }
                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                    }
                }
            },
            { xtype: 'label', id: theId + '-globalVal', width: 300, margin: this.theTextMargin, style: { color: 'red'} }
        ];
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.reporting.view.reportingFilterNumericRange', {
    extend:  EMSPEED.reporting.view.reportingFilterBaseClass ,
    alias: 'widget.reportingFilterNumericRange',

    setDisabledForGlobal: function (globalFilterControl) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#theDetails').setDisabled(true);
        var g = this.down('#' + theId + '-globalVal');
        if (g != null) {
            this.down('#' + theId + '-globalVal').setText(globalFilterControl.getStringValue());
        }
    },

    setFilterValues: function (theFiltersSelectedObject) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.filtersSelectedId = theFiltersSelectedObject.id;
        this.down('#' + theId + '-txtNumber1').setValue(theFiltersSelectedObject.lowerValueSelected);
        this.down('#' + theId + '-txtNumber2').setValue(theFiltersSelectedObject.upperValueSelected);
        this.down('#' + theId + '-cbxRangeType').setValue(theFiltersSelectedObject.rangeTypeSelectedId);
    },

    clearFilterValues: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        this.down('#' + theId + '-txtNumber1').setValue('');
        this.down('#' + theId + '-txtNumber2').setValue('');
        this.down('#' + theId + '-cbxRangeType').setValue(7);
    },

    getFilterValuesObject: function (parmId) {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);

        var theObject = {};
        var theNumber = this.down('#' + theId + '-txtNumber1').getValue();
        if (theNumber != '') {
            theObject.selected = true
        }
        else {
            theObject.selected = false
        }
        theObject.id = parmId;
        theObject.filterTypeId = this.filtersAvailableObject.filterTypeId;
        theObject.filtersAvailableId = this.filtersAvailableId;
        theObject.filtersAvailableName = this.filtersAvailableName;
        theObject.prefixText = 'is';
        theObject.rangeTypeSelectedId = this.down('#' + theId + '-cbxRangeType').getValue();
        theObject.rangeTypeSelectedName = this.down('#' + theId + '-cbxRangeType').getRawValue();
        var numObj1 = this.down('#' + theId + '-txtNumber1').getValue();
        if (numObj1 != null) {
            if (numObj1 != '') {
                theObject.lowerValueSelected = numObj1;
            }
            else {
                theObject.lowerValueSelected = null;
            }
        }
        else {
            theObject.lowerValueSelected = null;
        }
        var numObj2 = this.down('#' + theId + '-txtNumber2').getValue();
        if (numObj2 != null) {
            if (numObj2 != '') {
                theObject.upperValueSelected = numObj2;
            }
            else {
                theObject.upperValueSelected = null;
            }
        }
        else {
            theObject.upperValueSelected = null;
        }
        theObject.singleSelectFilterValueSelectedId = null;
        theObject.multiSelectFilterValuesSelected = null;
        return theObject;
    },

    checkTextFields: function (me, field1, field2, errorField) {
        if (field1 == undefined) { return; }
        if (field2 == undefined) { return; }
        var field1Value = field1.getValue();
        var field2Value = field2.getValue();
        if (field1Value === '' && field2Value === '') {
            errorField.setText('');
            Ext.getCmp('btnFiltersOk').setDisabled(false);
            return;
        }
        var intRegex = /^\d+$/;
        if (field2.isHidden() === false) {
            if (intRegex.test(field1Value) === false || intRegex.test(field2Value) === false) {
                errorField.setText('Integer values only (no blanks)');
                return;
            }
        }
        else {
            if (intRegex.test(field1Value) === false) {
                errorField.setText('Only integer values are allowed');
                return;
            }
        }
        if (field2.isHidden() === false) {
            if (isNaN(field1Value) === true || isNaN(field2Value) === true) {
                errorField.setText('Only numeric values are allowed');
                return;
            }
        }
        else {
            if (isNaN(field1Value) === true) {
                errorField.setText('Only numeric values are allowed');
                return;
            }
        }
        if (me.filtersAvailableObject.lowerBoundary != null) {
            if (parseInt(field1Value) < me.filtersAvailableObject.lowerBoundary) {
                errorField.setText('Field 1 value cannot be less than ' + me.filtersAvailableObject.lowerBoundary);
                return;
            }
        }
        if (field2.isHidden() === true) {
            if (me.filtersAvailableObject.upperBoundary != null) {
                if (parseInt(field1Value) > me.filtersAvailableObject.upperBoundary) {
                    errorField.setText('Field 1 value cannot be greater than ' + me.filtersAvailableObject.upperBoundary);
                    return;
                }
            }
        }
        if (field2.isHidden() === false) {
            if (me.filtersAvailableObject.upperBoundary != null) {
                if (parseInt(field2Value) > me.filtersAvailableObject.upperBoundary) {
                    errorField.setText('Field 2 value cannot be greater than ' + me.filtersAvailableObject.upperBoundary);
                    return;
                }
            }
            if (parseInt(field1Value) >= parseInt(field2Value)) {
                errorField.setText('First value must be less than second value');
                return;
            }
        }
        if (me.section === 'global') {
            reporting.setChangedMessage();
        }
        errorField.setText('');
        Ext.getCmp('btnFiltersOk').setDisabled(false);
    },

    initComponent: function () {
        var theId = this.getTheId(this.section, this.filtersAvailableObject.name);
        this.theItems = [
            { xtype: 'label', cls: 'x-form-item', margin: this.theTextMargin, text: 'is' },
            {
                xtype: 'combobox',
                id: theId + '-cbxRangeType',
                margin: this.theControlMargin,
                width: 180,
                valueField: 'id',
                displayField: 'name',
                queryMode: 'local',
                store: Ext.create('Ext.data.Store', {
                    fields: ['id', 'name'],
                    data: this.rangeTypes
                }),
                value: 7,
                listeners: {
                    scope: this,
                    change: function (object, newValue, oldValue, eOpts) {

                        if (this.section === 'global') {
                            reporting.setChangedMessage();
                        }
                        if (newValue === 5 || newValue === 6) {
                            object.up('container').down('#' + theId + '-lblAnd').show();
                            object.up('container').down('#' + theId + '-txtNumber2').show();
                        }
                        else {
                            Ext.getCmp(theId + '-globalVal').setText('');
                            object.up('container').down('#' + theId + '-txtNumber2').setValue('');
                            object.up('container').down('#' + theId + '-lblAnd').hide();
                            object.up('container').down('#' + theId + '-txtNumber2').hide();
                        }
                    }
                }
            },
            { xtype: 'textfield', id: theId + '-txtNumber1', width: 40, margin: this.theControlMargin, enableKeyEvents: true,
                listeners: {
                    scope: this,
                    keyup: function (control, e, eOpts) {
                        Ext.getCmp('btnFiltersOk').setDisabled(true);
                        this.checkTextFields(this, control, Ext.getCmp(theId + '-txtNumber2'), Ext.getCmp(theId + '-globalVal'));
                    }
                }
            },
            { xtype: 'label', id: theId + '-lblAnd', cls: 'x-form-item', margin: this.theTextMargin, text: 'and' },
            { xtype: 'textfield', id: theId + '-txtNumber2', width: 40, margin: this.theControlMargin, enableKeyEvents: true,
                listeners: {
                    scope: this,
                    keyup: function (control, e, eOpts) {
                        Ext.getCmp('btnFiltersOk').setDisabled(true);
                        this.checkTextFields(this, Ext.getCmp(theId + '-txtNumber1'), control, Ext.getCmp(theId + '-globalVal'));
                    }
                }
            },
            { xtype: 'label', id: theId + '-globalVal', width: 300, margin: this.theTextMargin, style: { color: 'red'} }
        ];

        this.callParent(arguments);
        if (this.rangeTypeId === 5 || this.rangeTypeId === 6) {
            this.down('#lblAnd').show();
            this.down('#' + theId + '-txtNumber2').show();
        }
        else {
            this.down('#' + theId + '-lblAnd').hide();
            this.down('#' + theId + '-txtNumber2').hide();
        }
    }
});

Ext.define('EMSPEED.reporting.controller.reportingFiltersController', {
    extend:  Ext.app.Controller ,
               
                                                  
                                                          
                                                                
                                                                 
                                                     
                                                          
                                                        
                                                            
      

    init: function () {
        reporting.filters = this;
        reporting.quickTips();

        this.control({
            '#reportingFilters': { activate: this.reportingFilters_activate },
            '#btnFiltersOk': { click: this.btnFiltersOk_click },
            '#btnFiltersCancel': { click: this.btnFiltersCancel_click }
        });
    },

    reportingFilters_activate: function (me, e, eOpts) {
        try {
            if (me.title != undefined) {
                return;
            }
            me.setLoading('Loading...');
            me.rec = me.grid.store.getAt(me.rowIndex);
            var sectionName = me.rec.get('name');

            var filterRowTitleWidth = me.rec.get('filterRowTitleWidth');

            me.setTitle('Edit The ' + sectionName + ' Section Filters');
            me.sectionFiltersAvailable = me.rec.get('sectionFiltersAvailable'); // the total available
            me.sectionFiltersSelected = me.rec.get('sectionFiltersSelected');   // the user selections
            me.filterControls = this.getAllFilterControls('local', me.sectionFiltersAvailable, sectionName, filterRowTitleWidth);

            var theFiltersContainer = me.down('#reportingFiltersContainer');
            theFiltersContainer.add(me.filterControls);

            this.setValuesForAllFilters(theFiltersContainer, me.sectionFiltersSelected, me.sectionFiltersAvailable, sectionName);

            this.checkFiltersForGlobal(theFiltersContainer);

            me.setLoading(false);
            Ext.getCmp('reportingBasePanel').setLoading(false);
        }
        catch (err) {
            me.setLoading(false);
            Ext.getCmp('reportingBasePanel').setLoading(false);
            me.close();
            com.showErrorFromTry2(err);
        }
    },

    btnFiltersOk_click: function (object, e, eOpts) {
        var theParent = object.up('window');
        var sectionFiltersSelected = this.getFilterValues(theParent.down('#reportingFiltersContainer'));
        var a = Ext.encode(sectionFiltersSelected);
        var b = Ext.encode(theParent.sectionFiltersSelected);
        if (a != b) {
            theParent.rec.set('sectionFiltersSelected', sectionFiltersSelected);
        }

        reporting.setChangedMessage();
        reporting.drawSummary(theParent.grid.store.data.items);

        Ext.getCmp('reportingBasePanel').setLoading(false);
        theParent.close();
    },

    btnFiltersCancel_click: function (object, e, eOpts) {
        var theParent = object.up('window');
        Ext.getCmp('reportingBasePanel').setLoading(false);
        theParent.close();
    },

    getAllFilterControls: function (localOrGlobal, filtersAvailable, theSection, filterRowTitleWidth) {
        var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
        var theFilterControls = [];
        var filterWidget = null;
        var filtersAvailableSorted = filtersAvailable.sort(com.compareSequence);
//        for (var r = filtersAvailableSorted.length - 1; r >= 0; r--) {
        for (var r = 0;  r < filtersAvailableSorted.length; r++) {
            if (filtersAvailableSorted[r].enabled === true && filtersAvailableSorted[r].visible != false) {
                switch (filtersAvailableSorted[r].filterTypeId) {
                    case 1: //'Multi-Select List'
                        filterWidget = Ext.create("EMSPEED.reporting.view.reportingFilterMultiSelectList", { localOrGlobal: localOrGlobal, filtersAvailableObject: filtersAvailableSorted[r], section: theSection, filterRowTitleWidth: filterRowTitleWidth });
                        break;
                    case 2: //'Single-Select List'    
                        filterWidget = Ext.create("EMSPEED.reporting.view.reportingFilterSingleSelectList", { localOrGlobal: localOrGlobal, filtersAvailableObject: filtersAvailableSorted[r], section: theSection, filterRowTitleWidth: filterRowTitleWidth });
                        break;
                    case 3: //'Date'    
                        filterWidget = Ext.create("EMSPEED.reporting.view.reportingFilterDate", { localOrGlobal: localOrGlobal, filtersAvailableObject: filtersAvailableSorted[r], section: theSection, filterRowTitleWidth: filterRowTitleWidth });
                        break;
                    case 4: //'Date Range'    
                        filterWidget = Ext.create("EMSPEED.reporting.view.reportingFilterDateRange", { localOrGlobal: localOrGlobal, filtersAvailableObject: filtersAvailableSorted[r], section: theSection, rangeTypes: DetailPanel.masterLayout.rangeTypes, filterRowTitleWidth: filterRowTitleWidth });
                        break;
                    case 5: //'Numeric'    
                        filterWidget = Ext.create("EMSPEED.reporting.view.reportingFilterNumeric", { localOrGlobal: localOrGlobal, filtersAvailableObject: filtersAvailableSorted[r], section: theSection, filterRowTitleWidth: filterRowTitleWidth });
                        break;
                    case 6: //'Numeric Range'    
                        filterWidget = Ext.create("EMSPEED.reporting.view.reportingFilterNumericRange", { localOrGlobal: localOrGlobal, filtersAvailableObject: filtersAvailableSorted[r], section: theSection, rangeTypes: DetailPanel.masterLayout.rangeTypes, filterRowTitleWidth: filterRowTitleWidth });
                        break;
                    default:
                        break;
                }
                //theFilterControls.splice(1, 0, filterWidget);
                theFilterControls.push(filterWidget);
            }
            else {
                //alert(filtersAvailable[r].name + '-' + filtersAvailable[r].enabled + '-' + filtersAvailable[r].visible);
            }
        }
        //theFilterControls.sort(com.compareSequence);
        return theFilterControls;
    },

    setValuesForAllFilters: function (theFilterContainer, theFiltersSelected) {
        this.shouldIgnoreChangeEvents = true;
        this.clearFilters(theFilterContainer);

        var theFilterControls = theFilterContainer.items.items;
        for (var i = 0; i < theFilterControls.length; i++) {
            var index = -1;
            for (var j = 0; j < theFiltersSelected.length; j++) {
                if (theFiltersSelected[j].filtersAvailableId === theFilterControls[i].filtersAvailableId) {
                    index = j;
                }
            }
            if (index > -1) {
                theFilterControls[i].setFilterValues(theFiltersSelected[index]);
            }
        }
        this.shouldIgnoreChangeEvents = false;
    },

    checkFiltersForGlobal: function (theFiltersContainer) {
        var globalFilters = Ext.getCmp('globalFiltersParentContainer').items.items;
        var localFilters = theFiltersContainer.items.items;
        for (var i = 0; i < localFilters.length; i++) {
            for (var j = 0; j < globalFilters.length; j++) {
                if (localFilters[i].globalFilterId === globalFilters[j].filtersAvailableId) {
                    //alert('the same ' + globalFilters[j].filtersAvailableName + ' and ' + localFilters[i].filtersAvailableName);
                    var theGlobalFilterObject = globalFilters[j].getFilterValuesObject(j);
                    if (theGlobalFilterObject.selected === true) {
                        localFilters[i].setDisabledForGlobal(globalFilters[j]);
                    }
                }
            }
        }
    },

    getFilterValues: function (theFiltersContainer) {
        var theFiltersItems = theFiltersContainer.items.items;
        var filtersSelected = [];
        for (var i = 0; i < theFiltersItems.length; i++) {
            var theObject = theFiltersItems[i].getFilterValuesObject(i);
            if (theObject.selected === true) {
                filtersSelected.push(theObject);
            }
        }
        return filtersSelected;
    },

    clearFilters: function (theFilterContainer) {
        var theFilterControls = theFilterContainer.items.items;
        for (var i = 0; i < theFilterControls.length; i++) {
            theFilterControls[i].clearFilterValues();
        }
    }

});

Ext.define('EMSPEED.reporting.view.reportingInteractiveDetailPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingInteractiveDetailPanel',
    id: 'reportingInteractiveDetailPanel',
    itemId: 'reportingInteractiveDetailPanel',
    layout: 'vbox',
    title: 'Interactive Report',
    header: false,
    border: false,
    bodyBorder: false,
    bodyPadding: '0 0 0 0',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 290,
        anchor: '100%'
    },
    items: [
        {
            xtype: 'reportingProgramProjects'
        },
        {
            xtype: 'button',
            itemId: 'btnLogInteractiveReportRequest',
            margin: '8 0 0 10',
            text: 'Launch Interactive Reporting'
        }
    ],

    dockedItems: [
        {
            xtype: 'toolbar', dock: 'top',
            style: {
                    top: 0,
                left: 0,
                borderWidth: '1px',
                padding: '0 0 0 0'
            },
            items: [
                {
                    xtype: 'button',
                    margin: '0 0 10 0',
                    style: {
                        top: 0
                    },
                    id: 'btnInteractiveBack',
                    text: '&laquo; Back'
                }
            ]
        }
    ]

});

Ext.define('EMSPEED.stature.view.statureBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.statureBasePanel',
    id: 'statureBasePanel',


    getReportType: function (sUrl) {
        debugger;
        var sPrefixStart = "?/Reports/",
            iPrefixStart = sUrl.indexOf(sPrefixStart),
            start = iPrefixStart + sPrefixStart.length,
            sString = sUrl.substring(start),
            sPrefixEnd = '&',
            iPrefixEnd = sString.indexOf(sPrefixEnd),
            sValue = sString.substring(0, iPrefixEnd);
        return sValue;
    },



    initComponent: function () {
        var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
        var eventer = window[eventMethod];
        var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

        eventer(messageEvent, function (e) {
//            debugger;
            console.log('parent received message!:  ', e.data);

            var reportType = Ext.getCmp('statureBasePanel').getReportType(e.data);
            var theCharm = '';
            switch(reportType)
            {
                case 'Mock-Requirements':
                    theCharm = 'Requirements'
                    break;
                case 'Mock-SpecificationByPhysicalArchitecture':
                    theCharm = 'PAE'
                    break;
                default:
                    theCharm = 'Requirements'
            }


            Ext.getCmp('frame' + theCharm).setSrc(e.data);
            Ext.getCmp('statureBasePanel').layout.setActiveItem(theCharm);

            
            //panel.setSrc('http://www.sencha.com');
            //* panel.reset();
            //* panel.reload();
            //* panel.getSrc();
            //* panel.update('<div><b>Some Content....</b></div>');
            //* panel.destroy();




            //nextUrl(e.data, "inter02");
            //nextUrl('http://emspeed-devdb' + e.data.substring(3), "inter02");
            //var fr = document.getElementById("inter01");
            //fr.style.display = "none";

            //Ext.getCmp('btnInterPrev').setDisabled(false);
            //Ext.getCmp('btnInterNext').setDisabled(true);
        }, false);
        this.callParent(arguments);

    },




    layout:'card',
    activeItem: 0, // index or id
    dockedItems: [
                {
                    xtype: 'container',
                    html: '<div class="interactive">' +
                            '<table>' +
                                '<tr>' +
                                    '<td class="gradient"><div class="">PMT</div></td>' +
                                    '<td class="gradient"><div>Requirements</div></td>' +
                                    '<td class="gradient"><div>PAE</div></td>' +
                                    '<td class="gradient"><div>Specifications</div></td>' +
                                    '<td class="gradient"><div>Risks</div></td>' +
                                    '<td class="gradient"><div>Tests</div></td>' +
                                    '<td class="gradient"><div>Specifications</div></td>' +
                                    '<td class="gradient"><div>Risks</div></td>' +
                                    '<td class="gradient"><div>Tests</div></td>' +
                                '</tr>' +
                            '</table>' +
                        '</div>',
                    dock: 'bottom'
                }
    ],
   /* bbar: [
        {
            text: 'PMT',
            width: 100,
            handler: function () {
                this.up('panel').layout.setActiveItem(this.text);
            }
        },
        {
            text: 'Requirements',
            width: 100,
            handler: function () {
                this.up('panel').layout.setActiveItem(this.text);
            }
        },
        {
            text: 'PAE', //Physical Architecture Elements
            width: 100,
            handler: function () {
                this.up('panel').layout.setActiveItem(this.text);
            }
        },
        {
            text: 'Specifications',
            width: 100,
            handler: function () {
                this.up('panel').layout.setActiveItem(this.text);
            }
        },
        {
            text: 'Risks',
            width: 100,
            handler: function () {
                this.up('panel').layout.setActiveItem(this.text);
            }
        },
        {
            text: 'Tests',
            width: 100,
            handler: function () {
                this.up('panel').layout.setActiveItem(this.text);
            }
        }
    ],*/
    items: [
        {
            id: 'framePMT',
            itemId: 'PMT',
            xtype: 'simpleIframe'
            //src: 'http://emspeed-devdb.nam.slb.com/ReportServer/Pages/ReportViewer.aspx?/Reports/Mock-PMT&rs:Command=Render&rc:parameters=false&contextId=97476',
            //src: 'http://emspeed-devdb/Reports/Pages/Report.aspx?ItemPath=/Reports/003-PMT-XLSxMHTML"http://emspeed-devdb/Reports/Pages/Report.aspx?ItemPath=%2fReports%2f003-PMT-XLSxMHTML'
        },
        {
            id: 'frameRequirements',
            itemId: 'Requirements',
            xtype: 'simpleIframe'
        },
        {
            id: 'framePAE',
            itemId: 'PAE',
            //html: 'PAE'
            xtype: 'simpleIframe'
        },
        {
            id: 'frameSpecifications',
            itemId: 'Specifications',
            html: 'Specifications'
            //xtype: 'simpleIframe'
        },
        {
            id: 'frameRisks',
            itemId: 'Risks',
            html: 'Risks'
            //xtype: 'simpleIframe'
        },
        {
            id: 'frameTests',
            itemId: 'Tests',
            html: 'Tests'
            //xtype: 'simpleIframe'
        }
    ]
       





//    initComponent: function () {
//        this.items = [
//            { xtype: 'image', src: project.imagesFolder + 'wireframes/summarydetail.png' }


////            {
////                height: '100%',
////                xtype: 'simpleIframe',
////                deferredRender: true,
////                //id: 'simpleIframe',
////                //src: 'http://localhost:214/LoadSLBStudy.htm'
////                //src: 'http://emspeed1.nam.slb.com/stature/control/loadSlbStudyRedirected?versionId=1000013001&viewName=Requirement&defaultRowId=1000109113&ignoreViewGroup=true'
////                //src: 'http://emspeed1.nam.slb.com/stature/control/loadSlbStudyRedirected?versionId=1000011036&viewName=RiskRegister&defaultRowId=1000100675&ignoreViewGroup=true'
////                //src: 'http://emspeed1.nam.slb.com/stature/control/loadSlbStudy?versionId=1000013001&viewName=RiskRegister&defaultRowId=1000130053&ignoreViewGroup=true'
////                //src: 'http://emspeed.dev.slb.com/stature/control/loadSlbStudyRedirected?versionId=1000132005&viewName=RiskRegister&defaultRowId=1007979022&ignoreViewGroup=true'
////            }        
//        ];
//        this.callParent(arguments);
//        this.setTheTitle('PDD Summary');
//    }
});

Ext.define('EMSPEED.reporting.controller.reportingInteractiveController', {
    extend:  Ext.app.Controller ,
               
                                                         

                                                                 
                                                          
                                               
      

    init: function () {
        this.control({
            '#reportingInteractiveDetailPanel': { activate: this.reportingInteractiveDetailPanel_activate },
            '#btnLogInteractiveReportRequest': { click: this.btnLogInteractiveReportRequest_click },
            '#btnInteractiveBack': { click: this.btnInteractiveBack_click },
            '#reportingProgramProjects > reportingProgramProjectTreeGrid': { checkchange: this.reportingInteractiveProgramProjectTreeGrid_checkchange },
            '#reportingInteractiveDetailPanel > reportingProgramProjects > reportingProgramProjectTreeGrid > reportingProgramProjectTreeGridToolbar > button': { toggle: this.btnInteractiveProgramProjectAllClear_toggle }
        });
    },

    reportingInteractiveDetailPanel_activate: function (panel, e, eOpts) {
        Ext.getCmp('reportingBasePanel').setLoading('Working...');
        var reportingProgramProjects = Ext.getCmp('reportingInteractiveDetailPanel').down('reportingProgramProjects');;
        var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
        var cbxRiskThreshold = reportingProgramProjects.down('combobox');

        var getMasterLayoutParms = { "reportTypeId": reporting.selectedReportType.data.id, "contextId": com.getProjectId() };
        Ext.Ajax.request({
            url: reporting.getMasterLayoutUrl,
            method: reporting.getMasterLayoutMethod,
            withCredentials: com.usesWithCredentials,
            scope: this,
            jsonData: getMasterLayoutParms,
            success: function (response, opts) {
                var DetailPanel = Ext.getCmp('reportingInteractiveDetailPanel');
                var response = Ext.decode(response.responseText);
                DetailPanel.masterLayout = response;

                if (DetailPanel.masterLayout.project.timeSpanFromLastUpdate === null) {
                    com.showErrorFromTry2('This project is not yet available on the EMSPEED portal.');
                    Ext.getCmp('reportingBasePanel').setLoading(false);
                }
                else 
                {
                        var testStore = Ext.create('Ext.data.TreeStore', {
                            model: 'EMSPEED.reporting.model.reportingProjectsModel',
                            defaultRootProperty: 'projects',
                            proxy: {
                                type: 'memory',
                                data: DetailPanel.masterLayout.projects,
                                reader: {
                                    type: 'json',
                                    root: 'projects'
                                }
                            },
                            root:
                            {
                                expanded: true
                            }
                        });

                        reportingProgramProjectTreeGrid.bindStore(testStore);

                        cbxRiskThreshold.store = Ext.create('Ext.data.Store', {
                            fields: ['id', 'name', 'color', 'image','lowerBoundary', 'upperBoundary', 'sequence'],
                            data: DetailPanel.masterLayout.riskThresholds
                        });

                        reportingProgramProjectTreeGrid.getRootNode().cascadeBy(function () {
                            this.set('checked', true);
                        });

                        Ext.getCmp('reportingBasePanel').setLoading(false);

                 }
            },
            failure: function (response, opts) {
                com.showError(response, opts);
                Ext.getCmp('reportingBasePanel').setLoading(false);
            }
        });
    },

    btnLogInteractiveReportRequest_click: function (button, e, eOpts) {
        Ext.getCmp('reportingBasePanel').setLoading('Working...');

        var theObject = {};
        var DetailPanel = Ext.getCmp('reportingInteractiveDetailPanel');
        var configuration = this.getConfigurationObjectForSave(DetailPanel.masterLayout.reportTypeId, DetailPanel.masterLayout.reportTypeName, DetailPanel.masterLayout.project);

        var logInteractiveReportRequestObject = {};
        logInteractiveReportRequestObject.contextId = com.getProjectId();
        logInteractiveReportRequestObject.siteRoot = 'n/a';
        logInteractiveReportRequestObject.reportTitle = 'Interactive Report';
        logInteractiveReportRequestObject.fileFormatId = 1; //Dummy Value, fileFormatId not needed
        logInteractiveReportRequestObject.reportTypeId = DetailPanel.masterLayout.reportTypeId;
        logInteractiveReportRequestObject.dfxTargetCdpEvent = DetailPanel.masterLayout.project.targetCdpMilestoneName,
        logInteractiveReportRequestObject.pddNextCdpEvent = DetailPanel.masterLayout.pddNextCdpEvent,
        logInteractiveReportRequestObject.reportTypeName = DetailPanel.masterLayout.reportTypeName;
        logInteractiveReportRequestObject.generateSnapshot = false;
        logInteractiveReportRequestObject.zippedFile = false;
        logInteractiveReportRequestObject.configurationId = 0;
        logInteractiveReportRequestObject.configuration = configuration;

        theObject.reportRequest = logInteractiveReportRequestObject;

        Ext.Ajax.request({
            url: reporting.logInteractiveReportRequestUrl,
            method: reporting.logInteractiveReportRequestMethod,
            withCredentials: com.usesWithCredentials,
            scope: this,
            jsonData: theObject,
            success: function (response, opts) {

                var theItems = Ext.getCmp('projectApplication').items.items;
                var interactiveBasePanel = 'interactiveBasePanel';
                var found = false;
                for (var i = 0; i < theItems.length; i++) {
                    if (interactiveBasePanel === theItems[i].xtype) {
                        found = true;
                    }
                }
                if (found === false) {
                    Ext.getCmp('projectApplication').add({ xtype: interactiveBasePanel });
                }
                project.interactiveReporting = true;
                Ext.getCmp('projectApplication').setActivePanel(interactiveBasePanel);

                Ext.getCmp('reportingBasePanel').setLoading(false);
            },
            failure: function (response, opts) {
                com.showError(response, opts);
                Ext.getCmp('reportingBasePanel').setLoading(false);
            }
        });
    },

    btnInteractiveBack_click: function (panel, eOpts) {
        Ext.getCmp('pnlReportingDetail').setChild('reportingManagerDetailPanel');
    },

    reportingInteractiveProgramProjectTreeGrid_checkchange: function (node, checked, eOpts)
    {
        var parentNode = node.parentNode;
        var changeOccurred = true;
        if (checked)
        {
            while (parentNode)
            {
                parentNode.set('checked', true);
                parentNode = parentNode.parentNode;
            }
        }
    
        if (!checked && node.data.isParent)
        {
            var childChecked = false;
            node.cascadeBy(function () {
                if (this.get('checked')) {
                    childChecked = true;
                }
            })
    
            if (childChecked) {
                node.set('checked', true);
                var newMsg = 'A project may not be deselected while it has selected sub projects';
                Ext.Msg.alert('Validation Error', newMsg, Ext.emptyFn);
                changeOccurred = false;
            }
        }
    
        if (changeOccurred) {
            reporting.setChangedMessage();
        }

        var reportingProgramProjects = Ext.getCmp('reportingInteractiveDetailPanel').down('reportingProgramProjects');
        var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
        var btnProgramProjectAllClear = reportingProgramProjectTreeGrid.down('reportingProgramProjectTreeGridToolbar').down();
            
        var isAllChecked = this.isTreePanelAllChecked(reportingProgramProjectTreeGrid);
    
        if (isAllChecked) {
            reportingProgramProjectTreeGrid.store.clearFilter(false);
            btnProgramProjectAllClear.pressed = true;
            btnProgramProjectAllClear.setText('Clear');
        }
        else {
            btnProgramProjectAllClear.pressed = false;
            btnProgramProjectAllClear.setText('All');
        }
    },

    btnInteractiveProgramProjectAllClear_toggle: function (button, pressed, eOpts)
    {
        var reportingProgramProjectTreeGrid = Ext.getCmp('reportingInteractiveDetailPanel').down('reportingProgramProjectTreeGrid');

        var store = reportingProgramProjectTreeGrid.getStore();
        if (pressed) {
            store.clearFilter(false);
            button.setText('Clear');
        }
        else {
            button.setText('All');
        }

        reportingProgramProjectTreeGrid.getRootNode().cascadeBy(function () {
            this.set('checked', button.pressed);
        });

        reporting.setChangedMessage();
    },

    isTreePanelAllChecked: function (treePanel) {
        var treePanelRootNode = treePanel.getRootNode();
        var isAllChecked = true;

        treePanelRootNode.cascadeBy(function () {
            if (!this.get('checked')) {
                isAllChecked = false;
            }
        });

        return isAllChecked;
    },

    getConfigurationObjectForSave: function (reportTypeId, reportTypeName, project) {
        var reportingProgramProjects = Ext.getCmp('reportingInteractiveDetailPanel').down('reportingProgramProjects');;
        var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
        var cbxRiskThreshold = reportingProgramProjects.down('combobox');

        var theObject = {};
        theObject = {};
        theObject.id = 0;//Dummy Value since no configuration is used
        theObject.name = 'Interactive Report';
        theObject.reportTypeId = reportTypeId;
        theObject.riskThresholdIdSelected = cbxRiskThreshold.getValue();;
        theObject.isDefault = false;
        theObject.contextsSelected = [];

        var theRootContext = {};
        var idNumber = 1;
        theRootContext.id = idNumber;
        theRootContext.contextId = com.getProjectId();
        theRootContext.configurationId = 0;//Dummy Value since no configuration is used
        theRootContext.contextName = project.projectName;
        theRootContext.pddNumber = project.pddNumber;
        theRootContext.parentContextId = 0;
        theRootContext.parentContextName = 'n/a';
        theRootContext.level = project.level;
        theRootContext.isChild = project.isChild;
        theRootContext.isParent = project.isParent;
        theRootContext.projectManager = project.projectManager;
        theRootContext.productChampion = project.productChampion;
        theRootContext.productGroupId = project.productGroupId;
        theRootContext.productGroupCode = project.productGroupCode;

        theObject.contextsSelected.push(theRootContext);

        reportingProgramProjectTreeGrid.getRootNode().cascadeBy(function () {
            if (this.get('checked') && this.get('projectId') != 0) {
                var theSubContext = {};
                theSubContext.id = idNumber;
                theSubContext.contextId = this.get('projectId');
                theSubContext.configurationId = 0;//Dummy Value since no configuration is used
                theSubContext.contextName = this.get('projectName');
                theSubContext.pddNumber = this.get('pddNumber');
                theSubContext.parentContextId = this.get('parentProjectId');
                theSubContext.parentContextName = this.get('parentProjectName');
                theSubContext.level = this.get('level');
                theSubContext.isChild = this.get('isChild');
                theSubContext.isParent = this.get('isParent');
                theSubContext.projectManager = this.get('projectManager');
                theSubContext.productChampion = this.get('productChampion');
                theSubContext.productGroupId = this.get('productGroupId');
                theSubContext.productGroupCode = this.get('productGroupCode');
                theObject.contextsSelected.push(theSubContext);
                idNumber++;
            }
        });

        return theObject;
    }

});

Ext.define('EMSPEED.reporting.model.reportingReportTypesModel', {
    extend:  Ext.data.Model ,
    fields: [
        { name: 'id', type: 'int', mapping: 'id' },
        { name: 'name', type: 'string', mapping: 'name' },
        { name: 'detailPanel', type: 'string', mapping: 'detailPanel' },
        { name: 'summaryPanel', type: 'string', mapping: 'summaryPanel' },
        { name: 'iconFile', type: 'string', mapping: 'iconFile' },
        { name: 'description', type: 'string', mapping: 'description' }
    ]
});

Ext.define('EMSPEED.reporting.view.reporting', {
    singleton: true,
    alternateClassName: 'reporting',

    constructor: function () {
        if (typeof enableGenerateReport === 'undefined') {
            this.enableGenerateReport = true;
        }
        else {
            this.enableGenerateReport = enableGenerateReport;
        }

        this.imagesFolder = com.appFolder + '/reporting' + '/resources/images/';
        this.siteRoot = 'http://' + location.hostname + ':' + location.port + '/';
        this.serviceRoot = 'http://' + location.hostname + ':8095/';
        this.getProjectsUrl = com.appFolder + '/reporting/data/projects.jso';
        this.getReportTypesUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/GetReportTypes';
        this.getReportTypesMethod = 'POST';
        this.getMasterLayoutUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/GetMasterLayout';
        this.getMasterLayoutMethod = 'POST';
        this.getConfigurationUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/GetConfiguration';
        this.getConfigurationMethod = 'POST';
        this.saveConfigurationUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/SaveConfiguration';
        this.saveConfigurationMethod = 'POST';
        this.deleteConfigurationUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/DeleteConfiguration';
        this.deleteConfigurationMethod = 'POST';
        this.generateReportUrl = this.serviceRoot + 'ReportGenerationService.svc/json/GenerateReport';
        this.generateReportMethod = 'POST';
        this.generateRawDataReportUrl = this.serviceRoot + 'RawDataGenerationService.svc/json/GenerateRawDataReport';
        this.generateRawDataReportMethod = 'POST';
        this.logInteractiveReportRequestUrl = this.serviceRoot + 'ReportGenerationService.svc/json/LogInteractiveReportRequest';
        this.logInteractiveReportRequestMethod = 'POST';

        this.callParent(arguments);
    },

    changeMessage: 'You have unsaved changes to the report configuration',

    reportGenerationObject: {},

    eventType: 'No Event',
    isSelected: false,
    shouldIgnoreChangeEvents: false,
    theReportTypes: null,
    theDetailPanels: null,
    theSummaryPanels: null,
    selectedReportType: null,
    reportingBasePanelMask: null,

    quickTips: function () {
        Ext.tip.QuickTipManager.init();
        Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
            //maxWidth: 200,
            //minWidth: 200,
            dismissDelay: 0,
            showDelay: 0      // Show 50ms after entering target
        });
    },

    createReportHtmlForm: function () {
        Ext.getBody().createChild({
            tag: 'form',
            id: 'theReportGenerationForm',
            method: reporting.generateReportMethod,
            action: reporting.generateReportUrl,
            cls: 'x-hidden',
            children: [
                {
                    tag: 'input',
                    id: 'reportGeneration',
                    name: 'reportGeneration',
                    type: 'hidden'
                }
            ]
        });
    },

    createRawReportHtmlForm: function () {
        Ext.getBody().createChild({
            tag: 'form',
            id: 'theRawDataGenerationForm',
            method: reporting.generateRawDataReportMethod,
            action: reporting.generateRawDataReportUrl,
            cls: 'x-hidden',
            children: [
            {
                tag: 'input',
                id: 'rawDataGeneration',
                name: 'rawDataGeneration',
                type: 'hidden'
            }
        ]
        });
    },

    resetGridToolbar: function () {
        Ext.getCmp('btnReportSectionsAllClear').toggle(false, true);
        Ext.getCmp('btnReportSectionsAllClear').setText('All');
        Ext.getCmp('btnReportSectionsShowHide').toggle(false, true);
        Ext.getCmp('btnReportSectionsShowHide').setText('Hide Unselected Sections');
        //var store = Ext.getCmp('grdReportSections').getStore();
        //store.clearFilter(true);
        setTimeout(function () {
            var store = Ext.getCmp('grdReportSections').getStore();
            store.clearFilter(false);
        }, 150);

    },

    setChangedMessage: function () {
        var changeMessage = this.changeMessage;
        var theMessage = '';

        if (Ext.getCmp('txtConfigurationName').Begin != Ext.getCmp('txtConfigurationName').getValue()) {
            theMessage = changeMessage;
            Ext.get('txtConfigurationName-inputEl').applyStyles('backgroundColor: yellow');
        }
        else {
            Ext.get('txtConfigurationName-inputEl').applyStyles('backgroundColor: white');
        }

        if (Ext.getCmp('grdReportSections').store.getModifiedRecords().length > 0) {
            theMessage = changeMessage;
        }

        var reportingProgramProjects = Ext.getCmp('reportingCdpDetailPanel').down('reportingProgramProjects');;
        var reportingProgramProjectTreeGrid = reportingProgramProjects.down('reportingProgramProjectTreeGrid');
        var cbxRiskThreshold = reportingProgramProjects.down('combobox');

        if (reportingProgramProjectTreeGrid.store.getModifiedRecords().length > 0) {
            theMessage = changeMessage;
        }

        if (cbxRiskThreshold.Begin != cbxRiskThreshold.getValue()) {
            theMessage = changeMessage;
        }

        var thePanel = Ext.getCmp('reportingCdpFieldsetGlobalFilters');
        var globalFiltersParentContainer = thePanel.down('#globalFiltersParentContainer');
        var globalFiltersSelected = reporting.filters.getFilterValues(globalFiltersParentContainer);

        if (Ext.encode(globalFiltersSelected) != Ext.encode(reporting.filters.globalFiltersSelected)) {
            theMessage = changeMessage;
        }

        Ext.getCmp('lblError').setText(theMessage);
    },

    clearChangedMessage: function () {
        Ext.getCmp('lblError').setText('');
    },

    drawSummary: function (theGridStoreItems) {
        var theSummary = '';
        theSummary += '<br>';
        var allowsSnapshot = false;
        for (key in theGridStoreItems) {
            if (theGridStoreItems[key].get('enabled') === true) {
                theSummary += '<br>' + '' + theGridStoreItems[key].get('name') + '';
                if (theGridStoreItems[key].get('allowsSnapshot') === true) {
                    allowsSnapshot = true;
                }
            }
        }

        var DetailPanel = Ext.getCmp('reportingCdpDetailPanel');
        if (allowsSnapshot === true && DetailPanel.masterLayout.projectEntitlements.AllowSnapshot === true) {
            Ext.getCmp('chkCreateSnapshot').setDisabled(false);
        }
        else {
            Ext.getCmp('chkCreateSnapshot').setDisabled(true);
        }

        Ext.getCmp('lblCdpSection').setText(theSummary, false);
    }

});

Ext.define('EMSPEED.reporting.view.reportingBasePanel', {
    //extend: 'Ext.panel.Panel',
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.reportingBasePanel',
    id: 'reportingBasePanel',
               
                                          
      


    //border: false,
    //bodyBorder: false,
    //overflowY: 'auto',
    layout: 'hbox',
    //hidden: true,


    initComponent: function () {
        //        this.dockedItems = [
        //            {
        //                xtype: 'label', id: 'rptTitle', height: 30, text: '', margin: '10 0 0 10',
        //                style: { fontFamily: 'Univers 57 condensed', color: '#000000', fontSize: '16px' }
        //            }
        //        ];
        this.items = [
            { xtype: 'reportingBaseDetailPanel', id: 'pnlReportingDetail' },
            { xtype: 'reportingBaseSummaryPanel', id: 'pnlReportingSummary' }
        ];
        this.callParent(arguments);

        try {
            var  contextId = project.projectId;
            var getReportsParams = { "contextId": contextId };
            Ext.Ajax.request({
                url: reporting.getReportTypesUrl,
                method: reporting.getReportTypesMethod,
                timeout: 90000,
                withCredentials: com.usesWithCredentials,
                scope: this,
                jsonData: getReportsParams,
                success: function (response, opts) {
                    var theResponse = Ext.decode(response.responseText);
                    reporting.theReportTypes = theResponse;

                    reporting.theDetailPanels = [];
                    var newDetailPanel = { xtype: 'reportingManagerDetailPanel' };
                    reporting.theDetailPanels.splice(1, 0, newDetailPanel);
                    for (var r = 0; r < reporting.theReportTypes.length; r++) {
                        newDetailPanel = { xtype: reporting.theReportTypes[r].detailPanel };
                        reporting.theDetailPanels.splice(1, 0, newDetailPanel);
                    }
                    Ext.getCmp('pnlReportingDetail').add(reporting.theDetailPanels);

                    reporting.theSummaryPanels = [];
                    var newSummaryPanel = { xtype: 'reportingManagerSummaryPanel' };
                    reporting.theSummaryPanels.splice(1, 0, newSummaryPanel);
                    for (var r = 0; r < reporting.theReportTypes.length; r++) {
                        newSummaryPanel = { xtype: reporting.theReportTypes[r].summaryPanel };
                        reporting.theSummaryPanels.splice(1, 0, newSummaryPanel);
                    }
                    Ext.getCmp('pnlReportingSummary').add(reporting.theSummaryPanels);

                    //Ext.getCmp('reportingBasePanel').setVisible(true);
                    Ext.getCmp('pnlReportingDetail').setChild('reportingManagerDetailPanel');
                    //                    if (Ext.get('loading') != null) {
                    //                        Ext.get('loading').remove();
                    //                    }

                    reporting.createReportHtmlForm();
                    reporting.createRawReportHtmlForm();
                    //initialiseHistory();

                },

                failure: function (response, opts) {
                    com.showError(response, opts);
                }
            });
        }
        catch (err) {
            com.showErrorFromTry2(err);
        }
    }
});

Ext.define('EMSPEED.reporting.view.reportingBaseDetailPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingBaseDetailPanel',

    layout: 'card',
    width: 656,
    border: '0 1 1 1',
    margin: '0 0 0 0',
    bodyStyle: {
        borderTop: '0px',
        borderBottom: '0px',
        borderLeft: '0px',
        borderRight: '1px'
    },

    setChild: function (panel) {
        this.getLayout().setActiveItem(panel);
        com.setTheTitle(this, this.getLayout().getActiveItem().title);
    }
});

Ext.define('EMSPEED.reporting.view.reportingBaseSummaryPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingBaseSummaryPanel',

    border: false,
    margin: '0 5 0 5',
    layout: 'card',
    width: 300
});

Ext.define('EMSPEED.reporting.view.reportingManagerDetailPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingManagerDetailPanel',
    id: 'reportingManagerDetailPanel',
    itemId: 'reportingManagerDetailPanel',
    title: 'Select Report Type',
    header: false,
    height: 440,
    border: false,
    bodyBorder: false,
    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },
    initComponent: function () {
        this.items = [
            { xtype: 'reportingManagerIconBrowser', id: 'img-chooser-view' }
        ];
        this.callParent(arguments);
    },
    fbar: [{ id: 'btnCustomize', text: 'Customize the Report', margin: '0 0 15 0', disabled: true }]
});

Ext.define('EMSPEED.reporting.view.reportingManagerSummaryPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingManagerSummaryPanel',
    id: 'reportingManagerSummaryPanel',
    margin: '0 0 0 0',
    border: false,
    bodyBorder: false,
    bodyPadding: '10 10 10 10',
    layout: 'vbox'
});

Ext.define('EMSPEED.reporting.view.reportingManagerIconBrowser', {
    extend:  Ext.view.View ,
    alias: 'widget.reportingManagerIconBrowser',
               
                                          
      
                           
    singleSelect: true,
    overItemCls: 'x-view-over',
    itemSelector: 'div.thumb-wrap',

    initComponent: function () {
        this.store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            model: 'EMSPEED.reporting.model.reportingReportTypesModel',
            data: reporting.theReportTypes
        });
        this.store.sort();
        this.callParent(arguments);
    },

    tpl: [
        '<tpl for=".">',
            '<div class="thumb-wrap">',
                '<div class="thumb">',
                    (!Ext.isIE6 ? '<img width=72px height=72px src=' + com.appFolder + '/reporting' + '/resources/images/' + '{iconFile} />' :
                    '<div style="width:72px;height:72px;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'wicons/{iconFile}\')"></div>'),
                    '</div>',
                    '<span>{name}</span>',
                '</div>',
            '</div>',
        '</tpl>'
    ]
});

Ext.define('EMSPEED.reporting.controller.reportingManagerController', {
    extend:  Ext.app.Controller ,

               

                                                            

                                                    
                                                          
                                                           
                                                             
                                                              
                                                            
      

    init: function () {
        this.control({
            '#img-chooser-view':
                {
                    selectionchange: this.img_chooser_view_selectionchange,
                    itemdblclick: this.img_chooser_view_itemdblclick
                },
            '#btnCustomize': { click: this.btnCustomize_click }
        });
    },

    img_chooser_view_selectionchange: function (dataview, selections) {
        reporting.selectedReportType = selections[0];
        if (reporting.selectedReportType) {
            Ext.getCmp('btnCustomize').setDisabled(false);
            Ext.getCmp('pnlReportingSummary').getLayout().setActiveItem(reporting.selectedReportType.data.summaryPanel);
            Ext.getCmp(reporting.selectedReportType.data.summaryPanel).loadRecord(reporting.selectedReportType);
        }
    },

    img_chooser_view_itemdblclick: function (dataview, record, item, index, e, eOpts) {
        reporting.selectedReportType = Ext.getCmp('img-chooser-view').selModel.getSelection()[0];
        Ext.getCmp('pnlReportingDetail').setChild(reporting.selectedReportType.data.detailPanel);
    },

    btnCustomize_click: function (panel, eOpts) {
        reporting.selectedReportType = Ext.getCmp('img-chooser-view').selModel.getSelection()[0];
        Ext.getCmp('pnlReportingDetail').setChild(reporting.selectedReportType.data.detailPanel);
    }
});

Ext.define('EMSPEED.reporting.view.reportingRawFieldsetGenerateReport', {
    extend:  EMSPEED.reporting.view.reportingCommonFieldSet ,
    alias: 'widget.reportingRawFieldsetGenerateReport',
    width: '100%',
    height: 200,
    layout: 'vbox',
    collapsible: false,
    collapsed: false,
    title: 'Generate Report',
    initComponent: function () {
        Ext.apply(this, {
            items: [
                {
                    xtype: 'container',
                    layout: 'hbox',
                    margin: '0 0 10 0',
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'txtRawReportTitle',
                            fieldLabel: 'Report Title:',
                            labelAlign: 'top',
                            margin: '0 20 0 0',
                            width: 325,
                            name: 'reportTitle'
                        },  //Report Title
                        {
                            xtype: 'button', 
                            id:'btnGenerateRawReport', 
                            margin: '21 0 0 0', 
                            text: 'Generate Report'
                        }
                    ]
                }
            ]   
        });
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.reporting.view.reportingRawDetailPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingRawDetailPanel',
    id: 'reportingRawDetailPanel',
    itemId: 'reportingRawDetailPanel',
    layout: 'vbox',
    title: 'Generate Raw Report',
    header: false,
    border: false,
    bodyBorder: false,
    bodyPadding: '0 0 0 0',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 290,
        anchor: '100%'
    },
    items: [
        { xtype: 'reportingRawFieldsetGenerateReport' }
    ],
    dockedItems: [
    {
        xtype: 'toolbar', dock: 'top',
        style: {
            top: 0,
            left: 0,
            borderWidth: '1px',
            padding: '0 0 0 0'
        },
        items: [
            {
                xtype: 'button',
                margin: '0 0 10 0',
                style: {
                    top: 0
                },
                id: 'btnRawBack',
                text: '&laquo; Back'
            }
        ]
    }
    ]
});

Ext.define('EMSPEED.reporting.view.reportingRawSummaryPanel', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reportingRawSummaryPanel',
    id: 'reportingRawSummaryPanel',
    itemId: 'reportingRawSummaryPanel',
    margin: '0 0 0 0',
    border: false,
    bodyBorder: false,
    bodyPadding: '10 10 10 10',
    layout: 'vbox',
    fieldDefaults: {
        labelAlign: 'left',
        labelWidth: 90,
        anchor: '100%'
    },
    bodyStyle: {
        backgroundColor: '#F2F2F2'
    },
    items: [
        { xtype: 'image', id: 'imgRawType', margin: '0 0 5 00', height: '72px' },
        { xtype: 'label', id: 'lblRawType', margin: '0 0 15 0' },
        { xtype: 'label', id: 'lblRawDesc', margin: '0 0 15 0', width: 250 }
    ],
    loadRecord: function (image) {
        Ext.getCmp('imgRawType').setSrc(reporting.imagesFolder + image.data.iconFile);
        Ext.getCmp('lblRawType').setText(image.data.name);
        Ext.getCmp('lblRawDesc').setText(image.data.description);
    }
});

Ext.define('EMSPEED.reporting.controller.reportingRawController', {
    extend:  Ext.app.Controller ,
               
                                                         
                                                                    
                                                          
                                                         
                                                               
      

    init: function () {
        this.control({
            '#reportingRawDetailPanel': { activate: this.reportingRawDetailPanel_activate },
            '#btnGenerateRawReport': { click: this.btnGenerateRawReport_click },
            '#btnRawBack': { click: this.btnRawBack_click }
        });
    },

    reportingRawDetailPanel_activate: function (panel, e, eOpts) {
        Ext.getCmp('reportingBasePanel').setLoading('Working...');
        Ext.getCmp('lblCdpSummary').setVisible(true);

        var getMasterLayoutParms = { "reportTypeId": reporting.selectedReportType.data.id, "contextId": com.getProjectId() };
        Ext.Ajax.request({
            url: reporting.getMasterLayoutUrl,
            method: reporting.getMasterLayoutMethod,
            withCredentials: com.usesWithCredentials,
            scope: this,
            jsonData: getMasterLayoutParms,
            success: function (response, opts) {
                var DetailPanel = Ext.getCmp('reportingRawDetailPanel');

                var response = Ext.decode(response.responseText);
                DetailPanel.projectLastUpdated = response.project.timeSpanFromLastUpdate;

                if (DetailPanel.projectLastUpdated === null) {
                    com.showErrorFromTry2('This project is not yet available on the EMSPEED portal.');
                }
                else {
                    Ext.getCmp('txtRawReportTitle').setValue('RawData');
                    Ext.getCmp('reportingBasePanel').setLoading(false);
                }

            },
            failure: function (response, opts) {
                com.showError(response, opts);
            }
        });
    },

    btnGenerateRawReport_click: function (button, e, eOpts) {
        var reportGenerationObject = {};

        reportGenerationObject.projectID = com.getProjectId();
        reportGenerationObject.siteRoot = reporting.siteRoot;
        reportGenerationObject.fileName = Ext.getCmp('txtRawReportTitle').getValue() + '.xlsx';

        var reportGenerationString = Ext.encode(reportGenerationObject);
        reporting.reportGenerationObject = reportGenerationObject;
        Ext.create("EMSPEED.reporting.view.reportingCommonGenerateConfirm", {}).show();
        if (reporting.enableGenerateReport === true) {
            Ext.getDom('rawDataGeneration').setAttribute("value", reportGenerationString);
            Ext.getDom('theRawDataGenerationForm').submit();
        }
    },

    btnRawBack_click: function (panel, eOpts) {
        Ext.getCmp('pnlReportingDetail').setChild('reportingManagerDetailPanel');
    }

});

Ext.define('EMSPEED.reporting.view.reportingSorts', {
    extend:  Ext.window.Window ,
    alias: 'widget.reportingSorts',
    id: 'reportingSorts',
    modal: true,
    floating: true,
    frame: false,
    //width: 675,
    //height: 600,
    overflowY: 'auto',
    bodyStyle: {
        background: '#ffffff',
        paddingTop: '10px',
        paddingRight: '0px',
        paddingBottom: '0px',
        paddingLeft: '10px'
    },
    closable: false,
    layout: 'vbox',
    config: {
        grid: null,
        rowIndex: null,
        sectionSortGroupsAvailable: null,
        sectionSortGroupsSelected: null
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    },
    initComponent: function () {
        this.rec = this.grid.store.getAt(this.rowIndex);
        var sectionName = this.rec.get('name');

        var sortRowTitleWidth = this.rec.get('sortRowTitleWidth');
        var sortRowValueWidth = this.rec.get('sortRowValueWidth');

        this.title = 'Edit The ' + sectionName + ' Section Sorts';
        this.sectionSortGroupsAvailable = this.rec.get('sectionSortGroupsAvailable'); // the total available
        this.sectionSortGroupsSelected = this.rec.get('sectionSortGroupsSelected'); // the user selections
        var sortGroups = this.getSortGroups(this.sectionSortGroupsAvailable, sortRowTitleWidth, sortRowValueWidth, sectionName);

        Ext.apply(this, {
            height: this.rec.get('sortWindowHeight'),
            width: this.rec.get('sortWindowWidth'),
            items: [
                {
                    xtype: 'label',
                    text: sectionName + ' Section Sorts',
                    margin: '0 0 5 0',
                    style: {
                        fontFamily: 'Univers 57 condensed',
                        color: '#000000',
                        fontSize: '18px'
                    }
                },
                {
                    xtype: 'label',
                    width: '100%',
                    text: 'The sort columns are organized into sort groups.  To enable a sort column, click the checkbox next to the item.  Next, determine whether the sort column should be in ascending or descending order by selecting from the drop down list.  Use the arrow buttons to move a sort column up or down in sort order.',
                    margin: '0 0 10 0',
                    cls: 'x-form-item'
                },
                { xtype: 'container', itemId: 'reportingSortGroupsContainer', items: sortGroups }
            ],
            buttons: [
                { id: 'btnSortsOk', text: 'OK' },
                { id: 'btnSortsCancel', text: 'Cancel' }
            ]
        });
        this.callParent(arguments);
    },

    getSortGroups: function (sortGroupsAvailable, sortRowTitleWidth, sortRowValueWidth, sectionName) {
        var theSortGroups = [];
        for (i = 0; i < sortGroupsAvailable.length; i++) {
            var theSortGroup = {};
            theSortGroup.xtype = 'reportingSortGroup';
            theSortGroup.sortGroupsAvailableObject = sortGroupsAvailable[i];
            theSortGroup.sortRowTitleWidth = sortRowTitleWidth;
            theSortGroup.sortRowValueWidth = sortRowValueWidth;
            theSortGroup.sectionName = sectionName;
            theSortGroup.groupName = sortGroupsAvailable[i].name;
            theSortGroups.push(theSortGroup);
        }
        return theSortGroups;
    }


});





        //                {
        //                    xtype: 'itemselector',
        //                    width: 300,
        //                    //name: 'itemselector',
        //                    //id: 'itemselector-field',
        //                    //anchor: '100%',
        //                    //fieldLabel: 'ItemSelector',
        //                    imagePath: '../ux/images/',
        //                    //store: ds,
        //                    store: ['Red', 'Yellow', 'Green', 'Brown', 'Blue', 'Pink', 'Black'],
        //                    displayField: 'text',
        //                    valueField: 'value',
        //                    value: ['3', '4', '6'],
        //                    allowBlank: false,
        //                    msgTarget: 'side',
        //                    fromTitle: 'Available',
        //                    toTitle: 'Selected'
        //                },
        //                {
        //                    xtype: 'grid',
        //                    store: Ext.create('Ext.data.Store', {
        //                        fields: ['Id', 'Name', ],
        //                        data: sortGroups
        //                    }),
        //                    disableSelection: true,
        //                    columns: [
        //                        { header: 'Id', dataIndex: 'Id', width: 100 },
        //                        { header: 'Name', dataIndex: 'Name', width: 100 }
        //                    ]
        //                }
        //                {
        //                    xtype: 'grid',
        //                    store: Ext.create('Ext.data.Store', {
        //                        fields: ['Id', 'Name', ],
        //                        data: sortOrders
        //                    }),
        //                    disableSelection: true,
        //                    columns: [
        //                        { header: 'Id', dataIndex: 'Id', width: 100 },
        //                        { header: 'Name', dataIndex: 'Name', width: 100 }
        //                    ]
        //                },




            //            bbar: [
            //                '->',
            //                {
            //                    text: 'OK',
            //                    margin: '0 0 0 0',
            //                    scope: this,
            //                    handler: function () {
            //                        rec.set('SortsSelected', sortsSelected);
            //                        Ext.getCmp('reportingBasePanel').setLoading(false);
            //                        this.close();
            //                    }
            //                },
            //                {
            //                    text: 'Cancel',
            //                    margin: '0 0 0 10',
            //                    scope: this,
            //                    handler: function () {
            //                        Ext.getCmp('reportingBasePanel').setLoading(false);
            //                        this.close();
            //                    }
            //                }
            //            ]

    //    //                        {
    //    //                            xtype: 'itemselector',
    //    //                            name: 'itemselector',
    //    //                            id: 'itemselector-field',
    //    //                            anchor: '100%',
    //    //                            width: 400,
    //    //                            height: 200,
    //    //                            imagePath: 'http://localhost:411/examples/ux/images/',
    //    //                            store: Ext.create('Ext.data.ArrayStore', {
    //    //                            fields: ['value','text'],
    //    //                            data: [[123,'Type'],
    //    //                                ['1', 'Status'], ['2', 'Value Score'], ['3', 'Class'], ['4', 'Group'], ['5', 'Date'],
    //    //                                ]
    //    //                            }),
    //    //                            displayField: 'text',
    //    //                            valueField: 'value',
    //    //                            value: ['3', '4', '5'],
    //    //                            allowBlank: false,
    //    //                            msgTarget: 'side',
    //    //                            fromTitle: 'Available Sorts',
    //    //                            toTitle: 'Applied Sorts'
    //    //                        },


Ext.define('EMSPEED.reporting.view.reportingSortGroup', {
    extend:  Ext.container.Container ,
    alias: 'widget.reportingSortGroup',
    margin: '5 0 5 0',
    layout: 'hbox',
    labelAlign: 'top',
    width: '100%',
    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        borderWidth: '1px',
        borderColor: '#cccccc',
        borderStyle: 'solid',
        //borderTop: '1px',
        borderBottom: '1px',
        borderLeft: '1px',
        borderRight: '1px'
    },
    config: {
        sortGroupsAvailableObject: null
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    },
    initComponent: function () {
        this.sortGroupsAvailableId = this.sortGroupsAvailableObject.id;
        this.sequence = this.sortGroupsAvailableObject.id;

        var sortGroupFields = this.getSortGroupFields(this.sortGroupsAvailableObject.sortGroupFieldsAvailable, this.sortRowValueWidth, this.sectionName, this.groupName);
  
        this.items = [
            {
                xtype: 'label',
                margin: '10 0 5 0',
                cls: 'x-form-item',
                text: this.sortGroupsAvailableObject.name,
                width: this.sortRowTitleWidth
//                style: {
//                    fontFamily: 'Univers 57 condensed',
//                    color: '#000000',
//                    fontSize: '14px'
//                }
            },

            {
                xtype: 'container',
                itemId: 'reportingSortGroupFieldsContainer',
                layout: 'vbox',
                items: sortGroupFields
            }
        ]
        this.callParent(arguments);
    },

    getSortGroupFields: function (sortGroupFieldsAvailable, sortRowValueWidth, sectionName, groupName) {
        var theSortGroupFieldControls = [];
        for (i = 0; i < sortGroupFieldsAvailable.length; i++) {
            var theSortGroupField = {};
            theSortGroupField.xtype = 'reportingSortGroupField';
            theSortGroupField.sortGroupFieldsAvailableObject = sortGroupFieldsAvailable[i];
            theSortGroupField.sortRowValueWidth = sortRowValueWidth;
            theSortGroupField.sectionName = sectionName;
            theSortGroupField.groupName = groupName;
            theSortGroupFieldControls.push(theSortGroupField);
        }
        return theSortGroupFieldControls;
    }

});










//            {
//                xtype: 'grid',
//                store: Ext.create('Ext.data.Store', {
//                    fields: ['Id', 'Name', ],
//                    data: [{Id: 1 ,Name: 'sort 1' }, {Id: 2 ,Name: 'sort 2' }]
//                }),
//                //disableSelection: true,
//                columns: [

//                    {
//                        xtype: 'checkcolumn',
//                        header: 'Enabled',
//                        dataIndex: 'Enabled',
//                        id: 'cbxSortEnabled',
//                        width: 55
//                    },
//                    { header: 'Id', dataIndex: 'Id', width: 100 },
//                    { header: 'Name', dataIndex: 'Name', width: 100 },


//                    {
//                        header: 'value',
//                        dataIndex: 'value',
//                        width: 90,
//                        align: 'right',
//                        editor: new Ext.form.ComboBox({
//                            typeAhead: true,
//                            triggerAction: 'all',
//                            store: ['asc','desc'],
//                            displayField: 'attr',
//                            minListWidth: 300,
//                            mode: 'local',
//                            triggerAction: 'all',
//                            emptyText: 'asc',
//                            selectOnFocus: true
//                        })
//                    }
//                ]
//            }


Ext.define('EMSPEED.reporting.view.reportingSortGroupField', {
    extend:  Ext.container.Container ,
    alias: 'widget.reportingSortGroupField',
    margin: '5 0 0 0',
    height: 25,
    layout: 'hbox',
    config: {
        sortGroupFieldsAvailableObject: null
    },
    constructor: function (cfg) {
        this.initConfig(cfg);
        this.callParent(arguments);
    },

    getTheId: function (control) {
        var theId = control.sectionName + '-' + control.groupName + '-' + control.sortGroupFieldsAvailableObject.name;
        theId = theId.split(' ').join('_');
        theId = theId.split('%').join('_');
        theId = theId.split('/').join('_');
        return theId;
    },

    initComponent: function () {
        this.sortGroupFieldsAvailableId = this.sortGroupFieldsAvailableObject.id;
        this.arrangementTypeSelectedName = 'ascending';

        var theId = this.getTheId(this);

        //cbxSortGroupFieldEnabled
        //txtSortGroupFieldName
        //txtSortGroupFieldSelectedFields
        //cbxSortGroupFieldAscDesc
        //txtSortGroupFieldOrder
        //btnSortGroupFieldUp
        //btnSortGroupFieldDown

        //this.sortGroupFieldsAvailableObject.shortDescription = 'test';
        //this.sortGroupFieldsAvailableObject.longDescription = 'test';

        var theMargin = '4 0 0 0';
        var theTooltip = { xtype: 'label', width: 16, height: 1 };
        if (this.sortGroupFieldsAvailableObject.shortDescription != null) {
            if (this.sortGroupFieldsAvailableObject.longDescription != null) {
                theTooltip = { xtype: 'button', text: '?', width: 16, height: 16, margin: theMargin, tooltip: this.sortGroupFieldsAvailableObject.shortDescription, scope: this,
                    handler: function (button, event) {
                        Ext.Msg.show({
                            title: 'Help for ' + this.sortGroupFieldsAvailableObject.name + ' section sort',
                            msg: this.sortGroupFieldsAvailableObject.longDescription,
                            //msg: 'further detail on ' + this.filtersAvailableObject.name + ' section filter<h3>h3</h3><p>paragraph1</p><br><p>paragraph2</p>',
                            //width: 400,
                            //height: 800,
                            closable: false,
                            buttons: Ext.MessageBox.OK,
                            icon: Ext.MessageBox.INFO
                        })
                    }
                };
            }
            else {
                theTooltip = { xtype: 'button', text: '?', width: 16, height: 16, margin: theMargin, tooltip: this.sortGroupFieldsAvailableObject.shortDescription, scope: this };
            }
        }



        this.items = [
            theTooltip,
            { xtype: 'checkbox', margin: '2 5 0 20', id: theId + '-cbxSortGroupFieldEnabled', cls: 'x-form-item',
                listeners: {
                    scope: this,
                    change: function (object, newValue, oldValue, eOpts) {
                        var reportingSortGroupFieldsContainer = object.up('#reportingSortGroupFieldsContainer');
                        var reportingSortGroupFields = reportingSortGroupFieldsContainer.items;
                        var reportingSortGroupFieldCurrent = object.up('container');

                        var theId = this.getTheId(reportingSortGroupFieldCurrent);

                        var theCurrentIndex = -1;
                        var theLastEnabledItem = -1;
                        for (var r = 0; r < reportingSortGroupFields.length; r++) {
                            if (reportingSortGroupFieldCurrent.sortGroupFieldsAvailableObject.id != reportingSortGroupFields.items[r].sortGroupFieldsAvailableObject.id) {
                                if (reportingSortGroupFields.items[r].items.items[1].getValue() == true) {
                                    theLastEnabledItem = r;
                                }
                            }
                            else {
                                theCurrentIndex = r;
                            }
                        }

                        var swap = reportingSortGroupFields.items[theCurrentIndex];
                        if (newValue === true) {
                            //user checked the sort field
                            for (var j = theCurrentIndex; j > theLastEnabledItem; j--) {
                                reportingSortGroupFields.items[j] = reportingSortGroupFields.items[j - 1];
                            }
                            reportingSortGroupFields.items[theLastEnabledItem + 1] = swap;
                            reportingSortGroupFieldCurrent.down('#' + theId + '-txtSortGroupFieldOrder').setText(theLastEnabledItem + 2)

                            if (theLastEnabledItem === -1) {
                                reportingSortGroupFieldCurrent.down('#' + theId + '-btnSortGroupFieldUp').disable(true);
                                reportingSortGroupFieldCurrent.down('#' + theId + '-btnSortGroupFieldDown').disable(true);
                            }
                            else {
                                reportingSortGroupFieldCurrent.down('#' + theId + '-btnSortGroupFieldUp').enable(true);
                                reportingSortGroupFieldCurrent.down('#' + theId + '-btnSortGroupFieldDown').disable(true);

                                var reportingSortGroupFieldLastEnabled = reportingSortGroupFields.items[theLastEnabledItem];
                                //var theIdLastEnabled = this.getTheId(reportingSortGroupFieldLastEnabled);
                                reportingSortGroupFieldLastEnabled.down('#' + this.getTheId(reportingSortGroupFieldLastEnabled) + '-btnSortGroupFieldDown').enable(true);
                            }

                            reportingSortGroupFieldCurrent.down('#' + theId + '-txtSortGroupFieldSelectedFields').show();
                        }
                        else {
                            //user unchecked the sort field
                            if (theCurrentIndex != theLastEnabledItem + 1) {
                                for (var j = theCurrentIndex; j < theLastEnabledItem; j++) {
                                    reportingSortGroupFields.items[j] = reportingSortGroupFields.items[j + 1];
                                    reportingSortGroupFields.items[j].down('#' + this.getTheId(reportingSortGroupFields.items[j]) + '-txtSortGroupFieldOrder').setText(j + 1);
                                }
                                reportingSortGroupFields.items[theLastEnabledItem] = swap;
                            }
                            reportingSortGroupFieldCurrent.down('#' + theId + '-txtSortGroupFieldOrder').setText('');

                            if (theCurrentIndex != 0) {
                                var oneBeyondLastSelected = reportingSortGroupFields.items[theCurrentIndex];
                                if (oneBeyondLastSelected.down('#' + this.getTheId(oneBeyondLastSelected) + '-cbxSortGroupFieldEnabled').getValue() === false) {
                                    var lastSelected = reportingSortGroupFields.items[theCurrentIndex - 1];
                                    lastSelected.down('#' + this.getTheId(lastSelected) + '-btnSortGroupFieldDown').disable(true);
                                }
                            }
                            else {
                                reportingSortGroupFields.items[theCurrentIndex].down('#' + this.getTheId(reportingSortGroupFields.items[theCurrentIndex]) + '-btnSortGroupFieldDown').disable(true);
                                reportingSortGroupFields.items[theCurrentIndex].down('#' + this.getTheId(reportingSortGroupFields.items[theCurrentIndex]) + '-btnSortGroupFieldUp').disable(true);
                            }

                            reportingSortGroupFieldCurrent.down('#' + theId + '-txtSortGroupFieldSelectedFields').hide();
                        }
                    }
                }
            },
            { xtype: 'label', margin: '5 5 0 0', id: theId + '-txtSortGroupFieldName', width: this.sortRowValueWidth, text: this.sortGroupFieldsAvailableObject.name, cls: 'x-form-item' },
            {
                xtype: 'container',
                id: theId + '-txtSortGroupFieldSelectedFields',
                layout: 'hbox',
                hidden: true,
                items: [
                    { xtype: 'label', margin: '5 5 0 0', cls: 'x-form-item', id: theId + '-txtSortGroupFieldOrder', width: 10, text: '' },
                    {
                        xtype: 'combobox',
                        id: theId + '-cbxSortGroupFieldAscDesc',
                        margin: '0 5 0 0',
                        cls: 'x-form-item',
                        width: 100,
                        //                defaultListConfig: { loadingHeight: 70, minWidth: 70, maxHeight: 400, shadow: 'sides' },
                        valueField: 'id',
                        displayField: 'name',
                        editable: false,
                        readonly: true,
                        queryMode: 'local',
                        value: 1,
                        listeners: {
                            select: {
                                fn: function (combobox, newVal, oldVal, eOpts) {
                                    var c = this.up('reportingSortGroupField');
                                    c.arrangementTypeNameSelected = newVal[0].raw.name;
                                }
                            }
                        },

                        store: Ext.create('Ext.data.Store', {
                            fields: ['id', 'name'],
                            data: [{ id: 1, name: 'ascending' }, { id: 2, name: 'descending'}]
                        })
                    },
                    { xtype: 'toolbar',

                        style: {
                            background: '#ffffff',
                            backgroundImage: '',
                            borderColor: '#ffffff'
                        },
                        width: 75,
                        items: [
                            { xtype: 'button', margin: '0 5 0 0', id: theId + '-btnSortGroupFieldUp', xwidth: 40, tooltip: 'move up', iconCls: 'up', iconAlign: 'center',
                                listeners: {
                                    scope: this,
                                    click: function (object, e, eOpts) {
                                        var reportingSortGroupFieldsContainer = object.up('#reportingSortGroupFieldsContainer');
                                        var reportingSortGroupFields = reportingSortGroupFieldsContainer.items;
                                        var reportingSortGroupFieldCurrent = object.up('container').up('container').up('container');

                                        var theCurrentIndex;
                                        var theLastEnabledIndex = 0;
                                        for (var r = 0; r < reportingSortGroupFields.length; r++) {
                                            if (reportingSortGroupFields.items[r].items.items[1].getValue() == true) {
                                                theLastEnabledIndex = r;
                                            }
                                            if (reportingSortGroupFieldCurrent.sortGroupFieldsAvailableObject.id === reportingSortGroupFields.items[r].sortGroupFieldsAvailableObject.id) {
                                                theCurrentIndex = r;
                                            }
                                        }

                                        if (theCurrentIndex > 0) {
                                            var swap1 = reportingSortGroupFields.items[theCurrentIndex];
                                            var swap2 = reportingSortGroupFields.items[theCurrentIndex - 1]

                                            reportingSortGroupFields.items[theCurrentIndex - 1] = swap1;
                                            reportingSortGroupFields.items[theCurrentIndex] = swap2;
                                            var theIdSwap1 = this.getTheId(swap1);
                                            var theIdSwap2 = this.getTheId(swap2);

                                            swap1.down('#' + theIdSwap1 + '-txtSortGroupFieldOrder').setText(theCurrentIndex);
                                            swap2.down('#' + theIdSwap2 + '-txtSortGroupFieldOrder').setText(theCurrentIndex + 1);

                                            if (theCurrentIndex === 1) {
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldUp').disable(true);
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldDown').enable(true);
                                            }
                                            else {
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldUp').enable(true);
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldDown').enable(true);
                                            }
                                            swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldUp').enable(true);

                                            var next = reportingSortGroupFields.items[theCurrentIndex + 1]
                                            if (next === undefined) {
                                                swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldDown').disable(true);
                                            }
                                            else {
                                                var theIdNext = this.getTheId(next);

                                                if (next.down('#' + theIdNext + '-cbxSortGroupFieldEnabled').getValue() === true) {
                                                    swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldDown').enable(true);
                                                }
                                                else {
                                                    swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldDown').disable(true);
                                                }
                                            }
                                            reportingSortGroupFieldsContainer.doLayout();
                                        }
                                    }
                                }

                            },
                            { xtype: 'button', margin: '0 5 0 0', id: theId + '-btnSortGroupFieldDown', xwidth: 40, tooltip: 'move down', iconCls: 'dn', iconAlign: 'center',
                                listeners: {
                                    scope: this,
                                    click: function (object, e, eOpts) {
                                        var reportingSortGroupFieldsContainer = object.up('#reportingSortGroupFieldsContainer');
                                        var reportingSortGroupFields = reportingSortGroupFieldsContainer.items;
                                        var reportingSortGroupFieldCurrent = object.up('container').up('container').up('container');

                                        var theCurrentIndex;
                                        var theLastEnabledIndex = 0;
                                        for (var r = 0; r < reportingSortGroupFields.length; r++) {
                                            if (reportingSortGroupFields.items[r].items.items[1].getValue() == true) {
                                                theLastEnabledIndex = r;
                                            }
                                            if (reportingSortGroupFieldCurrent.sortGroupFieldsAvailableObject.id === reportingSortGroupFields.items[r].sortGroupFieldsAvailableObject.id) {
                                                theCurrentIndex = r;
                                            }
                                        }

                                        if (theCurrentIndex < reportingSortGroupFields.length - 1) {
                                            var swap1 = reportingSortGroupFields.items[theCurrentIndex];
                                            var swap2 = reportingSortGroupFields.items[theCurrentIndex + 1];

                                            reportingSortGroupFields.items[theCurrentIndex + 1] = swap1;
                                            reportingSortGroupFields.items[theCurrentIndex] = swap2;

                                            var theIdSwap1 = this.getTheId(swap1);
                                            var theIdSwap2 = this.getTheId(swap2);

                                            swap1.down('#' + theIdSwap1 + '-txtSortGroupFieldOrder').setText(theCurrentIndex + 2);
                                            swap2.down('#' + theIdSwap2 + '-txtSortGroupFieldOrder').setText(theCurrentIndex + 1);

                                            if (theCurrentIndex + 1 >= theLastEnabledIndex) {
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldUp').enable(true);
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldDown').disable(true);
                                            }
                                            else {
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldUp').enable(true);
                                                swap1.down('#' + theIdSwap1 + '-btnSortGroupFieldDown').enable(true);
                                            }
                                            swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldDown').enable(true);
                                            if (theCurrentIndex == 0) {
                                                swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldUp').disable(true);
                                            }

                                            var prev = reportingSortGroupFields.items[theCurrentIndex - 1]
                                            if (prev === undefined) {
                                                swap2.down('#' + theIdSwap2 + '-btnSortGroupFieldDown').enable(false);
                                            }

                                            reportingSortGroupFieldsContainer.doLayout();
                                        }
                                    }
                                }
                            }
                        ]
                    }
                ]
            }
        ]
        this.callParent(arguments);
    }
});

Ext.define('EMSPEED.reporting.controller.reportingSortsController', {
    extend:  Ext.app.Controller ,
               
                                                
                                                    
                                                        
      

    //    refs: [
    //        {
    //        selector: 'button[action=submit_settings]',
    //        ref: 'thecheckbox'
    //        },
    //        {
    //        //selector: 'reportingSortGroupField > checkbox[cls=x-form-item]',
    //        selector: 'checkbox',
    //        ref: 'thecheckbox'
    //        }
    //    ],

    init: function () {
        this.control({
            '#reportingSorts': { activate: this.reportingSorts_activate },
            '#btnSortsOk': { click: this.btnSortsOk_click },
            '#btnSortsCancel': { click: this.btnSortsCancel_click }

            //'thecheckbox': { change: this.thecheckbox_change },

            //'#cbxSortGroupFieldEnabled': { change: this.cbxSortGroupFieldEnabled_change },
            //'#btnSortGroupFieldUp': { click: this.btnSortGroupFieldUp_click },
            //'#btnSortGroupFieldDown': { click: this.btnSortGroupFieldDown_click }
        });
    },

    reportingSorts_activate: function (panel, e, eOpts) {
        var theContainer = panel.down('#reportingSortGroupsContainer');
        this.setSorts(theContainer, panel.sectionSortGroupsSelected, panel.sectionSortGroupsAvailable);

        Ext.getCmp('reportingBasePanel').setLoading(false);

    },

    btnSortsOk_click: function (object, e, eOpts) {
        var theParent = object.up('window');
        var sectionSortGroupsSelected = this.getSortGroupValues(theParent.down('#reportingSortGroupsContainer'));

        var a = Ext.encode(sectionSortGroupsSelected);
        var b = Ext.encode(theParent.sectionSortGroupsSelected);
        if (a != b) {
            theParent.rec.set('sectionSortGroupsSelected', sectionSortGroupsSelected);
            reporting.setChangedMessage();
        }
        else {
            //            alert('same');
        }

        reporting.drawSummary(theParent.grid.store.data.items);

        Ext.getCmp('reportingBasePanel').setLoading(false);
        theParent.close();
    },

    btnSortsCancel_click: function (object, e, eOpts) {
        var theParent = object.up('window');
        Ext.getCmp('reportingBasePanel').setLoading(false);
        theParent.close();
    },

    getTheId: function (control) {
        var theId = control.sectionName + '-' + control.groupName + '-' + control.sortGroupFieldsAvailableObject.name;
        theId = theId.split(' ').join('_');
        theId = theId.split('%').join('_');
        theId = theId.split('/').join('_');
        return theId;
    },

    setSorts: function (thePanel, theSortsGroupsSelected, theSortGroupsAvailable) {
        this.shouldIgnoreChangeEvents = true;

        this.clearSorts(thePanel, theSortGroupsAvailable);

        var theSortGroupControls = thePanel.items.items;
        for (var i = 0; i < theSortGroupControls.length; i++) {
            var index = -1;
            for (var j = 0; j < theSortsGroupsSelected.length; j++) {
                if (theSortsGroupsSelected[j].sortGroupsAvailableId === theSortGroupControls[i].sortGroupsAvailableId) {
                    index = j;
                }
            }
            if (index > -1) {
                var sortGroupFieldsSelected = theSortsGroupsSelected[index].sortGroupFieldsSelected;

                var theSortGroupFieldControlsContainer = theSortGroupControls[i].down('#reportingSortGroupFieldsContainer')
                var theArray = new Array(sortGroupFieldsSelected.length);
                theSortGroupFieldControls = theSortGroupFieldControlsContainer.items.items;
                for (var k = 0; k < theSortGroupFieldControls.length; k++) {
                    var index2 = -1;
                    for (var l = 0; l < sortGroupFieldsSelected.length; l++) {
                        if (sortGroupFieldsSelected[l].sortGroupFieldsAvailableId === theSortGroupFieldControls[k].sortGroupFieldsAvailableId) {
                            index2 = l;
                        }
                    }
                    if (index2 > -1) {
                        theSortGroupFieldControls[k].down('#' + this.getTheId(theSortGroupFieldControls[k]) + '-cbxSortGroupFieldAscDesc').setValue(sortGroupFieldsSelected[index2].arrangementTypeSelectedId);
                        var theIndex = sortGroupFieldsSelected[index2].sequence - 1;
                        theArray[theIndex] = k;
                    }
                }

                for (var m = 0; m < theArray.length; m++) {
                    var theIndex = theArray[m];
                    if (theIndex <= m) {
                        var theDiff = m - theIndex;
                        theIndex = theIndex + theDiff;
                    }
                    theSortGroupFieldControls[theIndex].down('#' + this.getTheId(theSortGroupFieldControls[theIndex]) + '-cbxSortGroupFieldEnabled').setValue(true);
                }

            }
        }
        this.shouldIgnoreChangeEvents = false;
    },

    getSortGroupValues: function (theSortGroupContainer) {
        var theSortGroupsItems = theSortGroupContainer.items.items;
        var sortsGroupsSelected = [];
        var addTheSortGroupObject = false;
        for (var i = 0; i < theSortGroupsItems.length; i++) {
            var theSortGroupObject = {};
            theSortGroupObject.id = i + 1;
            theSortGroupObject.sortGroupsAvailableId = theSortGroupsItems[i].sortGroupsAvailableId;
            theSortGroupObject.sortGroupsAvailableName = theSortGroupsItems[i].sortGroupsAvailableObject.name;

            theSortGroupObject.sequence = theSortGroupsItems[i].sequence;
            theSortGroupObject.sortGroupFieldsSelected = [];

            var theSortGroupFieldControlsItems = theSortGroupsItems[i].down('#reportingSortGroupFieldsContainer').items.items;
            for (var j = 0; j < theSortGroupFieldControlsItems.length; j++) {
                var theSortGroupFieldObject = {};

                var isEnabled = theSortGroupFieldControlsItems[j].down('#' + this.getTheId(theSortGroupFieldControlsItems[j]) + '-cbxSortGroupFieldEnabled').getValue();
                if (isEnabled === true) {
                    addTheSortGroupObject = true;

                    theSortGroupFieldObject.id = j + 1;
                    theSortGroupFieldObject.sortGroupFieldsAvailableId = theSortGroupFieldControlsItems[j].sortGroupFieldsAvailableId;
                    theSortGroupFieldObject.sortGroupFieldsAvailableName = theSortGroupFieldControlsItems[j].sortGroupFieldsAvailableObject.name;

                    theSortGroupFieldObject.arrangementTypeSelectedName = theSortGroupFieldControlsItems[j].down('#' + this.getTheId(theSortGroupFieldControlsItems[j]) + '-cbxSortGroupFieldAscDesc').getRawValue();
                    theSortGroupFieldObject.arrangementTypeSelectedId = theSortGroupFieldControlsItems[j].down('#' + this.getTheId(theSortGroupFieldControlsItems[j]) + '-cbxSortGroupFieldAscDesc').getValue(); ;
                    theSortGroupFieldObject.sequence = j + 1;

                    theSortGroupObject.sortGroupFieldsSelected.push(theSortGroupFieldObject);
                }
                //var theName = theSortGroupFieldControlsItems[j].down('#txtSortGroupFieldName').text;
                //alert(theName + ' - ' + isEnabled);
            }
            if (addTheSortGroupObject === true) {
                sortsGroupsSelected.push(theSortGroupObject);
            }
        }
        return sortsGroupsSelected;
    },

    clearSorts: function (thePanel, sortsAvailable) {
        var items = thePanel.items.items;
        for (var i = 0; i < items.length; i++) {
            //clear values here...
        }
    }

});

Ext.define('EMSPEED.stature.controller.statureController', {
    extend:  Ext.app.Controller ,
               
                                               
      

    init: function () {
        this.control({
            //            '#statureBasePanel': { activate: this.statureBasePanel_activate }
        });
    }

    //    statureBasePanel_activate: function (panel, e, eOpts) {
//        Ext.util.Cookies.set('projectId', '12345');
//        // alert('statureMainPanel_activate');
//    }

});

Ext.define('EMSPEED.tabs.view.tabsBasePanel', {
    extend:  Ext.tab.Panel ,
    alias: 'widget.tabsBasePanel',
    id: 'tabsBasePanel',
    ui: 'emspeed',
    //cls: 'MainPanel',
    tabPosition: 'left',
    height: 510,
    //                border: false,
    plain: true,
    margin: '150 0 0 0',
    hidden: false,
    activeTab: 0,
    tabBar: {
        defaults: {
            //     height: 50 //sets the default height of the actual tab
        },
        //height: 50,  //sets the height of the tabBar component
        listeners: {
            afterrender: function (cmp) {
                // this will set the height of the tabBar body to the height of the tabBar component
                cmp.body.setHeight(cmp.getHeight());
            }
        }
    },

    listeners: {

        afterrender: function (tabs, eOpts) {
            //debugger;
            //alert('hi');
            this.items.items[1].tab.el.addCls('tv-x-tab');
        },

        beforetabchange: function (tabs, newTab, oldTab) {
            debugger;
            //this.items.items[0].tab.el.addCls('tv-x-tab');
            oldTab.tab.el.addCls('tv-x-tab');
            newTab.tab.el.removeCls('tv-x-tab');

            Ext.getCmp('projectNavigation').setTheMenu(newTab.title);

            Ext.getCmp('dashboardBasePanel').removeAll();

            Ext.getCmp('projectApplication').setActivePanel('dashboardBasePanel');
            Ext.getCmp('viewMenu').getSelectionModel().select(0);
            if (newTab.title === 'Project Management') {
                project.view = 'Program';

                Ext.getCmp('dashboardBasePanel').add(project.projectDashboard);
                Ext.getCmp('dashboardBasePanel').setTheTitle('Project Dashboard');

                Ext.getCmp('lblButtons').setVisible(true);
                Ext.getCmp('btnStaturePMT').setVisible(true);
                Ext.getCmp('btnStatureDfx').setVisible(true);
                Ext.getCmp('btnTeamsite').setVisible(true);
            }
            else {
                project.view = 'Project';

                Ext.getCmp('dashboardBasePanel').add(project.programDashboard);
                Ext.getCmp('dashboardBasePanel').setTheTitle('Program Dashboard');

                Ext.getCmp('lblButtons').setVisible(false);
                Ext.getCmp('btnStaturePMT').setVisible(false);
                Ext.getCmp('btnStatureDfx').setVisible(false);
                Ext.getCmp('btnTeamsite').setVisible(false);            
            }
        }
    },

    items: [
            {
                title: 'Program Management',
                tabConfig: {
                    tooltip: 'This tab is used to to display the Program Management functions for the current Study'
                }
            },
            {
                title: 'Project Management',
                tabConfig: {
                    tooltip: 'This tab is used to to display the Project Management functions for the current Study'
                }
            }
        ],


    initComponent: function () {
        this.callParent(arguments);
        
        //this.setVisible(project.hasChildren);
        this.setVisible(false);
    }
});




//        {
//            xtype: 'tabbar',
//            orientation: 'vertical',
//            dock: 'left',
//            plain: true,
//            frame: false,
//            region: 'north',
//            height: 300,

//            items: [
//            {
//                xtype: 'tab',
//                closable: false,
//                text: 'Project Management',
//                uiCls: ['active', 'left-active', 'noicon', 'left'],
//                listeners: {
//                    click: function (tab, e, eOpts) {
//                        //window.location.href = 'dashboard12.aspx';
//                    }
//                },
//                tooltip: 'This tab is used to to display the Project Management functions for the current Study'
//            },
//            {
//                xtype: 'tab',
//                closable: false,
//                pressed: true,
//                text: 'Program Management',
//                uiCls: ['noicon', 'left'],
//                listeners: {
//                    click: function (tab, e, eOpts) {
//                        debugger;
//                        //this.setActiveTab(tab)
//                        //tab.focus();
//                        //tab.uiCls = ['active', 'left-active', 'noicon', 'left'];
//                        //window.location.href = 'dashboardProgram.aspx';
//                    }
//                },
//                tooltip: 'This tab is used to to display the Program Management functions for the current Study'
//            }
//            ]
//        },



//            {
//                xtype: 'tabpanel',
//                tabPosition: 'left',
//                border: false,
//                plain: true,
//                margin: '60 0 0 0',

//                //width: 50,
//                height: 290,

//                listeners: {
//                    beforetabchange: function (tabs, newTab, oldTab) {
//                        if (newTab.title === 'Project Management') {
//                            window.location.href = 'dashboard12.aspx';
//                        }
//                        else {
//                            window.location.href = 'dashboardProgram.aspx';
//                        }
//                    }
//                },

//                //renderTo: document.body,
//                items: [
//                {
//                    title: 'Project Management',
//                    tabConfig: {
//                        tooltip: 'This tab is used to to display the Project Management functions for the current Study'
//                    }
//                },
//                {
//                    title: 'Program Management',
//                    tabConfig: {
//                        tooltip: 'This tab is used to to display the Program Management functions for the current Study'
//                    }
//                }
//                ]
//            }

Ext.define('EMSPEED.tabs.controller.tabsController', {
    extend:  Ext.app.Controller  
               
                                         
     
});

Ext.define('EMSPEED.tasks.view.tasksBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.tasksBasePanel',
    id: 'tasksBasePanel',
    layout: 'absolute',

    initComponent: function () {
        this.items = [
            { xtype: 'image', src: project.imagesFolder + 'wireframes/tasks.jpg' }
        ];
        this.callParent(arguments);
        this.setTheTitle('Project Tasks');
    }

});

Ext.define('EMSPEED.tasks.controller.tasksController', {
    extend:  Ext.app.Controller ,
               
                                           
      

    init: function () {
        this.control({
            //            '#tasksBasePanel': { activate: this.tasksBasePanel_activate }
        });
    }

    //    tasksBasePanel_activate: function (panel, e, eOpts) {
//        Ext.util.Cookies.set('projectId', '12345');
//        // alert('tasksMainPanel_activate');
//    }

});

Ext.define('EMSPEED.teamsite.view.teamsiteBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassContainer ,
    alias: 'widget.teamsiteBasePanel',
    id: 'teamsiteBasePanel',
    layout: 'fit',
    padding: '0 0 0 0',
    items: [
        {
            height: '100%',
            xtype: 'simpleIframe',
            deferredRender: true
            //src: 'http://clms.ems.slb.com'
            //src: 'http://www.microsoft.com'
        }
    ]

});




Ext.define('EMSPEED.teamsite.controller.teamsiteController', {
    extend:  Ext.app.Controller ,
               
                                                 
      

    init: function () {
        this.control({
            //            '#teamsiteBasePanel': { activate: this.teamsiteBasePanel_activate }
        });
    }

    //    teamsiteBasePanel_activate: function (panel, e, eOpts) {
//        Ext.util.Cookies.set('projectId', '12345');
//        // alert('statureMainPanel_activate');
//    }

});

Ext.define('EMSPEED.usersinrole.view.usersinrole', {
    singleton: true,
    alternateClassName: 'usersinrole',

    constructor: function () {
        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.usersinrole.view.usersinroleBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.usersinroleBasePanel',
    id: 'usersinroleBasePanel',

    //these next 2 lines override baseclassPanel
    dockedItems: [],
    padding: '8px 0px 8px 0px',

    reload: function () {
        dashboard.startLoading();
        var me = this;
        setTimeout(function () {
            me.getData();
        }, 50);
    },

    initComponent: function () {
        this.fields = [
            { name: 'alias', type: 'string', text: 'Alias', dataIndex: 'alias', width: 150, menuDisabled: true, renderer: this.renderAlias },
            { name: 'firstName', type: 'string', text: 'First Name', dataIndex: 'firstName', width: 200, menuDisabled: true },
            { name: 'lastName', type: 'string', text: 'Last Name', dataIndex: 'lastName', width: 200, menuDisabled: true },
            { name: 'preferredName', type: 'string', text: 'Preferred Name', dataIndex: 'preferredName', menuDisabled: true, flex: 1 }
        ];
        Ext.apply(this, {
            items: [
                {
                    xtype: 'grid',
                    columns: this.fields,
                    //border: false,
                    //margin: '0 0 3 0',
                    width: '100%',
                    cls: 'myprojects-grid',
                    disableSelection: true,
                    enableCtxMenu: false,  // turn off header context menu
                    enableColLock: false,  // turn off column lock context items
                    enableColumnMove: false,  // turn off column reorder drag drop
                    enableColumnResize: false,  // turn off column resize for whole grid
                    enableRowHeightSync: true
                }
            ]
        });
        this.callParent(arguments);
        this.getData();
    },

    getParams: function () {
        return { "projectId": parseFloat(project.projectId) };
    },

    getData: function () {
        var me = this;
        var theUrl = 'http://' + location.hostname + ':8095/' + 'ProjectService.svc/json/GetProjectViewers';
        var theData = {};
        $.ajax({
            url: theUrl,
            type: 'POST',
            crossDomain: true,
            data: Ext.encode(this.getParams()),
            contentType: "application/json; charset=utf-8",
            xhrFields: { withCredentials: true },
            dataType: 'json',
            async: false
        })
        .done(function (data) {
            var store = Ext.create('Ext.data.Store', {
                autoLoad: true,
                fields: me.fields,
                data: data
            });
            debugger;
            me.down('grid').bindStore(store);
            dashboard.endLoading();
        })
        .fail(function (data) {
            throw data.status + '-' + data.statusText + ': ' + theUrl;
        });
    },

    renderAlias: function (value, p, record) {
        return Ext.String.format(
		    '<b><a style="text-decoration: underline;font-family: Univers 57 condensed " target="_blank" href="http://directory.slb.com/query.cgi?query={0}" >{0}</a></b>',
		    record.data.alias
	    );
    }
});

Ext.define('EMSPEED.usersinrole.controller.usersinroleController', {
    extend:  Ext.app.Controller ,
               
                                                   
                                                           
      

    init: function () {
        this.control({
            //'#usersinroleBasePanel': { activate: this.usersinroleBasePanel_activate },
            //'#btnusersinrole': { click: this.btnusersinrole_click }
        });
    },

    usersinroleBasePanel_activate: function (panel, e, eOpts) {
    },

    btnusersinrole_click: function (button, e, eOpts) {
        alert(button.text);
    }

});

Ext.define('EMSPEED.viewport.view.viewportNorth', {
    extend:  Ext.container.Container ,
    alias: 'widget.viewportNorth',
    id: 'north',
    region: 'north',
    //layout: 'fit',
    cls: 'header',
    height: 102,
    width: '100%',
    //       t r  b  l
    margin: '0 30 0 30',
    items: [
        { xtype: 'container', layout: 'fit', id: 'slb-header', style: 'height:48px;border:0px #000 solid',
            html: '<div class="logo">' +
            '      <a target="_blank"href="http://hub.slb.com">' +
            '        <img border="0" src="/_layouts/images/EMSPortal/SLB_logo.jpg" alt="" title="" />' +
            '      </a>' +
            '    </div>'
        },
        { xtype: 'contextcontrollerBasePanel' },
        { xtype: 'container', html: '<div id="line1" style="margin: 0px 0px 0px 0px; xwidth: 1175px; height: 3px; border: 0px #000 solid; background-color: #6084A8;"></div>' }
    ]
});

Ext.define('EMSPEED.viewport.view.viewportCenter', {
    extend:  Ext.container.Container ,
    alias: 'widget.viewportCenter',
    id: 'center',
    region: 'center',
    layout: 'card',
    //style: {zIndex: -1},

    getAppPanels: function () {
        return [
            //{ xtype: 'container', deferredRender: false, border: false, html: 'app' }
            { xtype: 'projectApplication', deferredRender: false, border: false }
            //Emsix: { xtype: 'emsix' + COMMON.Constants.application, xcurrentPanel: 'emsixBasePanel', deferredRender: false },
            // Report: { xtype: 'report' + COMMON.Constants.application, xcurrentPanel: 'reportBasePanel', deferredRender: false },
            // Clm: { xtype: 'clm' + COMMON.Constants.application, xcurrentPanel: 'clmBasePanel', deferredRender: false },
            //Admin: { xtype: 'admin' + COMMON.Constants.application, xcurrentPanel: 'adminBasePanel', deferredRender: false },
            // Example: { xtype: 'example' + COMMON.Constants.application, xcurrentPanel: 'exampleAjaxPanel', deferredRender: false }
        ];
    },

    initComponent: function () {
        Ext.apply(this, {
            items: this.getAppPanels()
        });
        this.callParent(arguments);
    },

    onRender: function () {
        //    console.info('onRender Center: ' + this.id);
        this.callParent(arguments);
    },
    listeners: {
        beforeactivate: function (t, eOpts) {
            //       console.info('beforeactivate Center: ' + this.id);
        }
    },
    setContext: function (context) {
        this.getLayout().setActiveItem(navContext.getActiveApplication());
        //        //console.info('setContext baseapproot: ' + context);
        //        //        this.setActiveTab(context);
        //        //        var theTab = theAppPanel.child('#' + context);
        //        //theAppPanel.layout.setActiveItem(navContext.activeAppObj);
        //        this.layout.setActiveItem(navContext.activeAppObj);
        //        //navContext.activeAppObj.layout.setActiveItem(navContext.activeAppObj.currentViewerObj);
        //        navContext.setActiveItem(navContext.activeAppObj.currentViewer);
    }

});


//function getCenter() {
//    var appPanels = [];
//    Ext.Object.each(getAppPanels(), function (name, example) {
//        appPanels.push(example);
//    });
//    var appPanel = Ext.create('EMSPEED.view.baseclass.Center', {
//        id: 'center',
//        region: 'center',
//        layout: 'card',
//        unstyled: true,
//        //        t r b l
//        margins: '0 0 0 0',
//        padding: '0 0 0 0',
//        items: appPanels
//    });
//    return appPanel;
//}

//function getAppPanels() {
//    return {
//        Project: { xtype: 'project' + EMSPEED.config.Constants.application, deferredRender: false }
//        //Emsix: { xtype: 'emsixapp', deferredRender: false },
//        //Report: { xtype: 'reportapp', deferredRender: false },
//        //Example: { xtype: 'exampleapp', deferredRender: false }
//    };
//}


//function getCente2r() {
//    return Ext.create('Ext.Panel', {
//        region: 'center',
//        id: 'center',

//        //        t r b l
//        margins: '0 0 0 0',
//        bodyStyle: {
//            backgroundColor: EMSPEED.config.Constants.backgroundColor
//        },
//        deferredRender: false,
//        border: false,
//        unstyled: false,
//        split: true,
//        collapsible: false,
//        collapseMode: 'mini',
//        layout: 'border',
//        items: [
//            getApp()
//        ]

//    });
//}




//function getApp() {
//    var appPanels = [];
//    Ext.Object.each(getAppPanels(), function (name, example) {
//        appPanels.push(example);
//    });
//    var appPanel = Ext.create('EMSPEED.view.baseapproot', {
//        id: 'app',
//        region: 'center',
//        deferredRender: false,
//        split: true,
//        //height: '85%',
//        //minSize: 350,
//        layout: 'card',
//        unstyled: true,
//        //activeItem: 0,
//        //        t r b l
//        margins: '0 0 0 0',
//        items: appPanels
//    });
//    theAppPanel = appPanel;
//    return appPanel;
//}




//Ext.define('EMSPEED.view.main.Center', {
//    extend: 'Ext.panel.Panel',
//    alias: 'widget.center',
//    id: 'center',
//    region: 'center',

//    //        t r b l
//    margins: '0 0 0 0',
//    bodyStyle: {
//        backgroundColor: EMSPEED.config.Constants.backgroundColor
//    },
//    deferredRender: false,
//    border: false,
//    unstyled: false,
//    split: true,
//    collapsible: false,
//    collapseMode: 'mini',
//    layout: 'border',
//    items: [
//        getApp()
//    ]
//});


Ext.define('EMSPEED.viewport.view.viewportSouth', {
    extend:  Ext.container.Container ,
    alias: 'widget.viewportSouth',
    id: 'south',
    region: 'south',
    //        t r b l
    margin: '0 30 0 30',

    initComponent: function () {
        this.items = [
            { xtype: 'container', layout: 'fit', id: 'slb-footer', style: 'height:24px;border:0px #000 solid' }
        ]
        this.callParent(arguments);
        Ext.getCmp('slb-footer').html = '<div style="font-size: 10px;color: #FFFFFF;padding: 8px 5px 5px 15px;">' + 'EMSPEED Version: ' + EMSPEED_VERSION + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template Version: ' + project.data.templateVersion + '</div>';
    }
});

Ext.define('EMSPEED.viewport.controller.viewportController', {
    extend:  Ext.app.Controller  
               
                                              
                                               
                                             
     
});

Ext.define('EMSPEED.clonepmt.view.clonepmtBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.clonepmtBasePanel',
    id: 'clonepmtBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('Clone PMT');
    },
    items: [
        {
            xtype: 'simpleIframe',
            src: 'clonepmt.aspx'
        }
    ]
});

Ext.define('EMSPEED.clonepmt.controller.clonepmtController', {
    extend:  Ext.app.Controller  
               
                                                 
     

});

Ext.define('EMSPEED.pddsummary.view.pddsummaryBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.pddsummaryBasePanel',
    id: 'pddsummaryBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('PDD Summary');
    },
    items: [
        {
            xtype: 'simpleIframe',
            src: 'details.aspx'
        }
    ]
});

Ext.define('EMSPEED.pddsummary.controller.pddsummaryController', {
    extend:  Ext.app.Controller  
               
                                                     
     
});

Ext.define('EMSPEED.createsnapshot.view.createsnapshotBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.createsnapshotBasePanel',
    id: 'createsnapshotBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('Create Snapshot');
    },
    items: [
        {
            xtype: 'simpleIframe',
            src: 'createsnapshot.aspx'
        }
    ]
});

Ext.define('EMSPEED.createsnapshot.controller.createsnapshotController', {
    extend:  Ext.app.Controller  
               
                                                             
     
});

Ext.define('EMSPEED.loadsnapshot.view.loadsnapshotBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.loadsnapshotBasePanel',
    id: 'loadsnapshotBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('Load Snapshot');
    },
    items: [
        {
            xtype: 'simpleIframe',
            src: 'loadsnapshot.aspx'
        }
    ]
});

Ext.define('EMSPEED.loadsnapshot.controller.loadsnapshotController', {
    extend:  Ext.app.Controller  
               
                                                         
     
});

Ext.define('EMSPEED.manageteam.view.manageteamBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.manageteamBasePanel',
    id: 'manageteamBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('Manage Team');
    },
    items: [
        {
            xtype: 'tabpanel',
            margin: '10 0 0 0', 
            border: false,
            tabBar: {
                style: {backgroundColor: '#FFFFFF' },
                bodyStyle: { backgroundColor: '#FFFFFF' }
            },
            items: [
                {
                    title: 'Manage Team',
                    xtype: 'simpleIframe',
                    src: 'manageteam.aspx'
                },
                {
                    title: 'Stakeholders',
                    xtype: 'usersinroleBasePanel'
                }                    
            ]
        }
    ]
});

Ext.define('EMSPEED.manageteam.controller.manageteamController', {
    extend:  Ext.app.Controller  
               
                                                     
     
});

Ext.define('EMSPEED.viewteam.view.viewteamBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.viewteamBasePanel',
    id: 'viewteamBasePanel',
    layout: 'fit',
    initComponent: function () {
        this.callParent(arguments);
        this.setTheTitle('View Team');
    },
    items: [
        {
            xtype: 'tabpanel',
            margin: '10 0 0 0',
            border: false,
            tabBar: {
                style: {backgroundColor: '#FFFFFF' },
                bodyStyle: { backgroundColor: '#FFFFFF' }
            },
            items: [
                {
                    title: 'View Team',
                    xtype: 'simpleIframe',
                    src: 'viewteam.aspx'
                },
                {
                    title: 'Stakeholders',
                    xtype: 'usersinroleBasePanel'
                }                    
            ]
        }
    ]
});

Ext.define('EMSPEED.viewteam.controller.viewteamController', {
    extend:  Ext.app.Controller  
               
                                                 
     
});

Ext.define('COMMON.proxy.emspeedProxy', {
    //http://skirtlesden.com/articles/custom-proxies
    alias: 'proxy.emspeedProxy',
    extend:  Ext.data.proxy.Ajax , // Ajax, Rest or JsonP, as appropriate 
    constructor: function (config) {
        this.initConfig(config);
        this.reader = {
            root: this.root,
            type: 'json'
        };
        this.callParent(arguments);
    },
    noCache: false, //to remove param "_dc"
    directionParam: null,
    filterParam: null,
    groupDirectionParam: null,
    groupParam: null,
    limitParam: null,
    pageParam: null,
    sortParam: null,
    startParam: null,
    defaultHeaders: {
        'Content-Type': 'application/json; charset=utf-8'
    },
    actionMethods: {
        read: 'POST'
    },
    buildUrl: function (request) {
        return 'http://' + location.hostname + ':8095/' + encodeURIComponent(this.service) + '.svc/json/' + encodeURIComponent(this.method);
    },
    buildRequest: function (operation) {
        var request = this.callParent(arguments);
        request.jsonData = this.jsonData;
        request.withCredentials = com.usesWithCredentials;
        return request;
    }
});


Ext.define('COMMON.proxy.memoryProxy', {
    //http://skirtlesden.com/articles/custom-proxies
    alias: 'proxy.memoryProxy',
    extend:  Ext.data.proxy.Memory , // Ajax, Rest or JsonP, as appropriate 
    constructor: function () {
        this.reader = {
            root: this.root,
            type: 'json'
        };
        this.callParent(arguments);
        this.data = this.getTheData(this.service, this.method, this.jsonData);
    },

    getTheData: function (service, method, jsonData) {
        var f = service + '_' + method;
        return this[f](jsonData);
    },

    ProjectService_GetProgram: function (jsonData) {
        var theData = {};
        switch (jsonData.filter.projectId) {
            case 97366:
                theData = {
                    'data': [
                        { projectId: '97368', projectName: 'Parent Only', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' },
                        { projectId: '97370', projectName: 'Neither Parent or Child', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' }
                    ]
                };
                break;
            case 97368:
                theData = {
                    'data': [
                        { projectId: '97366', projectName: 'Parent and Child', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' },
                        { projectId: '97370', projectName: 'Neither Parent or Child', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' }
                    ]
                };
                break;
            case 97370:
                theData = {
                    'data': [
                        { projectId: '97366', projectName: 'Parent and Child', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' },
                        { projectId: '97368', projectName: 'Parent Only', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' }
                    ]
                };
                break;
            default:
                theData = {
                    'data': [
                        { projectId: '97366', projectName: 'Parent and Child', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' },
                        { projectId: '97368', projectName: 'Parent Only', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' },
                        { projectId: '97370', projectName: 'Neither Parent or Child', projectManager: 'mgusmano', productChampion: 'mgusmano', timeSpanFromLastUpdate: '12/12/2013' }
                    ]
                };
                break;
        }
        return theData;
    },

    ProjectService_GetRiskBurndown: function (jsonData) {
        var theData = {};
        theData = {"Matrix":[{"severity":1,"occurrence":1,"count":9},{"severity":1,"occurrence":2,"count":1},{"severity":1,"occurrence":3,"count":0},{"severity":1,"occurrence":4,"count":0},{"severity":1,"occurrence":5,"count":0},{"severity":2,"occurrence":1,"count":3},{"severity":2,"occurrence":2,"count":4},{"severity":2,"occurrence":3,"count":6},{"severity":2,"occurrence":4,"count":4},{"severity":2,"occurrence":5,"count":0},{"severity":3,"occurrence":1,"count":15},{"severity":3,"occurrence":2,"count":13},{"severity":3,"occurrence":3,"count":28},{"severity":3,"occurrence":4,"count":3},{"severity":3,"occurrence":5,"count":0},{"severity":4,"occurrence":1,"count":7},{"severity":4,"occurrence":2,"count":8},{"severity":4,"occurrence":3,"count":3},{"severity":4,"occurrence":4,"count":2},{"severity":4,"occurrence":5,"count":0},{"severity":5,"occurrence":1,"count":7},{"severity":5,"occurrence":2,"count":2},{"severity":5,"occurrence":3,"count":2},{"severity":5,"occurrence":4,"count":0},{"severity":5,"occurrence":5,"count":2}],"Risks":[{"riskSequence":1,"riskName":"Weight of the HP version of module exceeds the target","riskSeverity":5,"riskOccurrence":5,"riskScore":25,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Module Weight, Overall Product, Spec 1"},{"riskSequence":2,"riskName":"OD of module exceeds target","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Maximum Outside Diameter, Overall Product, Spec 2"},{"riskSequence":3,"riskName":"Delayed due to delay smart actuator development","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FNMS : Maximum Outside Diameter, Overall Product, Spec 3"},{"riskSequence":4,"riskName":"Idependent control of 6 bottles may be compromised to a 1-2-2-1 control, in the interest of weight","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Number of FLCN  Standard Bottles (PVT quality sample bottles) supported, Overall Product, Spec 4"},{"riskSequence":5,"riskName":"Risk 1","riskSeverity":4,"riskOccurrence":4,"riskScore":16,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FNMS : Number of FLCN  Standard Bottles (PVT quality sample bottles) supported, Overall Product, Spec 5"},{"riskSequence":6,"riskName":"Complexity of independent control may lead to exceeding cost target","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"FNMS : Number of FLCN  Standard Bottles (PVT quality sample bottles) supported, Overall Product, Spec 6"},{"riskSequence":7,"riskName":"Module does not meet 200C requirements","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Max Temperature Rating, Overall Product, Spec 7"},{"riskSequence":8,"riskName":"Model does not meet 200C rating by ENP field test start date","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FNMS : Max Temperature Rating, Overall Product, Spec 8"},{"riskSequence":9,"riskName":"Cost exceeds target","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"FNMS : Max Temperature Rating, Overall Product, Spec 9"},{"riskSequence":10,"riskName":"A study of achievable target has not been done. If target is not achieved, it may compromise the ability of FLCN to achieve faster cleanup time over MDT. Unkown dead volumes include new PO concepts, single packer.","riskSeverity":4,"riskOccurrence":3,"riskScore":12,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Ultra Low contamination sampling, Overall Product, Spec 25"},{"riskSequence":11,"riskName":"Module does not meet pressure rating","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Pressure rating - Standard Offering, Overall Product, Spec 26"},{"riskSequence":12,"riskName":"Not achieving the high pressure rating would prevent access to niche HP market. Combination of 35kPSI and 200C is difficult to achieve","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Pressure rating -High pressure Offering, Overall Product, Spec 32"},{"riskSequence":13,"riskName":"Cost exceeds target for HP version","riskSeverity":2,"riskOccurrence":2,"riskScore":4,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"FNMS : Pressure rating -High pressure Offering, Overall Product, Spec 33"},{"riskSequence":14,"riskName":"Sample down configuration is not supported to reduce module complexity ( to meet weight\/length target)","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Low shock sampling configurations, Overall Product, Spec 36"},{"riskSequence":15,"riskName":"Module does not meet H2S scavenging requirements","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Ability to take low H2S Samples, Overall Product, Spec 37"},{"riskSequence":16,"riskName":"Sample capture indication from module is faulty","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Sample Capture Assurance, Overall Product, Spec 39"},{"riskSequence":17,"riskName":"FLCN bottle does not support single phase tracking","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Bottle (All) : Sample verification, Overall Product, Spec 40"},{"riskSequence":18,"riskName":"OD of module exceeds target","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Platform : Flow capacity, Overall Product, Spec 41"},{"riskSequence":19,"riskName":"FNMS HP version exceeds OD target","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Tool Maximum Outside Diameter for high pressure version, Overall Product, Spec 42"},{"riskSequence":20,"riskName":"FNMS exceeds length target","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Module Shipping Length, Overall Product, Spec 43"},{"riskSequence":21,"riskName":"Secondary\/tertiary fluids collected during sample transfer","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Sample Recovery of Single Phase Fluid, Overall Product, Spec 44"},{"riskSequence":22,"riskName":"Flowlines and bottles do not meet overpressure rating for HP version","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Flowline and sample container over-pressure rating, Overall Product, Spec 45"},{"riskSequence":23,"riskName":"Traceability of bottle is not improved due to the inability to include electronics in bottle","riskSeverity":2,"riskOccurrence":1,"riskScore":2,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Bottle(All) : Traceability, Overall Product, Spec 46"},{"riskSequence":24,"riskName":"Weight of the HP version of module exceeds the target","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Weight for high pressure version, Overall Product, Spec 47"},{"riskSequence":25,"riskName":"Module failure due to components failing due to high concentration of H2S","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Bottle (All): H2S, Overall Product, Spec 48"},{"riskSequence":26,"riskName":"FLCN sample bottle weight  exceeds target","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNSB (FLCN Standard Bottle): Weight, Overall Product, Spec 49"},{"riskSequence":27,"riskName":"Data delay to Answer Product","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Techlog RE: Support FNMS Data, Overall Product, Spec 50"},{"riskSequence":28,"riskName":"Answer Product is not ready for ENP Field trial","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"Software: Techlog RE: Support FNMS Data, Overall Product, Spec 51"},{"riskSequence":29,"riskName":"Failures during fishing, TLC or lifting operations","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Tensile Rating, Overall Product, Spec 52"},{"riskSequence":30,"riskName":"Failures during fishing or TLC operations","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Compressive Rating, Overall Product, Spec 54"},{"riskSequence":31,"riskName":"Some devices require opening the tool to program","riskSeverity":2,"riskOccurrence":4,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Firmware download, Overall Product, Spec 56"},{"riskSequence":32,"riskName":"Firmware download too slow","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Firmware download, Overall Product, Spec 56"},{"riskSequence":33,"riskName":"The target success rate of sampling is a large improvement over MDT and may be difficult to achieve. Not improving to this target would severly impact the reliability perception of the service","riskSeverity":5,"riskOccurrence":5,"riskScore":25,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FNMS : Module Sampling Reliability, Overall Product, Spec 85"},{"riskSequence":34,"riskName":"Reliability not proven by ENP field test start date","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FNMS : Module Sampling Reliability, Overall Product, Spec 86"},{"riskSequence":35,"riskName":"Requires significant changes to the MaxWell and eWAFE. The changes could introduce issues.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Recovery from MaxWell crash, Overall Product, Spec 115"},{"riskSequence":36,"riskName":"Time to modify MaxWell and eWAFE may not be in the FLCN Phase 1 time line","riskSeverity":3,"riskOccurrence":4,"riskScore":12,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"Recovery from MaxWell crash, Overall Product, Spec 115"},{"riskSequence":37,"riskName":"Can't identify the cause of failure when tool is downhole","riskSeverity":2,"riskOccurrence":3,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Real Time evaluation of hardware during a job, Overall Product, Spec 116"},{"riskSequence":38,"riskName":"Can't identify the cause of failure when tool is downhole","riskSeverity":2,"riskOccurrence":3,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Real Time evaluation of hardware during a job, Overall Product, Spec 116"},{"riskSequence":39,"riskName":"False positive for failure detection","riskSeverity":2,"riskOccurrence":3,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Real Time evaluation of hardware during a job, Overall Product, Spec 116"},{"riskSequence":40,"riskName":"To maintain the cycle time within proper length, higher FPY\/RTY is the key to achieve the target. Current average MDT production RTY is around 10 to 15% and the cycle time is more than 40days.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"Cycle time, Overall Product, Spec 117"},{"riskSequence":41,"riskName":"Not achieving pilot series RTY, would delay early ramp of product and ability to deliver per Field Test requirement","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"Manufacturing yield upon transfer, Overall Product, Spec 118"},{"riskSequence":42,"riskName":"Lower yield in mfg may require additional test or rework, impacting the marked-up price of the tool. Current markup is based on very low RTY of the MDT.","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"Manufacturing yield in production, Overall Product, Spec 119"},{"riskSequence":43,"riskName":"The number of suppliers is too high and therefore can not be managed effectivly.","riskSeverity":2,"riskOccurrence":4,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Size of Supplier base, Overall Product, Spec 120"},{"riskSequence":44,"riskName":"Using a \"phase out\" supplier will generate an inevitable costly second sourcing project.","riskSeverity":1,"riskOccurrence":2,"riskScore":2,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Tactical approach, Overall Product, Spec 121"},{"riskSequence":45,"riskName":"If we don't dual source critical items that are critical to performance such as Pump and Motor then we expose the FLCN tool to poor RTY and long timeline to resolve issues.","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Dual sourcing, Overall Product, Spec 122"},{"riskSequence":46,"riskName":"Risk 2","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Supplier Quality, Overall Product, Spec 123"},{"riskSequence":47,"riskName":"Some failed parts can not be identified","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Identification of failed parts in the field, Overall Product, Spec 125"},{"riskSequence":48,"riskName":"Long lead time to reproduce","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"Identification of failed parts in the field, Overall Product, Spec 126"},{"riskSequence":49,"riskName":"Data is not available","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Platform : Tool usage data reporting, Overall Product, Spec 127"},{"riskSequence":50,"riskName":"Data is not available","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Hardware Stress test, Overall Product, Spec 128"},{"riskSequence":51,"riskName":"Not all components are detectable","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Prognostic Health Monitoring (PHM), Overall Product, Spec 129"},{"riskSequence":52,"riskName":"Unavailability of special tools","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Special Field Tool, Overall Product, Spec 130"},{"riskSequence":53,"riskName":"Crew is not trained to handle FLCN bottles","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Rigsite preparation time, Overall Product, Spec 131"},{"riskSequence":54,"riskName":"Handling risk due to FNMS being longer than MRMS","riskSeverity":2,"riskOccurrence":3,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Platform : Rig site efficiency improvement from MDT, Overall Product, Spec 132"},{"riskSequence":55,"riskName":"Time of flight needs to be wrong","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Automated slug capture into sample bottles, Overall Product, Spec 133"},{"riskSequence":56,"riskName":"Insufficient functionality for effective training","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Training Simulator, Overall Product, Spec 134"},{"riskSequence":57,"riskName":"Operations cost (CoSD) is affected by several parameters. MDT current baseline is not well documented.","riskSeverity":5,"riskOccurrence":3,"riskScore":15,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"Cost of service delivery, Overall Product, Spec 135"},{"riskSequence":58,"riskName":"Cost estimate contains assumptions, achieving the target remains uncertain. Cost to buy represents a sizeable portion of TCO and also largely impacts the deployement strategy","riskSeverity":5,"riskOccurrence":3,"riskScore":15,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"FNMS : Capex, Overall Product, Spec 136"},{"riskSequence":59,"riskName":"Cost exceeds target","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"FNSB (FLCN Standard Sample Bottle) : Price, Overall Product, Spec 137"},{"riskSequence":60,"riskName":"Expensive kits will cause field to not purchase from product center","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"M&S cost, Overall Product, Spec 138"},{"riskSequence":61,"riskName":"Phase 1 Field Test date target is uncertain given the project risk level","riskSeverity":4,"riskOccurrence":4,"riskScore":16,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FNMS : Product time to market, Overall Product, Spec 139"},{"riskSequence":62,"riskName":"MaxWell doesnot support required functionality for FNMS","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: MaxWell Surface software, Overall Product, Spec 140"},{"riskSequence":63,"riskName":"FLCN bottle fails DOT certification before field trial","riskSeverity":4,"riskOccurrence":3,"riskScore":12,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FLCN Standard Bottle (FNSB): Schedule for Transport Cerficitaion, Overall Product, Spec 141"},{"riskSequence":64,"riskName":"FLCN bottle DOT certification is delayed","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FLCN Standard Bottle (FNSB): Schedule for Transport Cerficitaion, Overall Product, Spec 141"},{"riskSequence":65,"riskName":"PPE not available or not worn","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"PPE, Overall Product, Spec 143"},{"riskSequence":66,"riskName":"Equipment not available or not properly used","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Mechanical Lifting, Overall Product, Spec 144"},{"riskSequence":67,"riskName":"Equipment not available or not properly used","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Pressure Handling, Overall Product, Spec 145"},{"riskSequence":68,"riskName":"Equipment not available or not properly used","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"H2S Handling, Overall Product, Spec 146"},{"riskSequence":69,"riskName":"Procedure not properly followed","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Injury prevention, Overall Product, Spec 147"},{"riskSequence":70,"riskName":"Risk not identified or adequate controls are not put in place","riskSeverity":5,"riskOccurrence":1,"riskScore":5,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"HARC, Overall Product, Spec 148"},{"riskSequence":71,"riskName":"The tool will not be able to be exported if the TCC classification of its components is not complete.","riskSeverity":2,"riskOccurrence":1,"riskScore":2,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"TCC, Overall Product, Spec 149"},{"riskSequence":72,"riskName":"Risk 3","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"RoHS, Overall Product, Spec 150"},{"riskSequence":73,"riskName":"Internally: EMS will not allow a new tool to be commercialized if it is not WEE and ROHS compliant. If an exemption is needed, usually it delays projects. Externally: A tool that is not ROHS compliant might not be authorized to be exported in Europe.","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"RoHS, Overall Product, Spec 150"},{"riskSequence":74,"riskName":"The ROHS compliance and WEE compliance could increase the price on some of our components.","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"RoHS, Overall Product, Spec 150"},{"riskSequence":75,"riskName":"Risk 4","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"WEEE, Overall Product, Spec 151"},{"riskSequence":76,"riskName":"Risk 5","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"WEEE, Overall Product, Spec 151"},{"riskSequence":77,"riskName":"Risk 6","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"WEEE, Overall Product, Spec 151"},{"riskSequence":78,"riskName":"Risk 7","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"CE, Overall Product, Spec 152"},{"riskSequence":79,"riskName":"Risk 8","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"CE, Overall Product, Spec 152"},{"riskSequence":80,"riskName":"Risk 9","riskSeverity":3,"riskOccurrence":1,"riskScore":3,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"CE, Overall Product, Spec 152"},{"riskSequence":81,"riskName":"Reservoir domain cannot be trained because of lack of training material","riskSeverity":2,"riskOccurrence":1,"riskScore":2,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Training & documentation, Overall Product, Spec 153"},{"riskSequence":82,"riskName":"Operating equipment without training","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Training & documentation, Overall Product, Spec 154"},{"riskSequence":83,"riskName":"Maintaining equipment without training","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Training & Documentation, Overall Product, Spec 155"},{"riskSequence":84,"riskName":"Maintaining equipment without full understanding","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"TBT (Technology based Training), Overall Product, Spec 156"},{"riskSequence":85,"riskName":"Maintaining equipment without understanding tasks and steps","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Maintainance Documentation : Manual, Overall Product, Spec 157"},{"riskSequence":86,"riskName":"Operating equipment without understanding instructions and guidelines","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Operation Documentation: ORM, Overall Product, Spec 158"},{"riskSequence":87,"riskName":"Maintaining equipment without understanding tasks and steps","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Maintainance Documentation : SWI, Overall Product, Spec 159"},{"riskSequence":88,"riskName":"Maintaining equipment without understanding tasks and steps","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Auto TRIM support, Overall Product, Spec 160"},{"riskSequence":89,"riskName":"Product's IP is not protected","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"IP Compliance, Overall Product, Spec 161"},{"riskSequence":90,"riskName":"Sample volume cannot be achieved within tool diameter and lenght constraints","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"FNSB (FLCN Standard Bottle): Volume, FNSB bottle"},{"riskSequence":91,"riskName":"Recovery performance cannot be insured within tool size constraints (diameter and lenght)","riskSeverity":4,"riskOccurrence":1,"riskScore":4,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"Design Specific, Overall Product"},{"riskSequence":93,"riskName":"Target price not achievable reduces the attraction for the large volume non-compensated bottle","riskSeverity":3,"riskOccurrence":4,"riskScore":12,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"FNLB (Non-compensated bottle): price, EC-VB flowlines"},{"riskSequence":94,"riskName":"The devices that require initialization are not defined.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Initialization of FNMS to a known state at power up, Overall Product"},{"riskSequence":95,"riskName":"FNMS Power up Sequence needs to ne defined","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Initialization of FNMS to a known state at power up, Overall Product"},{"riskSequence":96,"riskName":"FNMS power up sequence needs to be defined","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Automatic Initialization  of the FNMS tools at power up., Overall Product"},{"riskSequence":97,"riskName":"The FNMS devices that require Initialization are not defined","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Automatic Initialization  of the FNMS tools at power up., Overall Product"},{"riskSequence":98,"riskName":"FNMS power up initialization takes too long","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Automatic Initialization  of the FNMS tools at power up., Overall Product"},{"riskSequence":99,"riskName":"Current MDT modules sales LT are between 7 to 9 months. To achieve shorter sales lead time for FLCN production, it may require appropriate level of safety stock for long lead time parts. This solution may impact to inventory cost increase.","riskSeverity":3,"riskOccurrence":2,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FTE Sales Lead-time, Overall Product"},{"riskSequence":100,"riskName":"Current MDT RTY results in production are significantly lower than the target. Design and Mfg process improvements needed to achieve the target may not be demonstrated in time for the Pilot Series Build.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Manufacturing yield upon transfer, Overall Product"},{"riskSequence":101,"riskName":"Manufacturing may have capacity constraints such as working space, storage space, labor, manufacturing\/test equipment to handle FLCN and MDT demand simultaneously. The product file may not be mature enough to support this high volume.","riskSeverity":4,"riskOccurrence":3,"riskScore":12,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"FLCN Manufacturing Ramp, Overall Product"},{"riskSequence":102,"riskName":"Lose tracking of critical components to define the life, used environment, implementation of modifications etc�","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Traceability, Overall Product"},{"riskSequence":103,"riskName":"Total improvement from current MDT RTY in production is quite aggressive. Mfg process complexity may not allow us to achieve the target.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Manufacturing yield in production, Overall Product"},{"riskSequence":104,"riskName":"Test coverage issue. For example,  Lite tested PWA from supplier fails at integration test at internal process","riskSeverity":4,"riskOccurrence":2,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Testability Strategy and plan, Overall Product"},{"riskSequence":105,"riskName":"There will be higher chance to receive poor quality components without inspection plan","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Inspection plan, Overall Product"},{"riskSequence":106,"riskName":"Reduce the the overall risk level of our supply base will reduce the risk of disruption.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Risk, Overall Product"},{"riskSequence":107,"riskName":"An OTD below target will increase risk of not being able to deliver tool as per committed date to the segment\/field","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: On Time Delivery, Overall Product"},{"riskSequence":108,"riskName":"An OTS below target will increase the risk of not been able to deliver the tool to our clients on time.","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: On Time Shipment, Overall Product"},{"riskSequence":109,"riskName":"One way to push our suppliers to perform better is to have a contracts in place.","riskSeverity":2,"riskOccurrence":3,"riskScore":6,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Contract, Overall Product"},{"riskSequence":110,"riskName":"If we fail to have our 95% of the parts in less that 90 days then we can increase the risk if not meeting the FTE sales time of 7 months","riskSeverity":2,"riskOccurrence":4,"riskScore":8,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Lead time, Overall Product"},{"riskSequence":111,"riskName":"The risk is to start production with electronic components that are already obsolete and not having enough safety stock or lifetime buy.","riskSeverity":2,"riskOccurrence":2,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"SC: Obsolescence, Overall Product"},{"riskSequence":112,"riskName":"Insufficient FNMS hardware failures simulated to properly test MaxWell software","riskSeverity":3,"riskOccurrence":4,"riskScore":12,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Development Simulator, Overall Product"},{"riskSequence":113,"riskName":"What needs to be reset for a second run? (bottles, etc.)","riskSeverity":3,"riskOccurrence":3,"riskScore":9,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software: Prepare tool for second run, Overall Product"},{"riskSequence":114,"riskName":"Hardware protection for the FNMS is not defined.","riskSeverity":2,"riskOccurrence":2,"riskScore":4,"riskExposureCategorySequence":1,"riskExposureCategoryName":"Performance","placesUsed":"Software protection of hardware, Overall Product"},{"riskSequence":115,"riskName":"PHM based approach may increase cost of M&S kits","riskSeverity":2,"riskOccurrence":3,"riskScore":6,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"Cost of service delivery, Overall Product"},{"riskSequence":116,"riskName":"Development cost exceeds target","riskSeverity":2,"riskOccurrence":4,"riskScore":8,"riskExposureCategorySequence":3,"riskExposureCategoryName":"Cost","placesUsed":"FNMS & Standard sample bottle development cost, Overall Product"},{"riskSequence":117,"riskName":"Not Called out on Test Spec or dwg-Make sure components can survive test pressure-Damaged Components","riskSeverity":5,"riskOccurrence":2,"riskScore":10,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"FNMS : Max Temperature Rating, Electronic Cartridge, Spec 12"},{"riskSequence":118,"riskName":"Not Called out on Test Spec or dwg-Make sure components can survive test pressure-Damaged Components","riskSeverity":5,"riskOccurrence":2,"riskScore":10,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"FNMS : Max Temperature Rating, Electronic Cartridge, Spec 12"},{"riskSequence":121,"riskName":"(TBD)","riskSeverity":null,"riskOccurrence":null,"riskScore":null,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"Design Specific, Overall Product"},{"riskSequence":122,"riskName":"(TBD)","riskSeverity":null,"riskOccurrence":null,"riskScore":null,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"FNMS : Module Weight, Overall Product, Spec 1"},{"riskSequence":123,"riskName":"(TBD)","riskSeverity":1,"riskOccurrence":1,"riskScore":1,"riskExposureCategorySequence":2,"riskExposureCategoryName":"Schedule","placesUsed":"FNMS : Module Weight, Overall Product"},{"riskSequence":124,"riskName":"(TBD)","riskSeverity":2,"riskOccurrence":2,"riskScore":4,"riskExposureCategorySequence":null,"riskExposureCategoryName":null,"placesUsed":"FNMS : Module Weight, Overall Product"}]};
        return theData;
    }
});

Ext.define('COMMON.proxy.soapProxy', {
    extend:  Ext.data.soap.Proxy , // Ajax, Rest or JsonP, as appropriate 
    alias: 'proxy.SoapProxy',

    prefix: '',
    namespace: 'http://tempuri.org/',
    ns: ' xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"' +
              ' xmlns:a="http://schemas.datacontract.org/2004/07/SLB.EMSPortal.Services.Contracts"' +
              ' xmlns:i="http://www.w3.org/2001/XMLSchema-instance"',

    constructor: function (config) {
        this.service = config.service || {};
        this.method = config.method || {};
        this.serviceinterface = config.serviceinterface || {};
        this.record = config.record || {};

        this.soapAction = {
            read: this.namespace + this.serviceinterface + '/' + this.method
        };
        this.api =  {
            read: this.method
        };
        this.url = 'http://' + location.hostname + ':8080/' + this.service + '.svc';  //o.theUrl,
        this.targetNamespace = this.namespace;
        this.reader = {
            type: 'soap',
            record: this.record
        };
        this.envelopeTpl = [
            '<s:Envelope' + this.ns + '>',
                '{[values.bodyTpl.apply(values)]}',
            '</s:Envelope>'
        ];

        this.readBodyTpl = [
            '<s:Body>',
                '<' + this.prefix + '{operation} xmlns="' + this.namespace + '">',
                    '<tpl foreach="params">',
                        '<{$}>{.}</{$}>',
                    '</tpl>',
                '</' + this.prefix + '{operation}>',
            '</s:Body>'
        ];
        this.defaultHeaders = { 'content-type': "text/xml; charset=utf-8" };

        config.soapAction = this.soapAction;
        config.api = this.api;
        config.url = this.url;
        config.targetNamespace = this.targetNamespace;
        config.reader = this.reader;
        config.envelopeTpl = this.envelopeTpl;
        config.readBodyTpl = this.readBodyTpl;
        config.defaultHeaders = this.defaultHeaders;

        this.callParent(arguments);
    }
});


Ext.define('COMMON.NavigationContext', {
    config: {
        activeApplication: null,
        activeContext: null,
        //activeContextInstance
        activePanel: '',
        activeItem: ''


        //activeEntity
        //activeEntityInstance
        //activeDashboard
        //activeViewer

    },

    //    setActiveContext: function (value) {
    ////        alert('set: ' + value);
    //        return value;
    //    },


    //    applyActiveContext: function (value) {
    // //       alert('apply: ' + value);
    //        return value;
    //    },

    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },

    setContext: function (context) {
        Ext.getCmp('tb' + context).toggle(true, true);
        this.setActiveContext(context);
        this.setActiveApplication(context + constants.application);
        this.setActivePanel(getObj(this.getActiveApplication()).getCurrentPanel());

        //console.info('navContext.setContext:');
        //console.info(this);

        //       getObj('nav').setContext(context);
        getObj('center').setContext(context);
    },

    setTheActivePanel: function (context, panel) {
        console.info('setTheActivePanel' + ' - context: ' + context + ' - panel: ' + panel);
        getObj('tb' + context).toggle(true, true);
        this.setActiveContext(context);
        //this.activeNavObj = getObj(context + 'nav');
        //this.activeAppObj = getObj(context + 'app');
        this.setActiveApplication(context + EMSPEED.config.Constants.application);
        this.setActivePanel(panel);
        getObj(this.getActiveApplication()).setCurrentPanel(panel);
        //this.activeAppObj.setCurrentPanel(panel);
        //       getObj('nav').setContext(context);
        getObj('center').setContext(context);
    },

    setTheActiveItem: function (context, item) {
        if (this.activeContext == context) {
            var oldItem = this.activeItem;
            var newItem = item;
            this.activeContext = context;
            //            this.activeNavObj = getObj(context + 'nav');
            //this.activeAppObj = getObj(context  + EMSPEED.config.Constants.application);
            this.setActiveApplication(context + EMSPEED.config.Constants.application);
            var activeAppObj = getObj(this.getActiveApplication());
            this.activeItem = item;

            this.activeAppObj.currentItem = this.activeItem;

            var o = activeAppObj.items.items;
            Ext.Object.each(o, function (theIndex, theItem, allItems) {
                console.log(theItem.id);
                theItem.itemChanged(oldItem, newItem);
            });

            //           getObj('nav').setContext(context);
            getObj('center').setContext(context);
        }
        else {
            this.setContext(context);
            console.log('setTheActiveItem: activeContext,' + this.activeContext + ' new context,' + context);
        }

    },

    logContext: function () {
        console.log('activeContext: ' + this.getActiveContext());
        //       console.log('activeNavObj: ' + this.activeNavObj.id);
        console.log('activeApplication: ' + this.activeApplication);
        //        console.log('activeViewerObj: ' + this.activeViewerObj.id);
        console.log('activePanel: ' + this.activePanel);
        console.log('activeItem: ' + this.activeItem);

        try {
            console.log('projectapp currentPanel: ' + getObj('projectapp').currentPanel);
        }
        catch (e) {
            console.log('projectapp currentPanel: error');
        };

    }
});

var EMSPEED_VERSION = "EPort_1.2_163";

var siteRoot = 'http://' + location.hostname + ':' + location.port + '/';
var layoutsFolder = '/_layouts/EMSPortal/';
var imagesFolder = layoutsFolder + 'common/resources/images/';
var l = Ext.Loader.setConfig({
    enabled: true,
    paths: {
        'Ext.ux.chart': layoutsFolder + 'common/SmartLegend',
        'Ext.ux': layoutsFolder + 'common/ux',
        'EMSPEED': layoutsFolder + 'app',
        'Ext.portal': layoutsFolder + 'common/portal',
        'COMMON': layoutsFolder + 'common',
        'Ext.data.soap': layoutsFolder + 'common/soap'
    }
});

var navContext;
var theViewport = '';

Ext.application({
               
                                                           
                                               
                                                                           
                                                           
                                                         
                                                                 
                                                             
                                                               
                                                       
                                                       
                                                                   
                                                           
                                                              
                                                                    
                                                                  
                                                                      
                                                                  
                                                              
                                                                
                                                       
                                                 
                                                   
                                                         
                                                               
                                                         
                                                         

                                                             
                                                             
                                                                     
                                                                 
                                                   
                                                             
                                                         

                                    
                                   
                                 
                              
                        
	  
    controllers: [
        'EMSPEED.baseclass.controller.baseclassController',
        'EMSPEED.cdp.controller.cdpController',
        'EMSPEED.contextcontroller.controller.contextcontrollerController',
        'EMSPEED.dashboard.controller.dashboardController',
        'EMSPEED.feedback.controller.feedbackController',
        'EMSPEED.editteamsite.controller.editteamsiteController',
        'EMSPEED.myprojects.controller.myprojectsController',
        'EMSPEED.interactive.controller.interactiveController',
        'EMSPEED.pmtview.controller.pmtviewController',
        'EMSPEED.project.controller.projectController',
        'EMSPEED.projectheader.controller.projectheaderController',
        'EMSPEED.provision.controller.provisionController',
        'EMSPEED.reporting.controller.reportingCdpController',
        'EMSPEED.reporting.controller.reportingCdpForPddController',
        'EMSPEED.reporting.controller.reportingFiltersController',
        'EMSPEED.reporting.controller.reportingInteractiveController',
        'EMSPEED.reporting.controller.reportingManagerController',
        'EMSPEED.reporting.controller.reportingRawController',
        'EMSPEED.reporting.controller.reportingSortsController',
        'EMSPEED.stature.controller.statureController',
        'EMSPEED.tabs.controller.tabsController',
        'EMSPEED.tasks.controller.tasksController',
        'EMSPEED.teamsite.controller.teamsiteController',
        'EMSPEED.usersinrole.controller.usersinroleController',
        'EMSPEED.viewport.controller.viewportController',
        'EMSPEED.clonepmt.controller.clonepmtController',

        'EMSPEED.pddsummary.controller.pddsummaryController',
        //'EMSPEED.snapshots.controller.snapshotsController',
        'EMSPEED.createsnapshot.controller.createsnapshotController',
        'EMSPEED.loadsnapshot.controller.loadsnapshotController',
        //'EMSPEED.team.controller.teamController',
        'EMSPEED.manageteam.controller.manageteamController',
        'EMSPEED.viewteam.controller.viewteamController'

    ],
    name: 'EMSPEED',
    appFolder: layoutsFolder + 'app',
    autoCreateViewport: false,

    launch: function () {
        Ext.tip.QuickTipManager.init();
        //this.initialiseHistory();
        navContext = Ext.create('COMMON.NavigationContext', { activeItem: 'bob' });

        //Ext.create('EMSPEED.testPanel', { renderTo: document.body });
        //if (Ext.get('loading') !== null) { Ext.get('loading').remove(); }
        //return;

        theViewport = Ext.create('Ext.container.Viewport', {
            layout: {
                type: 'border',
                padding: '0 40 0 40'
            },
            border: false,
            items: [
                { xtype: 'viewportNorth' },
                { xtype: 'viewportCenter', border: false },
                { xtype: 'container', region: 'west', width: 30 },
                { xtype: 'container', region: 'east', width: 30, border: false },
                { xtype: 'viewportSouth' }

            //{ xtype: 'container', region: 'center' },
            //{ xtype: 'container', region: 'west', width: 30, items: [{ xtype: 'tabsBasePanel'}] },            
            ]
        });

        if (Ext.get('divloading') !== null) {
            //Ext.get('divloading').remove();
            Ext.get('divloading').dom.style.display = 'none'
        }
        //Ext.useShims = true;
    }


});


//handleHistoryChange: function (token) {
//    var theItem;
//    //        var token = token || &quot;&quot;;
//    switch (token) {
//        case "'reporting'": theItem = 'reporting'; break;
//        case "'reporting:reporttypespage'": Ext.getCmp('reportingBasePanel').reporttypespage(); theItem = 'reporting'; break;
//        case null: theItem = 'dashboard'; break;
//    }
//    Ext.getCmp('projectApplication').setActivePanel(theItem + 'BasePanel');

//},

//initialiseHistory: function () {
//    this.historyForm = Ext.getBody().createChild({
//        tag: 'form',
//        action: '#',
//        cls: 'x-hidden',
//        id: 'history-form',
//        children: [
//      {
//          tag: 'div',
//          children: [
//          {
//              tag: 'input',
//              id: Ext.History.fieldId,
//              type: 'hidden'
//          },
//          {
//              tag: 'iframe',
//              id: Ext.History.iframeId
//          }
//        ]
//      }
//    ]
//    });
//    Ext.History.init();
//    Ext.History.on('change', this.handleHistoryChange, this);
//}



//var thePanels = [
//    'project',
//    'viewport',
//    'baseclass',
//    'dashboard',
//    'reporting',
//    'snapshots',
//    'team',
//    'stature',
//    'cdp'
//];

//var len=thePanels.length;
//for(var i=0; i<len; i++) {
////    alert(thePanels[i]);
//}

Ext.define('EMSPEED.dashboard.model.dashboardSubProjectsModel', {
    extend:  Ext.data.Model ,
    fields: ['projectId', 'projectName', 'projectManager', 'productChampion', 'timeSpanFromLastUpdate']
});



Ext.define('EMSPEED.dashboard.store.dashboardSubProjectsStore', {
    extend:  Ext.data.Store ,
    model: 'EMSPEED.dashboard.model.dashboardSubProjectsModel',
    storeId: 'dashboardSubProjectsStore',
                                                                        
    autoLoad: true,
    buffered: false,
    proxy: {
        type: com.proxy,
        service: 'ProjectService',
        method: 'GetProgram',
        root: 'data',
        jsonData: {
            "filter": {
                "projectId": parseFloat(com.getProjectId()),
                "depth": 1,
                "loadRoot": true,
                "loadBaseAttributes": true,
                "loadAuditInfo": true,
                "loadLevelInfo": true,
                "loadManagement": true,
                "loadDfxKpis": true,
                "loadPmtKpis": true,
                "loadUrls": true,
                "displayType": 1
            }
        }
    }


    //proxy: {
    //    type: 'memory',
    //    reader: {
    //        type: 'json',
    //        root: 'items'
    //    }
    //},

    //data: getTheData()
});


'use strict';

// coming soon

var win2;

Ext.define('EMSPEED.project.view.EMSPEEDButton', {
    extend:  Ext.button.Button ,
    alias: 'widget.EMSPEEDButton',
    enableToggle: true,
    textAlign: 'left',
    //width: '500px',
    clearStatus: function (o) {
        Ext.getCmp('basic-statusbar').clearStatus();
        var w = Ext.getCmp(o);
        w.setLoading(false);
    },

    handler: function (btn, e, eOpts) {
        //Ext.History.add("'" + btn.id + "'");
        document.title = "EMSPEED - " + btn.id;
        Ext.getCmp('projectApplication').setActivePanel(btn.id + 'BasePanel');
        return;


        //Ext.History.add("'" + 'reporting:reporttypespage' + "'");

        if (btn.id === 'QA86478' || btn.id === 'QA91522') {
            //Ext.getCmp('basic-statusbar').showBusy();
            var iframeWin = document.getElementById("iframe-simpleIframe").contentWindow;
            iframeWin.postMessage(btn.id, 'http://localhost:214');
            //iframeWin.postMessage("QA91522", 'http://localhost:214');

            // var w = Ext.getCmp('project' + btn.id + 'Panel');
            // w.setLoading('Working...');

            // Ext.defer(this.clearStatus, 4000, this, ['project' + btn.id + 'Panel'])
        }
        else {
            //    Ext.defer(EMSPEED.common.Notification.showToast, 0, this, ['You clicked on...', btn.text])
            //    Ext.getCmp('basic-statusbar').showBusy();

            switch (btn.id) {

                case 'btnAddWidget':
                    //alert('btnAddWidget');

                    if (!win2) {


                        var form2 = Ext.widget('form', {
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            border: false,
                            bodyPadding: 10,

                            fieldDefaults: {
                                labelAlign: 'top',
                                labelWidth: 100,
                                labelStyle: 'font-weight:bold'
                            },
                            defaults: {
                                margins: '0 0 10 0'
                            },

                            items: [
                { xtype: 'container', html: 'Add Pie Widget (will be aded to bottom of right column...)' }
                ],

                            buttons: [

                {
                    text: 'OK',
                    handler: function () {
                        //Ext.getCmp('dashboardMainPanel')
                        //Ext.getCmp('dashboardMainPanel').items.items[0].items.items.push({ xtype: 'dashboardPortletPie', height: 200 });

                        //Ext.getCmp('col-1').add({ xtype: 'dashboardPortletPie', height: 200 }, 0);
                        Ext.getCmp('col-3').add({ xtype: 'dashboardPortletPie', height: 200 }, 0);


                        if (this.up('form').getForm().isValid()) {
                            // In a real application, this would submit the form to the configured url
                            // this.up('form').getForm().submit();
                            //this.up('form').getForm().reset();
                            this.up('window').hide();
                            //portlet.setLoading(false);
                        }
                    }
                },

                {
                    text: 'Cancel',
                    handler: function () {
                        //this.up('form').getForm().reset();
                        this.up('window').hide();
                        //portlet.setLoading(false);

                        //            this.hide();

                    }
                }
            ]





                        });


                        win2 = Ext.widget('window', {
                            id: 'theWindow',
                            title: 'Add a Widget',
                            closeAction: 'hide',
                            width: 400,
                            height: 400,
                            minHeight: 400,
                            layout: 'fit',
                            resizable: true,
                            modal: true,
                            items: form2
                        });
                    }
                    win2.show();

                    break;
                //                case 'dashboard':  
                //                case 'reporting':  
                //                case 'cdp':  
                //                    Ext.getCmp('projectApplication').setActivePanel(btn.id + 'BasePanel');  
                //                    break;  
                default:
                    debugger;
                    Ext.getCmp('projectApplication').setActivePanel(btn.id + 'BasePanel');
            }


        }
        var top = btn.up('container');
        Ext.Array.each(top.items.items, function (b, index, buttons) {
            if (b.xtype === 'EMSPEEDButton') {
                if (b.id != btn.id) {
                    Ext.getCmp(b.id).toggle(false, true);
                }

            }
        })
        //Ext.getCmp('basic-statusbar').clearStatus();
    }
});

Ext.define('EMSPEED.project.view.projectSummaryHeaderPanel', {
    extend:  EMSPEED.baseclass.view.baseclassContainer ,
    alias: 'widget.projectSummaryHeaderPanel',
    id: 'projectSummaryHeaderPanel',
    style: {
        backgroundColor: COMMON.backgroundColor
    },
    dock: 'top',
    layout: 'hbox',




    items: [
    //        { xtype: 'image', src: 'wireframes/summaryheader.jpg', height: '100px' },
   //     {xtype: 'image', margin: '0 0 1px 20px', src: project.imagesFolder + 'EMSPEED.jpg' },
    //        {
    //            xtype: 'toolbar',
    //            items: [
//        {xtype: 'image', id: 'summaryheader', margin: '0 0 0 0', src: project.imagesFolder + 'wireframes/menuspacer.png', width: '100px', height: '90px' },
//        { xtype: 'image', margin: '0 0 0 50', src: project.imagesFolder + 'wireframes/summaryheaderMAD.png', height: '90px' },
//                {
//                xtype: 'button',
//                margin: '0 0 15px 60px',
//                enableToggle: true,
//                text: 'show',
//                scope: this,

//                handler: function (btn, e, eOpts) {
//                    Ext.getCmp('pddSummary').setVisible(btn.pressed);
//                    if (btn.pressed === true) {
//                        btn.setText('show');
//                    }
//                    else {
//                        btn.setText('show');

//                    }
//                }
//            },
    //            ]
    //        },
        { xtype: 'image', id: 'pddSummary', hidden: true, src: project.imagesFolder + 'wireframes/summarydetail.png', margin: '0 0 0 240px' }
    //        {
    //            xtype: 'fieldset',
    //            margin: '0 0 0 160px',
    //            labelAlign: 'right',
    //            autoHeight: true,
    //            layout: 'column',
    //            buttonAlign: 'right',
    //            bodyStyle: 'align:center',
    //            border: false,
    //            margin: '0 0 0 0',
    //            padding: '0 5 0 5',
    //            listeners: {
    //                beforeshow: onBeforeShow,
    //                beforehide: onBeforeHide
    //            },
    //            title: 'More...',
    //            collapsible: true,
    //            collapsed: true,
    //            layout: 'anchor',
    //            items: [
    //                { xtype: 'image', src: 'wireframes/summarydetail.png', margin: '0 0 0 173px' }
    //            ]
    //        }
    ]

});

function onBeforeShow(me, eOpts ) {
    alert('onBeforeShow');
}

function onBeforeHide(me, eOpts ) {
    alert('onBeforeHide');
}


//        {
//            xtype: 'displayfield',
//            id: 'txtProjectLabel',
//            fieldStyle: {
//                color: '#000000',
//                font: 'normal 12px tahoma, arial, verdana, sans-serif',
//                marginTop: '5px',
//                marginLeft: '10px'
//            },
//            value: 'Project:'
//        },
//        {
//            xtype: 'displayfield',
//            id: 'txtProject',
//            fieldStyle: {
//                color: '#000000',
//                font: 'normal 18px tahoma, arial, verdana, sans-serif',
//                marginTop: '-5px',
//                marginLeft: '10px'
//            },
//            value: 'No Project Selected'
//        }
//        ,

Ext.define('EMSPEED.snapshots.model.snapshotsHistoryModel', {
    extend:  Ext.data.Model ,
    fields: [
        { name: 'id', type: 'int', mapping: 'id' },
        { name: 'name', type: 'string', mapping: 'name' },
        { name: 'comment', type: 'string', mapping: 'comment' },
        { name: 'timestamp', type: 'string', mapping: 'timestamp' },
        { name: 'pmt', type: 'string', mapping: 'pmt' },
        { name: 'dfx', type: 'string', mapping: 'dfx' }
    ]
});

Ext.define('EMSPEED.snapshots.view.snapshots', {
    singleton: true,
    alternateClassName: 'snapshots',

    constructor: function () {
        this.imagesFolder = com.appFolder + '/snapshots' + '/resources/images/';
        this.siteRoot = 'http://' + location.hostname + ':' + location.port + '/';
        this.serviceRoot = 'http://' + location.hostname + ':8095/';
        this.getSnapshotsHistoryUrl = com.appFolder + '/snapshots/data/snapshotsHistory.jso';
//        this.getReportTypesUrl = this.serviceRoot + 'ReportConfigurationService.svc/json/GetReportTypes';
//        this.getReportTypesMethod = 'POST';

        this.callParent(arguments);
    }

});

Ext.define('EMSPEED.snapshots.view.snapshotsBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.snapshotsBasePanel',
    id: 'snapshotsBasePanel',
    layout: 'absolute',
    initComponent: function () {
        this.items = [
//        { xtype: 'snapshotsCreateSnapshot' },
//        { xtype: 'snapshotsHistory' }
          { xtype: 'image', src: project.imagesFolder + 'wireframes/snapshot2.jpg' }
        ];
        this.callParent(arguments);
        this.setTheTitle('Snapshots');
    }
});

Ext.define('EMSPEED.snapshots.view.snapshotsCommonFieldSet', {
    extend:  Ext.form.FieldSet ,
    alias: 'widget.snapshotsCommonFieldSet',
    collapsible: false,
    collapsed: false,
    border: true,
    style: {
        fontFamily: 'Univers 57 condensed',
        color: '#000000',
        fontSize: '14px',
        borderColor: '#cccccc',
        borderStyle: 'solid'
    },
    margin: '10 10 10 10'
});

Ext.define('EMSPEED.snapshots.view.snapshotsCreateSnapshot', {
    extend:  EMSPEED.snapshots.view.snapshotsCommonFieldSet ,
    alias: 'widget.snapshotsCreateSnapshot',
    id: 'snapshotsCreateSnapshot',
    layout: 'vbox',
    title: 'Create Snapshot',
    width: '100%',
    items: [{
        xtype: 'container',
        layout: 'hbox',
        margin: '10 0 10 0',
        items: [
        { xtype: 'textfield', name: 'snapshotName', fieldLabel: 'Snapshot Name', margin: '0 5 0 10', flex: 3, labelAlign: 'left' },
        { xtype: 'textfield', name: 'comment', fieldLabel: 'Comment', margin: '0 5 0 10', flex: 4, labelAlign: 'left' },
        { xtype: 'button', margin: '0 5 0 10', flex: 1, id: 'btnCreateSnapshot', flex: 1, text: 'Create' },
        { xtype: 'button', margin: '0 5 0 10', flex: 1, id: 'btnCancelSnapshot', flex: 1, text: 'Cancel' }
        ]
    }
    ]
});


Ext.define('EMSPEED.snapshots.view.snapshotsHistory', {
    extend:  EMSPEED.snapshots.view.snapshotsCommonFieldSet ,
    alias: 'widget.snapshotsHistory',
    layout: 'vbox',
    title: 'Snapshot History',
               
                                          
      
    width: '100%',
    items: [{
            xtype: 'grid',
            id: 'gridSnapshotHistory',
            width: '100%',
            disableSelection: true,
            enableCtxMenu: false,  // turn off header context menu
            enableColLock: false,  // turn off column lock context items
            enableColumnMove: false,  // turn off column reorder drag drop
            enableColumnResize: false,  // turn off column resize for whole grid
            enableRowHeightSync: true,
            margin: '10 0 10 0',
            store: Ext.create('Ext.data.Store', {
                model: 'EMSPEED.snapshots.model.snapshotsHistoryModel',
                proxy: {
                    type: 'ajax',
                    url: com.appFolder + '/snapshots/data/snapshotsHistory.jso',
                    reader: {
                          type: 'json'
                    }
                }
            }),
            columns: [
                {
                    header: 'Name',
                    dataIndex: 'name',
                    flex: 3,
                    sortable: false,
                    menuDisabled: true,
                    renderer: function (value, meta, record) {
                        meta.tdAttr = 'data-qtip="' + record.get('name') + '"';
                        return value;
                    }
                },
                {
                    header: 'Comment',
                    dataIndex: 'comment',
                    flex: 4,
                    sortable: false,
                    menuDisabled: true,
                    renderer: function (value, meta, record) {
                        meta.tdAttr = 'data-qtip="' + record.get('comment') + '"';
                        return value;
                    }
                },
                {
                    header: 'Date/Timestamp',
                    dataIndex: 'timestamp',
                    flex: 2,
                    sortable: false,
                    menuDisabled: true,
                    renderer: function (value, meta, record) {
                        meta.tdAttr = 'data-qtip="' + record.get('timestamp') + '"';
                        return value;
                    }
                },
                {
                    header: 'PMT',
                    dataIndex: 'pmt',
                    flex: 1,
                    sortable: false,
                    menuDisabled: true,
                    renderer: function (value, meta, record) {
                        meta.tdAttr = 'data-qtip="' + record.get('pmt') + '"';
                        return value;
                    }
                },
                {
                    header: 'DfX',
                    dataIndex: 'dfx',
                    flex: 1,
                    sortable: false,
                    menuDisabled: true,
                    renderer: function (value, meta, record) {
                        meta.tdAttr = 'data-qtip="' + record.get('dfx') + '"';
                        return value;
                    }
                }
            ]
        }
    ]
});


Ext.define('EMSPEED.snapshots.controller.snapshotsController', {
    extend:  Ext.app.Controller ,
               
                                                        
                                           
                                                    
                                                         
                                                  
                                                        
      

    init: function () {
        this.control({
            '#snapshotsBasePanel': { activate: this.snapshotsBasePanel_activate }
        });
    },

    snapshotsBasePanel_activate: function (panel, e, eOpts) {
//        debugger;
//        var grdSnapshotsHistory = Ext.getCmp('gridSnapshotHistory');

//        var theStore = Ext.create('Ext.data.Store', {
//            model: 'EMSPEED.snapshots.model.snapshotsHistoryModel',
//            autoload: true,
//            proxy: {
//                type: 'ajax',
//                url: com.appFolder + '/snapshots/data/snapshotsHistory.jso',
//                reader: {
//                      type: 'json'
//                }
//            }
//        });

//        grdSnapshotsHistory.reconfigure(theStore);

//        theStore.loadData;
    }
});

Ext.define('EMSPEED.team.view.teamBasePanel', {
    extend:  EMSPEED.baseclass.view.baseclassPanel ,
    alias: 'widget.teamBasePanel',
    //layout: 'absolute',
    id: 'teamBasePanel',

    initComponent: function () {

        this.items = [
            {
                xtype: 'tabpanel',
                margin: '10 0 0 0', 
                tabBar: {
                    style: {backgroundColor: '#FFFFFF' },
                    bodyStyle: { backgroundColor: '#FFFFFF' }
                },
                items: [
                    {
                        title: 'Manage Team',
                        xtype: 'container',
                        html: '<div style=xmin-height:600px; xwidth:100%; overflow:auto;"><object data="data:application/x-silverlight-2," type="application/x-silverlight-2" height="600px" width="975px" ><param name="windowless" value="true" /><param name="background" value="transparent" /><param name="source" value="/_layouts/clientbin/emsportal/ManageTeam.xap"/><param name="onError" value="onSilverlightError" /><param name="background" value="white" /><param name="minRuntimeVersion" value="4.0.50401.0" /><param name="autoUpgrade" value="true" /><a href="http://go.microsoft.com/fwlink/?LinkID=149156&v=4.0.50401.0" style="text-decoration:none"><img src="http://go.microsoft.com/fwlink/?LinkId=161376" alt="Get Microsoft Silverlight" style="border-style:none"/></a></object><iframe id="_sl_historyFrame" style="visibility:hidden;height:0px;width:0px;border:0px"></iframe></div>'
                    },
                    {
                        title: 'Stakeholders',
                        xtype: 'usersinroleBasePanel'
                    }                    
                ]
            }
        ];
        this.callParent(arguments);
        this.setTheTitle('Project Team');
    }
});

Ext.define('EMSPEED.team.controller.teamController', {
    extend:  Ext.app.Controller ,
               
                                         
      

    init: function () {
        this.control({
            //            '#teamBasePanel': { activate: this.teamBasePanel_activate }
        });
    }

//    teamBasePanel_activate: function (panel, e, eOpts) {
//        Ext.util.Cookies.set('projectId', '12345');
//        // alert('teamMainPanel_activate');
//    }

});

Ext.define('EMSPEED.usersinrole.model.forumthreadModel', {
    extend:  Ext.data.Model ,
    fields: [
            'title', 'forumtitle', 'forumid', 'username',
            { name: 'replycount', type: 'int' },
            { name: 'lastpost', mapping: 'lastpost', type: 'date', dateFormat: 'timestamp' },
            'lastposter', 'excerpt', 'threadid'
        ],
    idProperty: 'threadid'
});

Ext.define('EMSPEED.usersinrole.model.usersinroleModel', {
    extend:  Ext.data.Model ,
    fields: [
        { name: 'name', type: 'string' },
        { name: 'role', type: 'string' }
    ]
});

Ext.define('EMSPEED.usersinrole.store.forumthreadStore', {
    extend:  Ext.data.Store ,
    pageSize: 10,
    model: 'EMSPEED.usersinrole.model.forumthreadModel',
    proxy: {
        // load using script tags for cross domain, if the data in on the same domain as
        // this page, an HttpProxy would be better
        type: 'jsonp',
        url: 'http://www.sencha.com/forum/topics-browse-remote.php',
        reader: {
            root: 'topics',
            totalProperty: 'totalCount'
        },
        // sends single sort as multi parameter
        simpleSortMode: true
    },


    remoteSort: true,
    sorters: [{
        property: 'title',
        direction: 'ASC'
    }],
    autoLoad: true
});

Ext.define('EMSPEED.usersinrole.store.usersinroleStore', {
    extend:  Ext.data.Store ,
    model: 'EMSPEED.usersinrole.model.usersinroleModel',
    proxy: {
        type: 'ajax',
        url: '/_layouts/EMSPortal/data/userroles.jso',
        reader: {
            root: 'data',
            type: 'json'
        }
    },
    autoLoad: true
});

Ext.define('COMMON.AspNetJsonReader', {
    extend:  Ext.data.JsonReader ,
    read: function (response) {
        console.log('in the read');
        var json = response.responseText;
        var o = eval('(' + json + ')');

        if (o.hasOwnProperty('d'))
            return this.readRecords(o.d);
        else
            return this.readRecords(o);
    }
});

/// <reference path="/Scripts/ext-all-debug.js" />

Ext.define('COMMON.AspWebAjaxProxy', {
    extend:  Ext.data.proxy.Ajax ,
    require: 'Ext.data',

    constructor: function (config) {
        this.initConfig(config);
        return this.callParent(arguments);
    },

    buildRequest: function (operation) {
        //console.log('operation');
        //console.log(operation);

        var params = Ext.applyIf(operation.params || {}, this.extraParams || {}),
                                request;
        params = Ext.applyIf(params, this.getParams(params, operation));
        if (operation.id && !params.id) {
            params.id = operation.id;
        }
        //console.info('1');
        //console.info(params);
        params = Ext.JSON.encode(params);
        //console.info('2');
        //console.info(params);
        request = Ext.create('Ext.data.Request', {
            params: params,
            action: operation.action,
            records: operation.records,
            operation: operation,
            url: operation.url
        });
        request.url = this.buildUrl(request);

        //console.log('request.jsonData:');
        //console.log(request.jsonData);
        //request.jsonData = '{d: [{ "a": 1 },{ "a": 2 }] }';

        operation.request = request;
        //console.info(request);
        return request;
        //return this.callParent(arguments);

    }
});


Ext.define('COMMON.Constants', {
  alternateClassName: 'constants',

  statics: {
    //backgroundColor: '#4E78B1',
    //backgroundColor: '#D4DBE6',
    //backgroundColor: '#F6F6F6',
      backgroundColor: '#E9E9E9',
    
    application: 'Application'
  }
});

function getObj(item) {
    return Ext.getCmp(item);
    //return Ext.ComponentManager.get(item);
}

function globalSetContext(context) {
    console.log('globalSetContext: ' + context);
    navContext.setContext(context);
}

this.tooltip = function () {
    var xOffset = 10,
        yOffset = 20;
    // these 2 variable determine popup's distance from the cursor
    // you might want to adjust to get the right result		

    
    $(document).on('mouseenter', '.emspeed-tooltip', function (e) {
        this.t = $(this).attr('data-tooltip');
        $("body").append("<p id='tooltip'>" + this.t + "</p>");
        $("#tooltip")
            .css("top", (e.pageY - xOffset) + "px")
            .css("left", (e.pageX + yOffset) + "px")
            .fadeIn("fast");
        
    }).on('mouseleave', '.emspeed-tooltip', function () {
        $("#tooltip").remove();
    });


    $(document).on('mousemove', '.emspeed-tooltip', function (e) {
        $("#tooltip")
            .css("top", (e.pageY - xOffset) + "px")
            .css("left", (e.pageX + yOffset) + "px");
    });
};

$(function () {
    tooltip();
});

Ext.define('COMMON.Notification', {
    statics: {
        msgCt: null,
        showToast: function (title, details) {
            if (!EMSPEED.common.Notification.msgCt) {
                EMSPEED.common.Notification.msgCt = Ext.DomHelper.insertFirst(document.body, { id: 'msg-div' }, true);
            }
            //var s = Ext.String.format.apply(String, Array.prototype.slice.call(arguments, 1));
            var s = details;
            var m = Ext.DomHelper.append(EMSPEED.common.Notification.msgCt, EMSPEED.common.Notification.createBox(title, s), true);
            m.hide();
            m.slideIn('b').ghost("b", { delay: 7000, remove: true });
        },
        createBox: function (t, s) {
            // return ['<div class="msg">',
            //         '<div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div>',
            //         '<div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3>', t, '</h3>', s, '</div></div></div>',
            //         '<div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div>',
            //         '</div>'].join('');
            return '<div class="msg"><h3>' + t + '</h3><p>' + s + '</p></div>';
        }
    }
});

/*
    Chart Legend item with no additional features; some methods are refactored
    for better flexibility.
    
    This class contains almost 100% Sencha code so I am not releasing it
    but providing it as an example under the same terms as Ext JS itself.
    Hmm. Not sure I can do this, even.
    
    This class is not intended to be used directly.
*/

Ext.define('Ext.ux.chart.LegendItem', {
    extend:  Ext.chart.LegendItem ,

    // Controls Series visibility
    hiddenSeries: false,

    // These are cached for quick lookups
    label: undefined,
    mask: undefined,

    /**
    * Creates all the individual sprites for this legend item
    */
    createLegend: function (config) {
        var me = this,
            series = me.series,
            index = config.yFieldIndex;

        me.label = me.createLabel(config);
        me.createSeriesMarkers(config);

        me.setAttributes({
            hidden: false
        }, true);

        me.mask = me.createMask(config);

        me.yFieldIndex = index;

        // Add event listeners
        me.on('mouseover', me.onMouseOver, me);
        me.on('mouseout', me.onMouseOut, me);
        me.on('mousedown', me.onMouseDown, me);

        if (!series.visibleInLegend(index)) {
            me.hiddenSeries = true;
            me.label.setAttributes({
                opacity: 0.5
            }, true);
        };

        // Relative to 0,0 at first so that the bbox is calculated correctly
        me.updatePosition({ x: 0, y: 0 });
    },

    /**
    * @private Retrieves text to be displayed as item label.
    */
    getLabelText: function () {
        var me = this,
            series = me.series,
            idx = me.yFieldIndex;

        function getSeriesProp(name) {
            var val = series[name];
//            debugger;
//            var s = (Ext.isArray(val) ? val[idx] : val);
//            if (s != null) {
//                return s + 'hi';
//            }
//            else {
//                return s;
//            }
            return (Ext.isArray(val) ? val[idx] : val);
        }

        return getSeriesProp('title') || getSeriesProp('yField') + " " + getSeriesProp('l');
    },

    /**
    * @private Creates label sprite.
    */
    createLabel: function (config) {
        var me = this,
            legend = me.legend;

        return me.add('label', me.surface.add({
            type: 'text',
            x: 20,
            y: 0,
            zIndex: (me.zIndex || 0) + 2,
            fill: legend.labelColor,
            font: legend.labelFont,

  qtip: "This is a tip",
  listeners: {
    rendered: function(c){
      Ext.QuickTips.register({
        target: c.getEl(),
        text: c.qtip
        })
      }
   },
            text: me.getLabelText(),
            style: {
                cursor: 'pointer'
            }
        }));
    },

    /**
    * @private Creates mask sprite.
    */
    createMask: function (config) {
        var me = this,
            surface = me.surface,
            legend = me.legend,
            bbox;

        bbox = me.getBBox();

        return me.add('mask', surface.add({
            type: 'rect',
            x: bbox.x,
            y: bbox.y,
            width: bbox.width || 20,
            height: bbox.height || 20,
            zIndex: (me.zIndex || 0) + 1,
            fill: legend.boxFill,
            style: {
                'cursor': 'pointer'
            }
        }));
    },

    /**
    * @private Creates Series marker Sprites.
    */
    createSeriesMarkers: function (config) {
        var me = this,
            index = config.yFieldIndex,
            series = me.series,
            seriesType = series.type,
            surface = me.surface,
            z = me.zIndex;

        // Line series - display as short line with optional marker in the middle
        if (seriesType === 'line' || seriesType === 'scatter') {
            if (seriesType === 'line') {
                var seriesStyle = Ext.apply(series.seriesStyle, series.style);
                me.drawLine(0.5, 0.5, 16.5, 0.5, z, seriesStyle);
            };

            if (series.showMarkers || seriesType === 'scatter') {
                var markerConfig = Ext.apply(series.markerStyle, series.markerConfig || {}, {
                    fill: series.getLegendColor(index)
                });
                me.drawMarker(8.5, 0.5, z, markerConfig);
            }
        }
        // All other series types - display as filled box
        else {
            me.drawFilledBox(12, 12, z, index);
        }
    },

    /**
    * @private Creates line sprite for Line series.
    */
    drawLine: function (fromX, fromY, toX, toY, z, seriesStyle) {
        var me = this,
            surface = me.surface,
            series = me.series;

        return me.add('line', surface.add({
            type: 'path',
            path: 'M' + fromX + ',' + fromY + 'L' + toX + ',' + toY,
            zIndex: (z || 0) + 2,
            "stroke-width": series.lineWidth,
            "stroke-linejoin": "round",
            "stroke-dasharray": series.dash,
            stroke: seriesStyle.stroke || series.getLegendColor(index) || '#000',
            style: {
                cursor: 'pointer'
            }
        }));
    },

    /**
    * @private Creates series-shaped marker for Line and Scatter series.
    */
    drawMarker: function (x, y, z, markerConfig) {
        var me = this,
            surface = me.surface,
            series = me.series;

        return me.add('marker', Ext.chart.Shape[markerConfig.type](surface, {
            fill: markerConfig.fill,
            x: x,
            y: y,
            zIndex: (z || 0) + 2,
            radius: markerConfig.radius || markerConfig.size,
            style: {
                cursor: 'pointer'
            }
        }));
    },

    /**
    * @private Creates box-shaped marker for all series but Line and Scatter.
    */
    drawFilledBox: function (width, height, z, index) {
        var me = this,
            surface = me.surface,
            series = me.series;

        return me.add('box', surface.add({
            type: 'rect',
            zIndex: (z || 0) + 2,
            x: 0,
            y: 0,
            width: width,
            height: height,
            fill: series.getLegendColor(index),
            style: {
                cursor: 'pointer'
            }
        }));
    },

    /**
    * @private Draws label in bold when mouse cursor is over the item.
    */
    onMouseOver: function () {
        var me = this;

        me.label.setStyle({
            'font-weight': 'bold'
        });
        me.mask.setStyle({
            'cursor': 'pointer'
        });
        me.series._index = me.yFieldIndex;
        me.series.highlightItem();
    },

    /**
    * @private Draws label in normal when mouse cursor leaves the item.
    */
    onMouseOut: function () {
        var me = this,
            legend = me.legend,
            boldRe = me.boldRe;

        me.label.setStyle({
            'font-weight': legend.labelFont && boldRe.test(legend.labelFont) ? 'bold' : 'normal'
        });
        me.series._index = me.yFieldIndex;
        me.series.unHighlightItem();
    },

    /**
    * @private Toggles Series visibility upon mouse click on the item.
    */
    onMouseDown: function () {
        var me = this,
            index = me.yFieldIndex;

        if (!me.hiddenSeries) {
            me.series.hideAll(index);
            me.label.setAttributes({
                opacity: 0.5
            }, true);
        } else {
            me.series.showAll(index);
            me.label.setAttributes({
                opacity: 1
            }, true);
        }
        me.hiddenSeries = !me.hiddenSeries;
    }
});

/*
    Chart Legend with no additional features; some methods are refactored
    for better flexibility.
    
    This class contains almost 100% Sencha code so I am not releasing it
    but providing it as an example under the same terms as Ext JS itself.
    Hmm. Not sure I can do this, even.
    
    This class is not intended to be used directly.
*/

Ext.define('Ext.ux.chart.Legend', {
    extend:  Ext.chart.Legend ,
    
                                            
    
    /**
     * @private Create all the sprites for the legend
     */
    create: function() {
        var me = this,
            items = me.chart.series.items;
        
        me.createBox();
        
        if (me.rebuild !== false) {
            me.createItems();
        };
        
        if (!me.created && me.isDisplayed()) {
            me.created = true;

            // Listen for changes to series titles to trigger regeneration of the legend
            for ( var i = 0, l = items.length; i < l; i++ ) {
                var series = items[i];
                
                series.on('titlechange', me.redraw, me);
            };
        };
    },
    
    /**
     * @private Redraws the Legend
     */
    redraw: function() {
        var me = this;
        
        me.create();
        me.updatePosition();
    },

    /**
     * @private Create the series markers and labels
     */
    createItems: function() {
        var me = this,
            seriesItems = me.chart.series.items,
            items = me.items,
            fields;

        //remove all legend items
        me.removeItems();
        
        // Create all the item labels
        for ( var i = 0, li = seriesItems.length; i < li; i++ ) {
            var series = seriesItems[i];
            
            if (series.showInLegend) {
                fields = [].concat(series.yField);
                
                for ( var j = 0, lj = fields.length; j < lj; j++ ) {
                    items.push( me.createLegendItem(series, j) );
                };
            }
        };
        
        me.alignItems();
    },
    
    /**
     * @private Removes all legend items.
     */
    removeItems: function() {
        var me = this,
            items = me.items,
            len = items ? items.length : 0;

        if (len) {
            for (var i = 0; i < len; i++) {
                items[i].destroy();
            }
        };
        
        //empty array
        items.length = [];
    },
    
    /**
     * @private
     * Positions all items within Legend box.
     */
    alignItems: function() {
        var me = this,
            items = me.items,
            padding = me.padding,
            spacingOffset = 2,
            vertical = me.isVertical,
            math = Math,
            mfloor = math.floor,
            mmax = math.max,
            dim;
        
        dim = me.updateItemDimensions();

        var maxWidth    = dim.maxWidth,
            maxHeight   = dim.maxHeight,
            totalWidth  = dim.totalWidth,
            totalHeight = dim.totalHeight,
            spacing     = dim.spacing;

        // Store the collected dimensions for later
        me.width = mfloor((vertical ? maxWidth : totalWidth) + padding * 2);
        if (vertical && items.length === 1) {
            spacingOffset = 1;
        }
        me.height = mfloor((vertical ? totalHeight - spacingOffset * spacing : maxHeight) + (padding * 2));
        me.itemHeight = maxHeight;
    },
    
    updateItemDimensions: function() {
        var me = this,
            items = me.items,
            padding = me.padding,
            itemSpacing = me.itemSpacing,
            maxWidth = 0,
            maxHeight = 0,
            totalWidth = 0,
            totalHeight = 0,
            vertical = me.isVertical,
            math = Math,
            mfloor = math.floor,
            mmax = math.max,
            spacing = 0;

        // Collect item dimensions and position each one
        // properly in relation to the previous item
        for ( var i = 0, l = items.length; i < l; i++ ) {
            var item = items[i],
                bbox, width, height;
                
            bbox = item.getBBox();

            //always measure from x=0, since not all markers go all the way to the left
            width  = bbox.width;
            height = bbox.height;

            if (i === 0) {
                spacing = vertical ? padding + height / 2 : padding;
            }
            else {
                spacing = itemSpacing / (vertical ? 2 : 1);
            }
            // Set the item's position relative to the legend box
            item.x = mfloor(vertical ? padding : totalWidth + spacing);
            item.y = mfloor(vertical ? totalHeight + spacing : padding + height / 2);

            // Collect cumulative dimensions
            totalWidth += width + spacing;
            totalHeight += height + spacing;
            maxWidth  = mmax(maxWidth, width);
            maxHeight = mmax(maxHeight, height);
        };

        return {
            totalWidth:  totalWidth,
            totalHeight: totalHeight,
            maxWidth:    maxWidth,
            maxHeight:   maxHeight,
            spacing:     spacing
        };
    },
    
    /**
     * @private Calculates Legend position with respect to other Chart elements.
     */
    calcPosition: function() {
        var me = this,
            x, y,
            legendWidth = me.width,
            legendHeight = me.height,
            padding = me.padding,
            chart = me.chart,
            chartBBox = chart.chartBBox,
            insets = chart.insetPadding,
            chartWidth = chartBBox.width - (insets * 2),
            chartHeight = chartBBox.height - (insets * 2),
            chartX = chartBBox.x + insets,
            chartY = chartBBox.y + insets,
            surface = chart.surface,
            mfloor = Math.floor;

        // Find the position based on the dimensions
        switch(me.position) {
            case "left":
                x = insets;
                y = mfloor(chartY + chartHeight / 2 - legendHeight / 2);
                break;
            case "right":
                x = mfloor(surface.width - legendWidth) - insets;
                y = mfloor(chartY + chartHeight / 2 - legendHeight / 2);
                break;
            case "top":
                x = mfloor(chartX + chartWidth / 2 - legendWidth / 2);
                y = insets;
                break;
            case "bottom":
                x = mfloor(chartX + chartWidth / 2 - legendWidth / 2);
                y = mfloor(surface.height - legendHeight) - insets;
                break;
            default:
                x = mfloor(me.origX) + insets;
                y = mfloor(me.origY) + insets;
        }
        
        return { x: x, y: y };
    },
    
    /**
     * @private Update the position of all the legend's sprites to match its current x/y values
     */
    updatePosition: function() {
        var me = this,
            items = me.items;

        if (me.isDisplayed()) {
            // Find the position based on the dimensions
            var pos = me.calcPosition();
            
            me.x = pos.x;
            me.y = pos.y;

            // Update the position of each item
            for ( var i = 0, l = items.length; i < l; i++ ) {
                items[i].updatePosition();
            };
            // Update the position of the outer box
            me.boxSprite.setAttributes(me.getBBox(), true);
        }
    },
    
    /**
     * @private Creates single Legend Item
     */
    createLegendItem: function(series, yFieldIndex) {
        var me = this;
        
        return Ext.create('Ext.ux.chart.LegendItem', {
            legend: me,
            series: series,
            surface: me.chart.surface,
            yFieldIndex: yFieldIndex
        });
    }
});

/*
 * Legend item that supports explicit item titles as well as other improvements.
 *
 * Version 0.99, compatible with Ext JS 4.1
 *  
 * Copyright (c) 2011-2012 Alexander Tokarev.
 *
 * This code is licensed under the terms of the Open Source LGPL 3.0 license.
 * Commercial use is permitted to the extent that the code/component(s) do NOT
 * become part of another Open Source or Commercially licensed development library
 * or toolkit without explicit permission.
 * 
 * License details: http://www.gnu.org/licenses/lgpl.html
 */

Ext.define('Ext.ux.chart.SmartLegendItem', {
    extend:  Ext.ux.chart.LegendItem ,

                                  

    /**
    * @private Retrieves text to be displayed as item label.
    * Looks for explicit Series field title first, then uses default locations.
    */
    getLabelText: function () {
        var me = this,
            series = me.series,
            idx = me.yFieldIndex;

        function getSeriesProp(name) {
            //alert(name);
            //debugger;
            var val = series[name];
            return (Ext.isArray(val) ? val[idx] : val);
        }

        //alert(getSeriesProp('yField') + " " + getSeriesProp('l'));
        return (getSeriesProp('yField') + " " + getSeriesProp('lastVal'));



        //return (series && series.yFieldTitle && series.yFieldTitle[idx] && '5') || me.callParent(arguments);
    },

    /**
    * @private Creates Series marker Sprites.
    */
    createSeriesMarkers: function (config) {
        var me = this,
            index = config.yFieldIndex,
            series = me.series,
            seriesType = me.seriesType || series.type,
            surface = me.surface,
            z = me.zIndex;

        // Line series - display as short line with optional marker in the middle
        if (seriesType === 'line' || seriesType === 'scatter') {
            if (seriesType === 'line') {
                var seriesStyle = Ext.apply(series.seriesStyle, series.style);
                me.drawLine(0.5, 0.5, 16.5, 0.5, z, seriesStyle);
            };

            if (series.showMarkers || seriesType === 'scatter') {
                var markerConfig = Ext.apply(series.markerStyle, series.markerConfig || {}, {
                    fill: series.getLegendColor(index)
                });
                me.drawMarker(8.5, 0.5, z, markerConfig);
            }
        }
        // All other series types - display as filled box
        else {
            me.drawFilledBox(12, 12, z, index);
        }
    },

    /**
    * @private Places Legend item sprites so that they take minimal space
    * without sacrificing sexy looks.
    */
    updatePosition: function (relativeTo) {
        var me = this,
            items = me.items,
            seriesType = me.seriesType || me.series.type,
            mfloor = Math.floor,
            marker, markerBBox, textBBox,
            bbox, fontHeight, halfFontHeight, textOffset, itemHeight, attr;

        if (!relativeTo) {
            relativeTo = me.legend;
        };

        // Calculate font height first, item's dimensions are based on it
        bbox = me.getBBox();
        textBBox = me.label.getBBox();
        fontHeight = textBBox.height;
        halfFontHeight = mfloor(fontHeight / 2);

        // For other Series than Line and Scatter, marker sprite is a color filled box.
        // Its dimensions should match text font size.
        if (marker = me.get('box')) {
            marker.setAttributes({
                width: fontHeight,
                height: fontHeight
            }, true);
        };

        // Text sprite offset depends on marker sprite width
        markerBBox = seriesType == 'line' ? me.get('line').getBBox()
                   : seriesType == 'scatter' ? me.get('marker').getBBox()
                   : marker.getBBox() || me.get('box').getBBox()
                   ;

        // Now go over items and adjust their positions and dimensions
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];

            switch (item.type) {
                case 'text':
                    attr = {
                        x: mfloor(relativeTo.x + me.x + markerBBox.width + me.legend.padding),
                        y: mfloor(relativeTo.y + me.y + (bbox.height - fontHeight - 1) / 2)
                    };

                    item.setAttributes(attr, true);
                    break;
                case 'rect':
                    if (Ext.isIE6 || Ext.isIE7 || Ext.isIE8) {
                        attr = {
                            translate: {
                                x: mfloor(relativeTo.x + me.x),
                                y: mfloor(relativeTo.y + me.y - (bbox.height - fontHeight + 2) / 2)
                            }
                        };
                    }
                    else if (Ext.isIE) {
                        attr = {
                            x: mfloor(relativeTo.x + me.x),
                            y: mfloor(relativeTo.y + me.y - (bbox.height - fontHeight) / 2)
                        };
                    }
                    else {
                        attr = {
                            x: mfloor(relativeTo.x + me.x),
                            y: mfloor(relativeTo.y + me.y - (bbox.height - fontHeight + 2) / 2)
                        };
                    };

                    item.setAttributes(attr, true);
                    break;
                default:
                    attr = {
                        translate: {
                            x: mfloor(relativeTo.x + me.x),
                            y: mfloor(relativeTo.y + me.y + (bbox.height - fontHeight - 2) / 2)
                        }
                    };

                    item.setAttributes(attr, true);
            };
        };
    }
});

/*
 * Smart chart Legend: it tries hard to fit available Chart dimensions
 * without hogging all the space. Will rearrange itself in columns or rows.
 *  
 * Uses Smart legend item to provide explicit Series field titles, too.
 *
 * Version 0.99, compatible with Ext JS 4.1.
 *  
 * Copyright (c) 2011-2012 Alexander Tokarev.
 *  
 * Usage: drop-in replacement for Ext.chart.Legend. See demo application
 * for more details.
 *
 * This code is licensed under the terms of the Open Source LGPL 3.0 license.
 * Commercial use is permitted to the extent that the code/component(s) do NOT
 * become part of another Open Source or Commercially licensed development library
 * or toolkit without explicit permission.
 * 
 * License details: http://www.gnu.org/licenses/lgpl.html
 */

Ext.define('Ext.ux.chart.SmartLegend', {
    extend:  Ext.ux.chart.Legend ,
    
                                                 
    
    /*
     * @cfg {String} seriesType Allows to trick Legend items into drawing
     * their markers with a style that differs from default series style;
     * like box marker for line or line marker for pie, etc.
     */
    
    /**
     * @private Create all the sprites for the legend
     */
    create: function() {
        var me = this,
            items = me.chart.series.items;
        
        // Avoid re-creation when Legend is invisible
        if ( me.rebuild || (!me.created && me.isDisplayed()) ) {
            me.createBox();
            me.createItems();
            me.updatePosition(true);
        };

        if (!me.created && me.isDisplayed()) {
            me.created = true;

            // Listen for changes to series titles to trigger regeneration of the legend
            for ( var i = 0, l = items.length; i < l; i++ ) {
                var series = items[i];

                series.on('titlechange', me.redraw, me);
            };
        }
    },
    
    /**
     * @private Get the bounds for the legend's outer box
     */
    getBBox: function() {
        var me = this,
            mround = Math.round;
        
        return {
            x:      mround(me.x - me.boxStrokeWidth / 2),
            y:      mround(me.y - me.boxStrokeWidth / 2),
            width:  mround(me.width),
            height: mround(me.height)
        };
    },
    
    /**
     * @private Update the position of all the legend's sprites to match its current x/y values
     */
    updatePosition: function(init) {
        var me = this,
            items = me.items,
            pos, myBBox, bsBBox;

        if ( !me.isDisplayed() ) return;
        
        // Find the position based on the dimensions
        pos    = me.calcPosition();
        myBBox = me.getBBox();
        bsBBox = me.boxSprite.getBBox();
        
        // We assume that if dimensions and box are current,
        // there is no need to update.
        if ( !init &&
             me.x == pos.x && me.y == pos.y &&
             myBBox.x == bsBBox.x && myBBox.y == bsBBox.y &&
             myBBox.height == bsBBox.height &&
             myBBox.width == bsBBox.width )
        {
            return;
        };
        
        me.x = myBBox.x = pos.x;
        me.y = myBBox.y = pos.y;

        // Update the position of each item
        for ( var i = 0, l = items.length; i < l; i++ ) {
            items[i].updatePosition();
        };
        
        // Update the position of the outer box
        me.boxSprite.setAttributes(myBBox, true);
    },
    
    /**
     * @private Creates single Legend Item.
     */
    createLegendItem: function(series, yFieldIndex) {
        var me = this,
            conf;
        
        conf = {
            legend:      me,
            series:      series,
            surface:     me.chart.surface,
            yFieldIndex: yFieldIndex
        };
        
        if ( me.seriesType !== undefined ) {
            Ext.apply(conf, {
                seriesType: me.seriesType
            });
        };
        
        return new Ext.ux.chart.SmartLegendItem(conf);
    },
    
    /**
     * @private Works around missing getInsets in Ext.chart.Chart
     */
    getChartInsets: function() {
        var me = this,
            chart = me.chart,
            ip = chart.insetPadding;
        
        return chart.getInsets ? chart.getInsets()
             :                   { left: ip, top: ip, right: ip, bottom: ip }
             ;
    },
    
    /**
     * @private Calculates Legend position with respect to Chart elements.
     */
    calcPosition: function() {
        var me = this,
            chartBBox = me.chart.chartBBox,
            surface = me.chart.surface,
            mfloor = Math.floor,
            insets, cWidth, lWidth, cHeight, lHeight, sWidth, sHeight,
            aWidth, aHeight, x, y, haveWidth, haveHeight;
        
        // Support for refactored Chart
        insets = me.getChartInsets();
        
        sWidth  = surface.width;
        sHeight = surface.height;
        cWidth  = chartBBox.width;
        cHeight = chartBBox.height;
        lWidth  = me.width;
        lHeight = me.height;
        
        // A is for "available"
        aWidth  = sWidth  - insets.left - insets.right;
        aHeight = sHeight - insets.top  - insets.bottom;
        
        // Legend either fits between insets or it doesn't,
        // in which case we don't care to place it accurately enough
        haveWidth  = aWidth  >= lWidth;
        haveHeight = aHeight >= lHeight;

        // Find position based on dimensions
        // Take into account that insets can be different on sides
        switch ( me.position ) {
        case 'left':
            x = insets.left;
            y = haveHeight ? mfloor(insets.top + aHeight / 2 - lHeight / 2)
              :              mfloor(sHeight / 2 - lHeight / 2)
              ;
            break;
        case 'right':
            x = mfloor(sWidth - lWidth) - insets.right;
            y = haveHeight ? mfloor(insets.top + aHeight / 2 - lHeight / 2)
              :              mfloor(sHeight / 2 - lHeight / 2)
              ;
            break;
        case 'top':
            x = haveWidth ? mfloor(insets.left + aWidth / 2 - lWidth / 2)
              :             mfloor(sWidth / 2 - lWidth / 2)
              ;
            y = insets.top;
            break;
        case 'bottom':
            x = haveWidth ? mfloor(insets.left + aWidth / 2 - lWidth / 2)
              :             mfloor(sWidth / 2 - lWidth / 2)
              ;
            y = mfloor(sHeight - lHeight) - insets.bottom;
            break;
        default:
            x = mfloor(me.origX) + insets.left;
            y = mfloor(me.origY) + insets.top;
        };
        
        return { x: x, y: y };
    },
    
    /**
     * @private Calculates maximum available box for Legend.
     */
    getMaximumBBox: function() {
        var me = this,
            surface = me.chart.surface,
            insets, chartWidth, chartHeight;
        
        insets = me.getChartInsets();
        
        chartWidth  = surface.width  - insets.left - insets.right;
        chartHeight = surface.height - insets.top  - insets.bottom;
        
        return { width: chartWidth, height: chartHeight };
    },
    
    /**
     * @private Positions all items within Legend box.
     */
    alignItems: function() {
        var me = this,
            items = me.items,
            numItems = me.items.length,
            padding = me.padding,
            itemSpacing = me.itemSpacing,
            vertical = me.isVertical,
            mceil = Math.ceil,
            mfloor = Math.floor,
            mmax = Math.max,
            x, y, bbox, height, width, dim;
    
        dim = me.updateItemDimensions();

        var maxWidth    = dim.maxWidth,
            maxHeight   = dim.maxHeight,
            totalWidth  = dim.totalWidth,
            totalHeight = dim.totalHeight,
            spacing     = dim.spacing;

        bbox = me.getMaximumBBox();
        
        // Ugh. All this verboseness is just because there is no list context assignment.
        // JS sucks.
        var totalDim  = vertical ? totalHeight : totalWidth,
            stuffInto = vertical ? bbox.height : bbox.width;
        
        // Account for padding
        stuffInto -= padding * 2;
        
        // I call them lines because they can be either columns or rows
        var lines, perLine, fract;
        
        if ( totalDim < stuffInto ) {
            lines   = 1;
            perLine = numItems;
        }
        else {
            lines   = mceil(totalDim / stuffInto);
            fract   = (totalDim / stuffInto) - mfloor(totalDim / stuffInto);
            lines  += fract > 0.8 ? 1 : 0;
            perLine = mceil(numItems / lines);
        };
        
        // Position the items
        for ( var line = 0; line < lines; line++ ) {
            var cumulative = 0;
            
            for ( var cursor = 0; cursor < perLine; cursor++ ) {
                var item = items[ (line*perLine) + cursor ];
                
                if ( item === undefined ) {
                    continue;
                };
                
                x = vertical ? line   * (maxWidth  + spacing)
                  :            cursor * (maxWidth  + spacing)
                  ;
                y = vertical ? cursor * (maxHeight + spacing)
                  :            line   * (maxHeight + spacing)
                  ;
                
                item.x = x + padding;
                item.y = y + (vertical ? padding + maxHeight / 2 : padding + maxHeight / 2);
            };
        };
        
        // Calculate legend box dimensions
        me.width   = vertical ? lines   * (maxWidth + spacing) - spacing
                   :            perLine * (maxWidth + spacing) - spacing
                   ;
        me.width  += padding * 2;
        
        me.height  = vertical ? perLine * (maxHeight + spacing) - spacing
                   :            lines   * (maxHeight + spacing) - spacing
                   ;
        me.height += padding * 2;
        
        me.itemHeight = maxHeight;
    },
    
    /**
     * @private Toggles Legend visibility.
     */
    toggleVisibility: function(visible) {
        var me = this,
            items = me.items;
        
        me.visible = visible;
        
        for ( var i = 0, l = items.length; i < l; i++ ) {
            var item = items[i];
            
            visible ? item.show(true) : item.hide(true);
        };
        
        visible ? me.boxSprite.show(true) : me.boxSprite.hide(true);
    },

    /**
     * @private Shows the Legend.
     */
    show: function() {
        var me = this;
        
        me.toggleVisibility(true);
    },
    
    /**
     * @private Hides the Legend.
     */
    hide: function() {
        var me = this;
        
        me.toggleVisibility(false);
    }
});

/**
 * Basic status bar component that can be used as the bottom toolbar of any {@link Ext.Panel}.  In addition to
 * supporting the standard {@link Ext.toolbar.Toolbar} interface for adding buttons, menus and other items, the StatusBar
 * provides a greedy status element that can be aligned to either side and has convenient methods for setting the
 * status text and icon.  You can also indicate that something is processing using the {@link #showBusy} method.
 *
 *     Ext.create('Ext.Panel', {
 *         title: 'StatusBar',
 *         // etc.
 *         bbar: Ext.create('Ext.ux.StatusBar', {
 *             id: 'my-status',
 *      
 *             // defaults to use when the status is cleared:
 *             defaultText: 'Default status text',
 *             defaultIconCls: 'default-icon',
 *      
 *             // values to set initially:
 *             text: 'Ready',
 *             iconCls: 'ready-icon',
 *      
 *             // any standard Toolbar items:
 *             items: [{
 *                 text: 'A Button'
 *             }, '-', 'Plain Text']
 *         })
 *     });
 *
 *     // Update the status bar later in code:
 *     var sb = Ext.getCmp('my-status');
 *     sb.setStatus({
 *         text: 'OK',
 *         iconCls: 'ok-icon',
 *         clear: true // auto-clear after a set interval
 *     });
 *
 *     // Set the status bar to show that something is processing:
 *     sb.showBusy();
 *
 *     // processing....
 *
 *     sb.clearStatus(); // once completeed
 *
 */
Ext.define('COMMON.StatusBar', {
    extend:  Ext.toolbar.Toolbar ,
    //alternateClassName: 'Ext.ux.StatusBar',
    alias: 'widget.statusbar',
                                       

   style: {
        backgroundColor: constants.backgroundColor,
        borderColor: constants.backgroundColor
    },

    /**
     * @cfg {String} statusAlign
     * The alignment of the status element within the overall StatusBar layout.  When the StatusBar is rendered,
     * it creates an internal div containing the status text and icon.  Any additional Toolbar items added in the
     * StatusBar's {@link #cfg-items} config, or added via {@link #method-add} or any of the supported add* methods, will be
     * rendered, in added order, to the opposite side.  The status element is greedy, so it will automatically
     * expand to take up all sapce left over by any other items.  Example usage:
     *
     *     // Create a left-aligned status bar containing a button,
     *     // separator and text item that will be right-aligned (default):
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     *
     *     // By adding the statusAlign config, this will create the
     *     // exact same toolbar, except the status and toolbar item
     *     // layout will be reversed from the previous example:
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             statusAlign: 'right',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     */
    /**
     * @cfg {String} [defaultText='']
     * The default {@link #text} value.  This will be used anytime the status bar is cleared with the
     * `useDefaults:true` option.
     */
    /**
     * @cfg {String} [defaultIconCls='']
     * The default {@link #iconCls} value (see the iconCls docs for additional details about customizing the icon).
     * This will be used anytime the status bar is cleared with the `useDefaults:true` option.
     */
    /**
     * @cfg {String} text
     * A string that will be <b>initially</b> set as the status message.  This string
     * will be set as innerHTML (html tags are accepted) for the toolbar item.
     * If not specified, the value set for {@link #defaultText} will be used.
     */
    /**
     * @cfg {String} [iconCls='']
     * A CSS class that will be **initially** set as the status bar icon and is
     * expected to provide a background image.
     *
     * Example usage:
     *
     *     // Example CSS rule:
     *     .x-statusbar .x-status-custom {
     *         padding-left: 25px;
     *         background: transparent url(images/custom-icon.gif) no-repeat 3px 2px;
     *     }
     *
     *     // Setting a default icon:
     *     var sb = Ext.create('Ext.ux.statusbar.StatusBar', {
     *         defaultIconCls: 'x-status-custom'
     *     });
     *
     *     // Changing the icon:
     *     sb.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom'
     *     });
     */

    /**
     * @cfg {String} cls
     * The base class applied to the containing element for this component on render.
     */
    cls : 'x-statusbar',
    /**
     * @cfg {String} busyIconCls
     * The default {@link #iconCls} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showBusy}.
     */
    busyIconCls : 'x-status-busy',
    /**
     * @cfg {String} busyText
     * The default {@link #text} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `text` argument into {@link #showBusy}.
     */
    busyText : 'Loading...',
    /**
     * @cfg {Number} autoClear
     * The number of milliseconds to wait after setting the status via
     * {@link #setStatus} before automatically clearing the status text and icon.
     * Note that this only applies when passing the `clear` argument to {@link #setStatus}
     * since that is the only way to defer clearing the status.  This can
     * be overridden by specifying a different `wait` value in {@link #setStatus}.
     * Calls to {@link #clearStatus} always clear the status bar immediately and ignore this value.
     */
    autoClear : 5000,

    /**
     * @cfg {String} emptyText
     * The text string to use if no text has been set. If there are no other items in
     * the toolbar using an empty string (`''`) for this value would end up in the toolbar
     * height collapsing since the empty string will not maintain the toolbar height.
     * Use `''` if the toolbar should collapse in height vertically when no text is
     * specified and there are no other items in the toolbar.
     */
    emptyText : '&#160;',

    // private
    activeThreadId : 0,

    // private
    initComponent : function(){
        var right = this.statusAlign === 'right';

        this.callParent(arguments);
        this.currIconCls = this.iconCls || this.defaultIconCls;
        this.statusEl = Ext.create('Ext.toolbar.TextItem', {
            cls: 'x-status-text ' + (this.currIconCls || ''),
            text: this.text || this.defaultText || ''
        });

        if (right) {
            this.cls += ' x-status-right';
            this.add('->');
            this.add(this.statusEl);
        } else {
            this.insert(0, this.statusEl);
            this.insert(1, '->');
        }
    },

    /**
     * Sets the status {@link #text} and/or {@link #iconCls}. Also supports automatically clearing the
     * status that was set after a specified interval.
     *
     * Example usage:
     *
     *     // Simple call to update the text
     *     statusBar.setStatus('New status');
     *
     *     // Set the status and icon, auto-clearing with default options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: true
     *     });
     *
     *     // Auto-clear with custom options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: {
     *             wait: 8000,
     *             anim: false,
     *             useDefaults: false
     *         }
     *     });
     *
     * @param {Object/String} config A config object specifying what status to set, or a string assumed
     * to be the status text (and all other options are defaulted as explained below). A config
     * object containing any or all of the following properties can be passed:
     *
     * @param {String} config.text The status text to display.  If not specified, any current
     * status text will remain unchanged.
     *
     * @param {String} config.iconCls The CSS class used to customize the status icon (see
     * {@link #iconCls} for details). If not specified, any current iconCls will remain unchanged.
     *
     * @param {Boolean/Number/Object} config.clear Allows you to set an internal callback that will
     * automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not
     * specified, the new status will not be auto-cleared and will stay until updated again or cleared using
     * {@link #clearStatus}. If `true` is passed, the status will be cleared using {@link #autoClear},
     * {@link #defaultText} and {@link #defaultIconCls} via a fade out animation. If a numeric value is passed,
     * it will be used as the callback interval (in milliseconds), overriding the {@link #autoClear} value.
     * All other options will be defaulted as with the boolean option.  To customize any other options,
     * you can pass an object in the format:
     * 
     * @param {Number} config.clear.wait The number of milliseconds to wait before clearing
     * (defaults to {@link #autoClear}).
     * @param {Boolean} config.clear.anim False to clear the status immediately once the callback
     * executes (defaults to true which fades the status out).
     * @param {Boolean} config.clear.useDefaults False to completely clear the status text and iconCls
     * (defaults to true which uses {@link #defaultText} and {@link #defaultIconCls}).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setStatus : function(o) {
        var me = this;

        o = o || {};
        Ext.suspendLayouts();
        if (Ext.isString(o)) {
            o = {text:o};
        }
        if (o.text !== undefined) {
            me.setText(o.text);
        }
        if (o.iconCls !== undefined) {
            me.setIcon(o.iconCls);
        }

        if (o.clear) {
            var c = o.clear,
                wait = me.autoClear,
                defaults = {useDefaults: true, anim: true};

            if (Ext.isObject(c)) {
                c = Ext.applyIf(c, defaults);
                if (c.wait) {
                    wait = c.wait;
                }
            } else if (Ext.isNumber(c)) {
                wait = c;
                c = defaults;
            } else if (Ext.isBoolean(c)) {
                c = defaults;
            }

            c.threadId = this.activeThreadId;
            Ext.defer(me.clearStatus, wait, me, [c]);
        }
        Ext.resumeLayouts(true);
        return me;
    },

    /**
     * Clears the status {@link #text} and {@link #iconCls}. Also supports clearing via an optional fade out animation.
     *
     * @param {Object} [config] A config object containing any or all of the following properties.  If this
     * object is not specified the status will be cleared using the defaults below:
     * @param {Boolean} config.anim True to clear the status by fading out the status element (defaults
     * to false which clears immediately).
     * @param {Boolean} config.useDefaults True to reset the text and icon using {@link #defaultText} and
     * {@link #defaultIconCls} (defaults to false which sets the text to '' and removes any existing icon class).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    clearStatus : function(o) {
        o = o || {};

        var me = this,
            statusEl = me.statusEl;

        if (o.threadId && o.threadId !== me.activeThreadId) {
            // this means the current call was made internally, but a newer
            // thread has set a message since this call was deferred.  Since
            // we don't want to overwrite a newer message just ignore.
            return me;
        }

        var text = o.useDefaults ? me.defaultText : me.emptyText,
            iconCls = o.useDefaults ? (me.defaultIconCls ? me.defaultIconCls : '') : '';

        if (o.anim) {
            // animate the statusEl Ext.Element
            statusEl.el.puff({
                remove: false,
                useDisplay: true,
                callback: function() {
                    statusEl.el.show();
                    me.setStatus({
                        text: text,
                        iconCls: iconCls
                    });
                }
            });
        } else {
             me.setStatus({
                 text: text,
                 iconCls: iconCls
             });
        }
        return me;
    },

    /**
     * Convenience method for setting the status text directly.  For more flexible options see {@link #setStatus}.
     * @param {String} text (optional) The text to set (defaults to '')
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setText : function(text) {
        var me = this;
        me.activeThreadId++;
        me.text = text || '';
        if (me.rendered) {
            me.statusEl.setText(me.text);
        }
        return me;
    },

    /**
     * Returns the current status text.
     * @return {String} The status text
     */
    getText : function(){
        return this.text;
    },

    /**
     * Convenience method for setting the status icon directly.  For more flexible options see {@link #setStatus}.
     * See {@link #iconCls} for complete details about customizing the icon.
     * @param {String} iconCls (optional) The icon class to set (defaults to '', and any current icon class is removed)
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setIcon : function(cls) {
        var me = this;

        me.activeThreadId++;
        cls = cls || '';

        if (me.rendered) {
            if (me.currIconCls) {
                me.statusEl.removeCls(me.currIconCls);
                me.currIconCls = null;
            }
            if (cls.length > 0) {
                me.statusEl.addCls(cls);
                me.currIconCls = cls;
            }
        } else {
            me.currIconCls = cls;
        }
        return me;
    },

    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "busy" state, usually for loading or processing activities.
     *
     * @param {Object/String} config (optional) A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #busyIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #busyIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showBusy : function(o){
        if (Ext.isString(o)) {
            o = { text: o };
        }
        o = Ext.applyIf(o || {}, {
            text: this.busyText,
            iconCls: this.busyIconCls
        });
        return this.setStatus(o);
    }
});

/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

/*
    http://www.JSON.org/json2.js
    2010-11-17

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, strict: false, regexp: false */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (!this.JSON) {
    this.JSON = {};
}

(function () {
    "use strict";

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf()) ?
                   this.getUTCFullYear()   + '-' +
                 f(this.getUTCMonth() + 1) + '-' +
                 f(this.getUTCDate())      + 'T' +
                 f(this.getUTCHours())     + ':' +
                 f(this.getUTCMinutes())   + ':' +
                 f(this.getUTCSeconds())   + 'Z' : null;
        };

        String.prototype.toJSON =
        Number.prototype.toJSON =
        Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ?
            '"' + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ? c :
                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"' :
            '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0 ? '[]' :
                    gap ? '[\n' + gap +
                            partial.join(',\n' + gap) + '\n' +
                                mind + ']' :
                          '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0 ? '{}' :
                gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
                        mind + '}' : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                     typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
.replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function' ?
                    walk({'': j}, '') : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

// Knockout JavaScript library v2.3.0
// (c) Steven Sanderson - http://knockoutjs.com/
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function() {function F(q){return function(){return q}};(function(q){var w=this||(0,eval)("this"),s=w.document,H=w.navigator,t=w.jQuery,y=w.JSON;(function(q){"function"===typeof require&&"object"===typeof exports&&"object"===typeof module?q(module.exports||exports):"function"===typeof define&&define.amd?define(["exports"],q):q(w.ko={})})(function(C){function G(b,c,d,f){a.d[b]={init:function(b){a.a.f.set(b,I,{});return{controlsDescendantBindings:!0}},update:function(b,e,m,h,k){m=a.a.f.get(b,I);e=a.a.c(e());h=!d!==!e;var l=!m.fb;if(l||c||h!==m.vb)l&&(m.fb=
a.a.Oa(a.e.childNodes(b),!0)),h?(l||a.e.P(b,a.a.Oa(m.fb)),a.Ja(f?f(k,e):k,b)):a.e.ba(b),m.vb=h}};a.g.S[b]=!1;a.e.L[b]=!0}function J(b,c,d){d&&c!==a.h.n(b)&&a.h.W(b,c);c!==a.h.n(b)&&a.q.I(a.a.Ga,null,[b,"change"])}var a="undefined"!==typeof C?C:{};a.b=function(b,c){for(var d=b.split("."),f=a,g=0;g<d.length-1;g++)f=f[d[g]];f[d[d.length-1]]=c};a.r=function(a,c,d){a[c]=d};a.version="2.3.0";a.b("version",a.version);a.a=function(){function b(a,b){for(var e in a)a.hasOwnProperty(e)&&b(e,a[e])}function c(b,
e){if("input"!==a.a.u(b)||!b.type||"click"!=e.toLowerCase())return!1;var k=b.type;return"checkbox"==k||"radio"==k}var d={},f={};d[H&&/Firefox\/2/i.test(H.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"];d.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" ");b(d,function(a,b){if(b.length)for(var e=0,c=b.length;e<c;e++)f[b[e]]=a});var g={propertychange:!0},e=s&&function(){for(var a=3,b=s.createElement("div"),e=b.getElementsByTagName("i");b.innerHTML=
"\x3c!--[if gt IE "+ ++a+"]><i></i><![endif]--\x3e",e[0];);return 4<a?a:q}();return{Ta:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],p:function(a,b){for(var e=0,c=a.length;e<c;e++)b(a[e])},k:function(a,b){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(a,b);for(var e=0,c=a.length;e<c;e++)if(a[e]===b)return e;return-1},La:function(a,b,e){for(var c=0,d=a.length;c<d;c++)if(b.call(e,a[c]))return a[c];return null},ka:function(b,e){var c=a.a.k(b,e);0<=c&&
b.splice(c,1)},Ma:function(b){b=b||[];for(var e=[],c=0,d=b.length;c<d;c++)0>a.a.k(e,b[c])&&e.push(b[c]);return e},Z:function(a,b){a=a||[];for(var e=[],c=0,d=a.length;c<d;c++)e.push(b(a[c]));return e},Y:function(a,b){a=a||[];for(var e=[],c=0,d=a.length;c<d;c++)b(a[c])&&e.push(a[c]);return e},R:function(a,b){if(b instanceof Array)a.push.apply(a,b);else for(var e=0,c=b.length;e<c;e++)a.push(b[e]);return a},ja:function(b,e,c){var d=b.indexOf?b.indexOf(e):a.a.k(b,e);0>d?c&&b.push(e):c||b.splice(d,1)},
extend:function(a,b){if(b)for(var e in b)b.hasOwnProperty(e)&&(a[e]=b[e]);return a},w:b,oa:function(b){for(;b.firstChild;)a.removeNode(b.firstChild)},Mb:function(b){b=a.a.N(b);for(var e=s.createElement("div"),c=0,d=b.length;c<d;c++)e.appendChild(a.H(b[c]));return e},Oa:function(b,e){for(var c=0,d=b.length,g=[];c<d;c++){var f=b[c].cloneNode(!0);g.push(e?a.H(f):f)}return g},P:function(b,e){a.a.oa(b);if(e)for(var c=0,d=e.length;c<d;c++)b.appendChild(e[c])},eb:function(b,e){var c=b.nodeType?[b]:b;if(0<
c.length){for(var d=c[0],g=d.parentNode,f=0,r=e.length;f<r;f++)g.insertBefore(e[f],d);f=0;for(r=c.length;f<r;f++)a.removeNode(c[f])}},hb:function(a,b){7>e?a.setAttribute("selected",b):a.selected=b},F:function(a){return null===a||a===q?"":a.trim?a.trim():a.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Wb:function(b,e){for(var c=[],d=(b||"").split(e),g=0,f=d.length;g<f;g++){var r=a.a.F(d[g]);""!==r&&c.push(r)}return c},Tb:function(a,b){a=a||"";return b.length>a.length?!1:a.substring(0,b.length)===
b},yb:function(a,b){if(b.compareDocumentPosition)return 16==(b.compareDocumentPosition(a)&16);for(;null!=a;){if(a==b)return!0;a=a.parentNode}return!1},aa:function(b){return a.a.yb(b,b.ownerDocument)},pb:function(b){return!!a.a.La(b,a.a.aa)},u:function(a){return a&&a.tagName&&a.tagName.toLowerCase()},o:function(b,d,k){var f=e&&g[d];if(f||"undefined"==typeof t)if(f||"function"!=typeof b.addEventListener)if("undefined"!=typeof b.attachEvent){var n=function(a){k.call(b,a)},p="on"+d;b.attachEvent(p,n);
a.a.C.ia(b,function(){b.detachEvent(p,n)})}else throw Error("Browser doesn't support addEventListener or attachEvent");else b.addEventListener(d,k,!1);else{if(c(b,d)){var r=k;k=function(a,b){var e=this.checked;b&&(this.checked=!0!==b.sb);r.call(this,a);this.checked=e}}t(b).bind(d,k)}},Ga:function(a,b){if(!a||!a.nodeType)throw Error("element must be a DOM node when calling triggerEvent");if("undefined"!=typeof t){var e=[];c(a,b)&&e.push({sb:a.checked});t(a).trigger(b,e)}else if("function"==typeof s.createEvent)if("function"==
typeof a.dispatchEvent)e=s.createEvent(f[b]||"HTMLEvents"),e.initEvent(b,!0,!0,w,0,0,0,0,0,!1,!1,!1,!1,0,a),a.dispatchEvent(e);else throw Error("The supplied element doesn't support dispatchEvent");else if("undefined"!=typeof a.fireEvent)c(a,b)&&(a.checked=!0!==a.checked),a.fireEvent("on"+b);else throw Error("Browser doesn't support triggering events");},c:function(b){return a.T(b)?b():b},ya:function(b){return a.T(b)?b.t():b},ga:function(b,e,c){if(e){var d=/\S+/g,g=b.className.match(d)||[];a.a.p(e.match(d),
function(b){a.a.ja(g,b,c)});b.className=g.join(" ")}},ib:function(b,e){var c=a.a.c(e);if(null===c||c===q)c="";var d=a.e.firstChild(b);!d||3!=d.nodeType||a.e.nextSibling(d)?a.e.P(b,[s.createTextNode(c)]):d.data=c;a.a.Bb(b)},gb:function(a,b){a.name=b;if(7>=e)try{a.mergeAttributes(s.createElement("<input name='"+a.name+"'/>"),!1)}catch(c){}},Bb:function(a){9<=e&&(a=1==a.nodeType?a:a.parentNode,a.style&&(a.style.zoom=a.style.zoom))},zb:function(a){if(e){var b=a.style.width;a.style.width=0;a.style.width=
b}},Qb:function(b,e){b=a.a.c(b);e=a.a.c(e);for(var c=[],d=b;d<=e;d++)c.push(d);return c},N:function(a){for(var b=[],e=0,c=a.length;e<c;e++)b.push(a[e]);return b},Ub:6===e,Vb:7===e,ca:e,Ua:function(b,e){for(var c=a.a.N(b.getElementsByTagName("input")).concat(a.a.N(b.getElementsByTagName("textarea"))),d="string"==typeof e?function(a){return a.name===e}:function(a){return e.test(a.name)},g=[],f=c.length-1;0<=f;f--)d(c[f])&&g.push(c[f]);return g},Nb:function(b){return"string"==typeof b&&(b=a.a.F(b))?
y&&y.parse?y.parse(b):(new Function("return "+b))():null},Ca:function(b,e,c){if(!y||!y.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return y.stringify(a.a.c(b),e,c)},Ob:function(e,c,d){d=d||{};var g=d.params||{},f=d.includeFields||this.Ta,p=e;if("object"==typeof e&&"form"===a.a.u(e))for(var p=e.action,r=f.length-1;0<=r;r--)for(var z=
a.a.Ua(e,f[r]),D=z.length-1;0<=D;D--)g[z[D].name]=z[D].value;c=a.a.c(c);var q=s.createElement("form");q.style.display="none";q.action=p;q.method="post";for(var v in c)e=s.createElement("input"),e.name=v,e.value=a.a.Ca(a.a.c(c[v])),q.appendChild(e);b(g,function(a,b){var e=s.createElement("input");e.name=a;e.value=b;q.appendChild(e)});s.body.appendChild(q);d.submitter?d.submitter(q):q.submit();setTimeout(function(){q.parentNode.removeChild(q)},0)}}}();a.b("utils",a.a);a.b("utils.arrayForEach",a.a.p);
a.b("utils.arrayFirst",a.a.La);a.b("utils.arrayFilter",a.a.Y);a.b("utils.arrayGetDistinctValues",a.a.Ma);a.b("utils.arrayIndexOf",a.a.k);a.b("utils.arrayMap",a.a.Z);a.b("utils.arrayPushAll",a.a.R);a.b("utils.arrayRemoveItem",a.a.ka);a.b("utils.extend",a.a.extend);a.b("utils.fieldsIncludedWithJsonPost",a.a.Ta);a.b("utils.getFormFields",a.a.Ua);a.b("utils.peekObservable",a.a.ya);a.b("utils.postJson",a.a.Ob);a.b("utils.parseJson",a.a.Nb);a.b("utils.registerEventHandler",a.a.o);a.b("utils.stringifyJson",
a.a.Ca);a.b("utils.range",a.a.Qb);a.b("utils.toggleDomNodeCssClass",a.a.ga);a.b("utils.triggerEvent",a.a.Ga);a.b("utils.unwrapObservable",a.a.c);a.b("utils.objectForEach",a.a.w);a.b("utils.addOrRemoveItem",a.a.ja);a.b("unwrap",a.a.c);Function.prototype.bind||(Function.prototype.bind=function(a){var c=this,d=Array.prototype.slice.call(arguments);a=d.shift();return function(){return c.apply(a,d.concat(Array.prototype.slice.call(arguments)))}});a.a.f=new function(){var b=0,c="__ko__"+(new Date).getTime(),
d={};return{get:function(b,c){var e=a.a.f.pa(b,!1);return e===q?q:e[c]},set:function(b,c,e){if(e!==q||a.a.f.pa(b,!1)!==q)a.a.f.pa(b,!0)[c]=e},pa:function(a,g){var e=a[c];if(!e||"null"===e||!d[e]){if(!g)return q;e=a[c]="ko"+b++;d[e]={}}return d[e]},clear:function(a){var b=a[c];return b?(delete d[b],a[c]=null,!0):!1}}};a.b("utils.domData",a.a.f);a.b("utils.domData.clear",a.a.f.clear);a.a.C=new function(){function b(b,c){var g=a.a.f.get(b,d);g===q&&c&&(g=[],a.a.f.set(b,d,g));return g}function c(e){var d=
b(e,!1);if(d)for(var d=d.slice(0),f=0;f<d.length;f++)d[f](e);a.a.f.clear(e);"function"==typeof t&&"function"==typeof t.cleanData&&t.cleanData([e]);if(g[e.nodeType])for(d=e.firstChild;e=d;)d=e.nextSibling,8===e.nodeType&&c(e)}var d="__ko_domNodeDisposal__"+(new Date).getTime(),f={1:!0,8:!0,9:!0},g={1:!0,9:!0};return{ia:function(a,c){if("function"!=typeof c)throw Error("Callback must be a function");b(a,!0).push(c)},cb:function(e,c){var g=b(e,!1);g&&(a.a.ka(g,c),0==g.length&&a.a.f.set(e,d,q))},H:function(b){if(f[b.nodeType]&&
(c(b),g[b.nodeType])){var d=[];a.a.R(d,b.getElementsByTagName("*"));for(var h=0,k=d.length;h<k;h++)c(d[h])}return b},removeNode:function(b){a.H(b);b.parentNode&&b.parentNode.removeChild(b)}}};a.H=a.a.C.H;a.removeNode=a.a.C.removeNode;a.b("cleanNode",a.H);a.b("removeNode",a.removeNode);a.b("utils.domNodeDisposal",a.a.C);a.b("utils.domNodeDisposal.addDisposeCallback",a.a.C.ia);a.b("utils.domNodeDisposal.removeDisposeCallback",a.a.C.cb);(function(){a.a.xa=function(b){var c;if("undefined"!=typeof t)if(t.parseHTML)c=
t.parseHTML(b)||[];else{if((c=t.clean([b]))&&c[0]){for(b=c[0];b.parentNode&&11!==b.parentNode.nodeType;)b=b.parentNode;b.parentNode&&b.parentNode.removeChild(b)}}else{var d=a.a.F(b).toLowerCase();c=s.createElement("div");d=d.match(/^<(thead|tbody|tfoot)/)&&[1,"<table>","</table>"]||!d.indexOf("<tr")&&[2,"<table><tbody>","</tbody></table>"]||(!d.indexOf("<td")||!d.indexOf("<th"))&&[3,"<table><tbody><tr>","</tr></tbody></table>"]||[0,"",""];b="ignored<div>"+d[1]+b+d[2]+"</div>";for("function"==typeof w.innerShiv?
c.appendChild(w.innerShiv(b)):c.innerHTML=b;d[0]--;)c=c.lastChild;c=a.a.N(c.lastChild.childNodes)}return c};a.a.fa=function(b,c){a.a.oa(b);c=a.a.c(c);if(null!==c&&c!==q)if("string"!=typeof c&&(c=c.toString()),"undefined"!=typeof t)t(b).html(c);else for(var d=a.a.xa(c),f=0;f<d.length;f++)b.appendChild(d[f])}})();a.b("utils.parseHtmlFragment",a.a.xa);a.b("utils.setHtml",a.a.fa);a.s=function(){function b(c,f){if(c)if(8==c.nodeType){var g=a.s.$a(c.nodeValue);null!=g&&f.push({xb:c,Kb:g})}else if(1==c.nodeType)for(var g=
0,e=c.childNodes,m=e.length;g<m;g++)b(e[g],f)}var c={};return{va:function(a){if("function"!=typeof a)throw Error("You can only pass a function to ko.memoization.memoize()");var b=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);c[b]=a;return"\x3c!--[ko_memo:"+b+"]--\x3e"},mb:function(a,b){var g=c[a];if(g===q)throw Error("Couldn't find any memo with ID "+a+". Perhaps it's already been unmemoized.");try{return g.apply(null,b||[]),
!0}finally{delete c[a]}},nb:function(c,f){var g=[];b(c,g);for(var e=0,m=g.length;e<m;e++){var h=g[e].xb,k=[h];f&&a.a.R(k,f);a.s.mb(g[e].Kb,k);h.nodeValue="";h.parentNode&&h.parentNode.removeChild(h)}},$a:function(a){return(a=a.match(/^\[ko_memo\:(.*?)\]$/))?a[1]:null}}}();a.b("memoization",a.s);a.b("memoization.memoize",a.s.va);a.b("memoization.unmemoize",a.s.mb);a.b("memoization.parseMemoText",a.s.$a);a.b("memoization.unmemoizeDomNodeAndDescendants",a.s.nb);a.Sa={throttle:function(b,c){b.throttleEvaluation=
c;var d=null;return a.j({read:b,write:function(a){clearTimeout(d);d=setTimeout(function(){b(a)},c)}})},notify:function(b,c){b.equalityComparer="always"==c?F(!1):a.m.fn.equalityComparer;return b}};a.b("extenders",a.Sa);a.kb=function(b,c,d){this.target=b;this.la=c;this.wb=d;a.r(this,"dispose",this.B)};a.kb.prototype.B=function(){this.Hb=!0;this.wb()};a.V=function(){this.G={};a.a.extend(this,a.V.fn);a.r(this,"subscribe",this.Da);a.r(this,"extend",this.extend);a.r(this,"getSubscriptionsCount",this.Db)};
a.V.fn={Da:function(b,c,d){d=d||"change";var f=new a.kb(this,c?b.bind(c):b,function(){a.a.ka(this.G[d],f)}.bind(this));this.G[d]||(this.G[d]=[]);this.G[d].push(f);return f},notifySubscribers:function(b,c){c=c||"change";this.G[c]&&a.q.I(function(){a.a.p(this.G[c].slice(0),function(a){a&&!0!==a.Hb&&a.la(b)})},this)},Db:function(){var b=0;a.a.w(this.G,function(a,d){b+=d.length});return b},extend:function(b){var c=this;b&&a.a.w(b,function(b,f){var g=a.Sa[b];"function"==typeof g&&(c=g(c,f))});return c}};
a.Wa=function(a){return null!=a&&"function"==typeof a.Da&&"function"==typeof a.notifySubscribers};a.b("subscribable",a.V);a.b("isSubscribable",a.Wa);a.q=function(){var b=[];return{rb:function(a){b.push({la:a,Ra:[]})},end:function(){b.pop()},bb:function(c){if(!a.Wa(c))throw Error("Only subscribable things can act as dependencies");if(0<b.length){var d=b[b.length-1];!d||0<=a.a.k(d.Ra,c)||(d.Ra.push(c),d.la(c))}},I:function(a,d,f){try{return b.push(null),a.apply(d,f||[])}finally{b.pop()}}}}();var L=
{undefined:!0,"boolean":!0,number:!0,string:!0};a.m=function(b){function c(){if(0<arguments.length)return c.equalityComparer&&c.equalityComparer(d,arguments[0])||(c.K(),d=arguments[0],c.J()),this;a.q.bb(c);return d}var d=b;a.V.call(c);c.t=function(){return d};c.J=function(){c.notifySubscribers(d)};c.K=function(){c.notifySubscribers(d,"beforeChange")};a.a.extend(c,a.m.fn);a.r(c,"peek",c.t);a.r(c,"valueHasMutated",c.J);a.r(c,"valueWillMutate",c.K);return c};a.m.fn={equalityComparer:function(a,c){return null===
a||typeof a in L?a===c:!1}};var A=a.m.Pb="__ko_proto__";a.m.fn[A]=a.m;a.qa=function(b,c){return null===b||b===q||b[A]===q?!1:b[A]===c?!0:a.qa(b[A],c)};a.T=function(b){return a.qa(b,a.m)};a.Xa=function(b){return"function"==typeof b&&b[A]===a.m||"function"==typeof b&&b[A]===a.j&&b.Eb?!0:!1};a.b("observable",a.m);a.b("isObservable",a.T);a.b("isWriteableObservable",a.Xa);a.U=function(b){b=b||[];if("object"!=typeof b||!("length"in b))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");
b=a.m(b);a.a.extend(b,a.U.fn);return b};a.U.fn={remove:function(a){for(var c=this.t(),d=[],f="function"==typeof a?a:function(e){return e===a},g=0;g<c.length;g++){var e=c[g];f(e)&&(0===d.length&&this.K(),d.push(e),c.splice(g,1),g--)}d.length&&this.J();return d},removeAll:function(b){if(b===q){var c=this.t(),d=c.slice(0);this.K();c.splice(0,c.length);this.J();return d}return b?this.remove(function(c){return 0<=a.a.k(b,c)}):[]},destroy:function(a){var c=this.t(),d="function"==typeof a?a:function(c){return c===
a};this.K();for(var f=c.length-1;0<=f;f--)d(c[f])&&(c[f]._destroy=!0);this.J()},destroyAll:function(b){return b===q?this.destroy(F(!0)):b?this.destroy(function(c){return 0<=a.a.k(b,c)}):[]},indexOf:function(b){var c=this();return a.a.k(c,b)},replace:function(a,c){var d=this.indexOf(a);0<=d&&(this.K(),this.t()[d]=c,this.J())}};a.a.p("pop push reverse shift sort splice unshift".split(" "),function(b){a.U.fn[b]=function(){var a=this.t();this.K();a=a[b].apply(a,arguments);this.J();return a}});a.a.p(["slice"],
function(b){a.U.fn[b]=function(){var a=this();return a[b].apply(a,arguments)}});a.b("observableArray",a.U);a.j=function(b,c,d){function f(){a.a.p(v,function(a){a.B()});v=[]}function g(){var a=m.throttleEvaluation;a&&0<=a?(clearTimeout(t),t=setTimeout(e,a)):e()}function e(){if(!n)if(l&&D())x();else{n=!0;try{var b=a.a.Z(v,function(a){return a.target});a.q.rb(function(e){var c;0<=(c=a.a.k(b,e))?b[c]=q:v.push(e.Da(g))});for(var e=p.call(c),d=b.length-1;0<=d;d--)b[d]&&v.splice(d,1)[0].B();l=!0;m.notifySubscribers(k,
"beforeChange");k=e;m.notifySubscribers(k)}finally{a.q.end(),n=!1}v.length||x()}}function m(){if(0<arguments.length){if("function"===typeof r)r.apply(c,arguments);else throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return this}l||e();a.q.bb(m);return k}function h(){return!l||0<v.length}var k,l=!1,n=!1,p=b;p&&"object"==typeof p?(d=p,p=d.read):(d=d||{},p||(p=d.read));if("function"!=typeof p)throw Error("Pass a function that returns the value of the ko.computed");
var r=d.write,z=d.disposeWhenNodeIsRemoved||d.$||null,D=d.disposeWhen||d.Qa||F(!1),x=f,v=[],t=null;c||(c=d.owner);m.t=function(){l||e();return k};m.Cb=function(){return v.length};m.Eb="function"===typeof d.write;m.B=function(){x()};m.ta=h;a.V.call(m);a.a.extend(m,a.j.fn);a.r(m,"peek",m.t);a.r(m,"dispose",m.B);a.r(m,"isActive",m.ta);a.r(m,"getDependenciesCount",m.Cb);!0!==d.deferEvaluation&&e();if(z&&h()){x=function(){a.a.C.cb(z,x);f()};a.a.C.ia(z,x);var s=D,D=function(){return!a.a.aa(z)||s()}}return m};
a.Gb=function(b){return a.qa(b,a.j)};C=a.m.Pb;a.j[C]=a.m;a.j.fn={};a.j.fn[C]=a.j;a.b("dependentObservable",a.j);a.b("computed",a.j);a.b("isComputed",a.Gb);(function(){function b(a,g,e){e=e||new d;a=g(a);if("object"!=typeof a||null===a||a===q||a instanceof Date||a instanceof String||a instanceof Number||a instanceof Boolean)return a;var m=a instanceof Array?[]:{};e.save(a,m);c(a,function(c){var d=g(a[c]);switch(typeof d){case "boolean":case "number":case "string":case "function":m[c]=d;break;case "object":case "undefined":var l=
e.get(d);m[c]=l!==q?l:b(d,g,e)}});return m}function c(a,b){if(a instanceof Array){for(var e=0;e<a.length;e++)b(e);"function"==typeof a.toJSON&&b("toJSON")}else for(e in a)b(e)}function d(){this.keys=[];this.Ha=[]}a.lb=function(c){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return b(c,function(b){for(var e=0;a.T(b)&&10>e;e++)b=b();return b})};a.toJSON=function(b,c,e){b=a.lb(b);return a.a.Ca(b,c,e)};d.prototype={save:function(b,c){var e=a.a.k(this.keys,
b);0<=e?this.Ha[e]=c:(this.keys.push(b),this.Ha.push(c))},get:function(b){b=a.a.k(this.keys,b);return 0<=b?this.Ha[b]:q}}})();a.b("toJS",a.lb);a.b("toJSON",a.toJSON);(function(){a.h={n:function(b){switch(a.a.u(b)){case "option":return!0===b.__ko__hasDomDataOptionValue__?a.a.f.get(b,a.d.options.wa):7>=a.a.ca?b.getAttributeNode("value")&&b.getAttributeNode("value").specified?b.value:b.text:b.value;case "select":return 0<=b.selectedIndex?a.h.n(b.options[b.selectedIndex]):q;default:return b.value}},W:function(b,
c){switch(a.a.u(b)){case "option":switch(typeof c){case "string":a.a.f.set(b,a.d.options.wa,q);"__ko__hasDomDataOptionValue__"in b&&delete b.__ko__hasDomDataOptionValue__;b.value=c;break;default:a.a.f.set(b,a.d.options.wa,c),b.__ko__hasDomDataOptionValue__=!0,b.value="number"===typeof c?c:""}break;case "select":""===c&&(c=q);if(null===c||c===q)b.selectedIndex=-1;for(var d=b.options.length-1;0<=d;d--)if(a.h.n(b.options[d])==c){b.selectedIndex=d;break}1<b.size||-1!==b.selectedIndex||(b.selectedIndex=
0);break;default:if(null===c||c===q)c="";b.value=c}}}})();a.b("selectExtensions",a.h);a.b("selectExtensions.readValue",a.h.n);a.b("selectExtensions.writeValue",a.h.W);a.g=function(){function b(a,b){for(var d=null;a!=d;)d=a,a=a.replace(c,function(a,c){return b[c]});return a}var c=/\@ko_token_(\d+)\@/g,d=["true","false","null","undefined"],f=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i;return{S:[],da:function(c){var e=a.a.F(c);if(3>e.length)return[];"{"===e.charAt(0)&&(e=e.substring(1,e.length-
1));c=[];for(var d=null,f,k=0;k<e.length;k++){var l=e.charAt(k);if(null===d)switch(l){case '"':case "'":case "/":d=k,f=l}else if(l==f&&"\\"!==e.charAt(k-1)){l=e.substring(d,k+1);c.push(l);var n="@ko_token_"+(c.length-1)+"@",e=e.substring(0,d)+n+e.substring(k+1),k=k-(l.length-n.length),d=null}}f=d=null;for(var p=0,r=null,k=0;k<e.length;k++){l=e.charAt(k);if(null===d)switch(l){case "{":d=k;r=l;f="}";break;case "(":d=k;r=l;f=")";break;case "[":d=k,r=l,f="]"}l===r?p++:l===f&&(p--,0===p&&(l=e.substring(d,
k+1),c.push(l),n="@ko_token_"+(c.length-1)+"@",e=e.substring(0,d)+n+e.substring(k+1),k-=l.length-n.length,d=null))}f=[];e=e.split(",");d=0;for(k=e.length;d<k;d++)p=e[d],r=p.indexOf(":"),0<r&&r<p.length-1?(l=p.substring(r+1),f.push({key:b(p.substring(0,r),c),value:b(l,c)})):f.push({unknown:b(p,c)});return f},ea:function(b){var e="string"===typeof b?a.g.da(b):b,c=[];b=[];for(var h,k=0;h=e[k];k++)if(0<c.length&&c.push(","),h.key){var l;a:{l=h.key;var n=a.a.F(l);switch(n.length&&n.charAt(0)){case "'":case '"':break a;
default:l="'"+n+"'"}}h=h.value;c.push(l);c.push(":");c.push(h);h=a.a.F(h);0<=a.a.k(d,a.a.F(h).toLowerCase())?h=!1:(n=h.match(f),h=null===n?!1:n[1]?"Object("+n[1]+")"+n[2]:h);h&&(0<b.length&&b.push(", "),b.push(l+" : function(__ko_value) { "+h+" = __ko_value; }"))}else h.unknown&&c.push(h.unknown);e=c.join("");0<b.length&&(e=e+", '_ko_property_writers' : { "+b.join("")+" } ");return e},Jb:function(b,c){for(var d=0;d<b.length;d++)if(a.a.F(b[d].key)==c)return!0;return!1},ha:function(b,c,d,f,k){if(b&&
a.T(b))!a.Xa(b)||k&&b.t()===f||b(f);else if((b=c()._ko_property_writers)&&b[d])b[d](f)}}}();a.b("expressionRewriting",a.g);a.b("expressionRewriting.bindingRewriteValidators",a.g.S);a.b("expressionRewriting.parseObjectLiteral",a.g.da);a.b("expressionRewriting.preProcessBindings",a.g.ea);a.b("jsonExpressionRewriting",a.g);a.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",a.g.ea);(function(){function b(a){return 8==a.nodeType&&(g?a.text:a.nodeValue).match(e)}function c(a){return 8==a.nodeType&&
(g?a.text:a.nodeValue).match(m)}function d(a,e){for(var d=a,g=1,f=[];d=d.nextSibling;){if(c(d)&&(g--,0===g))return f;f.push(d);b(d)&&g++}if(!e)throw Error("Cannot find closing comment tag to match: "+a.nodeValue);return null}function f(a,b){var c=d(a,b);return c?0<c.length?c[c.length-1].nextSibling:a.nextSibling:null}var g=s&&"\x3c!--test--\x3e"===s.createComment("test").text,e=g?/^\x3c!--\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*--\x3e$/:/^\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*$/,m=g?/^\x3c!--\s*\/ko\s*--\x3e$/:
/^\s*\/ko\s*$/,h={ul:!0,ol:!0};a.e={L:{},childNodes:function(a){return b(a)?d(a):a.childNodes},ba:function(c){if(b(c)){c=a.e.childNodes(c);for(var e=0,d=c.length;e<d;e++)a.removeNode(c[e])}else a.a.oa(c)},P:function(c,e){if(b(c)){a.e.ba(c);for(var d=c.nextSibling,g=0,f=e.length;g<f;g++)d.parentNode.insertBefore(e[g],d)}else a.a.P(c,e)},ab:function(a,c){b(a)?a.parentNode.insertBefore(c,a.nextSibling):a.firstChild?a.insertBefore(c,a.firstChild):a.appendChild(c)},Va:function(c,e,d){d?b(c)?c.parentNode.insertBefore(e,
d.nextSibling):d.nextSibling?c.insertBefore(e,d.nextSibling):c.appendChild(e):a.e.ab(c,e)},firstChild:function(a){return b(a)?!a.nextSibling||c(a.nextSibling)?null:a.nextSibling:a.firstChild},nextSibling:function(a){b(a)&&(a=f(a));return a.nextSibling&&c(a.nextSibling)?null:a.nextSibling},ob:function(a){return(a=b(a))?a[1]:null},Za:function(e){if(h[a.a.u(e)]){var d=e.firstChild;if(d){do if(1===d.nodeType){var g;g=d.firstChild;var m=null;if(g){do if(m)m.push(g);else if(b(g)){var r=f(g,!0);r?g=r:m=
[g]}else c(g)&&(m=[g]);while(g=g.nextSibling)}if(g=m)for(m=d.nextSibling,r=0;r<g.length;r++)m?e.insertBefore(g[r],m):e.appendChild(g[r])}while(d=d.nextSibling)}}}}})();a.b("virtualElements",a.e);a.b("virtualElements.allowedBindings",a.e.L);a.b("virtualElements.emptyNode",a.e.ba);a.b("virtualElements.insertAfter",a.e.Va);a.b("virtualElements.prepend",a.e.ab);a.b("virtualElements.setDomNodeChildren",a.e.P);(function(){a.M=function(){this.Na={}};a.a.extend(a.M.prototype,{nodeHasBindings:function(b){switch(b.nodeType){case 1:return null!=
b.getAttribute("data-bind");case 8:return null!=a.e.ob(b);default:return!1}},getBindings:function(a,c){var d=this.getBindingsString(a,c);return d?this.parseBindingsString(d,c,a):null},getBindingsString:function(b){switch(b.nodeType){case 1:return b.getAttribute("data-bind");case 8:return a.e.ob(b);default:return null}},parseBindingsString:function(b,c,d){try{var f;if(!(f=this.Na[b])){var g=this.Na,e,m="with($context){with($data||{}){return{"+a.g.ea(b)+"}}}";e=new Function("$context","$element",m);
f=g[b]=e}return f(c,d)}catch(h){throw h.message="Unable to parse bindings.\nBindings value: "+b+"\nMessage: "+h.message,h;}}});a.M.instance=new a.M})();a.b("bindingProvider",a.M);(function(){function b(b,e,d){for(var f=a.e.firstChild(e);e=f;)f=a.e.nextSibling(e),c(b,e,d)}function c(c,e,f){var h=!0,k=1===e.nodeType;k&&a.e.Za(e);if(k&&f||a.M.instance.nodeHasBindings(e))h=d(e,null,c,f).Sb;h&&b(c,e,!k)}function d(b,c,d,h){function k(a){return function(){return p[a]}}function l(){return p}var n=0,p,r,
z=a.a.f.get(b,f);if(!c){if(z)throw Error("You cannot apply bindings multiple times to the same element.");a.a.f.set(b,f,!0)}a.j(function(){var f=d&&d instanceof a.A?d:new a.A(a.a.c(d)),x=f.$data;!z&&h&&a.jb(b,f);if(p=("function"==typeof c?c(f,b):c)||a.M.instance.getBindings(b,f))0===n&&(n=1,a.a.w(p,function(c){var e=a.d[c];if(e&&8===b.nodeType&&!a.e.L[c])throw Error("The binding '"+c+"' cannot be used with virtual elements");if(e&&"function"==typeof e.init&&(e=(0,e.init)(b,k(c),l,x,f))&&e.controlsDescendantBindings){if(r!==
q)throw Error("Multiple bindings ("+r+" and "+c+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");r=c}}),n=2),2===n&&a.a.w(p,function(c){var e=a.d[c];e&&"function"==typeof e.update&&(0,e.update)(b,k(c),l,x,f)})},null,{$:b});return{Sb:r===q}}a.d={};a.A=function(b,c,d){c?(a.a.extend(this,c),this.$parentContext=c,this.$parent=c.$data,this.$parents=(c.$parents||[]).slice(0),this.$parents.unshift(this.$parent)):(this.$parents=
[],this.$root=b,this.ko=a);this.$data=b;d&&(this[d]=b)};a.A.prototype.createChildContext=function(b,c){return new a.A(b,this,c)};a.A.prototype.extend=function(b){var c=a.a.extend(new a.A,this);return a.a.extend(c,b)};var f="__ko_boundElement";a.jb=function(b,c){if(2==arguments.length)a.a.f.set(b,"__ko_bindingContext__",c);else return a.a.f.get(b,"__ko_bindingContext__")};a.Ka=function(b,c,f){1===b.nodeType&&a.e.Za(b);return d(b,c,f,!0)};a.Ja=function(a,c){1!==c.nodeType&&8!==c.nodeType||b(a,c,!0)};
a.Ia=function(a,b){if(b&&1!==b.nodeType&&8!==b.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");b=b||w.document.body;c(a,b,!0)};a.na=function(b){switch(b.nodeType){case 1:case 8:var c=a.jb(b);if(c)return c;if(b.parentNode)return a.na(b.parentNode)}return q};a.ub=function(b){return(b=a.na(b))?b.$data:q};a.b("bindingHandlers",a.d);a.b("applyBindings",a.Ia);a.b("applyBindingsToDescendants",a.Ja);a.b("applyBindingsToNode",a.Ka);
a.b("contextFor",a.na);a.b("dataFor",a.ub)})();var K={"class":"className","for":"htmlFor"};a.d.attr={update:function(b,c){var d=a.a.c(c())||{};a.a.w(d,function(c,d){d=a.a.c(d);var e=!1===d||null===d||d===q;e&&b.removeAttribute(c);8>=a.a.ca&&c in K?(c=K[c],e?b.removeAttribute(c):b[c]=d):e||b.setAttribute(c,d.toString());"name"===c&&a.a.gb(b,e?"":d.toString())})}};a.d.checked={init:function(b,c,d){a.a.o(b,"click",function(){var f;if("checkbox"==b.type)f=b.checked;else if("radio"==b.type&&b.checked)f=
b.value;else return;var g=c(),e=a.a.c(g);"checkbox"==b.type&&e instanceof Array?a.a.ja(g,b.value,b.checked):a.g.ha(g,d,"checked",f,!0)});"radio"!=b.type||b.name||a.d.uniqueName.init(b,F(!0))},update:function(b,c){var d=a.a.c(c());"checkbox"==b.type?b.checked=d instanceof Array?0<=a.a.k(d,b.value):d:"radio"==b.type&&(b.checked=b.value==d)}};a.d.css={update:function(b,c){var d=a.a.c(c());"object"==typeof d?a.a.w(d,function(c,d){d=a.a.c(d);a.a.ga(b,c,d)}):(d=String(d||""),a.a.ga(b,b.__ko__cssValue,!1),
b.__ko__cssValue=d,a.a.ga(b,d,!0))}};a.d.enable={update:function(b,c){var d=a.a.c(c());d&&b.disabled?b.removeAttribute("disabled"):d||b.disabled||(b.disabled=!0)}};a.d.disable={update:function(b,c){a.d.enable.update(b,function(){return!a.a.c(c())})}};a.d.event={init:function(b,c,d,f){var g=c()||{};a.a.w(g,function(e){"string"==typeof e&&a.a.o(b,e,function(b){var g,k=c()[e];if(k){var l=d();try{var n=a.a.N(arguments);n.unshift(f);g=k.apply(f,n)}finally{!0!==g&&(b.preventDefault?b.preventDefault():b.returnValue=
!1)}!1===l[e+"Bubble"]&&(b.cancelBubble=!0,b.stopPropagation&&b.stopPropagation())}})})}};a.d.foreach={Ya:function(b){return function(){var c=b(),d=a.a.ya(c);if(!d||"number"==typeof d.length)return{foreach:c,templateEngine:a.D.sa};a.a.c(c);return{foreach:d.data,as:d.as,includeDestroyed:d.includeDestroyed,afterAdd:d.afterAdd,beforeRemove:d.beforeRemove,afterRender:d.afterRender,beforeMove:d.beforeMove,afterMove:d.afterMove,templateEngine:a.D.sa}}},init:function(b,c){return a.d.template.init(b,a.d.foreach.Ya(c))},
update:function(b,c,d,f,g){return a.d.template.update(b,a.d.foreach.Ya(c),d,f,g)}};a.g.S.foreach=!1;a.e.L.foreach=!0;a.d.hasfocus={init:function(b,c,d){function f(e){b.__ko_hasfocusUpdating=!0;var f=b.ownerDocument;if("activeElement"in f){var g;try{g=f.activeElement}catch(l){g=f.body}e=g===b}f=c();a.g.ha(f,d,"hasfocus",e,!0);b.__ko_hasfocusLastValue=e;b.__ko_hasfocusUpdating=!1}var g=f.bind(null,!0),e=f.bind(null,!1);a.a.o(b,"focus",g);a.a.o(b,"focusin",g);a.a.o(b,"blur",e);a.a.o(b,"focusout",e)},
update:function(b,c){var d=!!a.a.c(c());b.__ko_hasfocusUpdating||b.__ko_hasfocusLastValue===d||(d?b.focus():b.blur(),a.q.I(a.a.Ga,null,[b,d?"focusin":"focusout"]))}};a.d.hasFocus=a.d.hasfocus;a.d.html={init:function(){return{controlsDescendantBindings:!0}},update:function(b,c){a.a.fa(b,c())}};var I="__ko_withIfBindingData";G("if");G("ifnot",!1,!0);G("with",!0,!1,function(a,c){return a.createChildContext(c)});a.d.options={init:function(b){if("select"!==a.a.u(b))throw Error("options binding applies only to SELECT elements");
for(;0<b.length;)b.remove(0);return{controlsDescendantBindings:!0}},update:function(b,c,d){function f(a,b,c){var d=typeof b;return"function"==d?b(a):"string"==d?a[b]:c}function g(b,c){if(p){var d=0<=a.a.k(p,a.h.n(c[0]));a.a.hb(c[0],d)}}var e=0==b.length,m=!e&&b.multiple?b.scrollTop:null;c=a.a.c(c());var h=d(),k=h.optionsIncludeDestroyed,l={},n,p;b.multiple?p=a.a.Z(b.selectedOptions||a.a.Y(b.childNodes,function(b){return b.tagName&&"option"===a.a.u(b)&&b.selected}),function(b){return a.h.n(b)}):0<=
b.selectedIndex&&(p=[a.h.n(b.options[b.selectedIndex])]);if(c){"undefined"==typeof c.length&&(c=[c]);var r=a.a.Y(c,function(b){return k||b===q||null===b||!a.a.c(b._destroy)});"optionsCaption"in h&&(n=a.a.c(h.optionsCaption),null!==n&&n!==q&&r.unshift(l))}else c=[];d=g;h.optionsAfterRender&&(d=function(b,c){g(0,c);a.q.I(h.optionsAfterRender,null,[c[0],b!==l?b:q])});a.a.Aa(b,r,function(b,c,d){d.length&&(p=d[0].selected&&[a.h.n(d[0])]);c=s.createElement("option");b===l?(a.a.fa(c,n),a.h.W(c,q)):(d=f(b,
h.optionsValue,b),a.h.W(c,a.a.c(d)),b=f(b,h.optionsText,d),a.a.ib(c,b));return[c]},null,d);p=null;e&&"value"in h&&J(b,a.a.ya(h.value),!0);a.a.zb(b);m&&20<Math.abs(m-b.scrollTop)&&(b.scrollTop=m)}};a.d.options.wa="__ko.optionValueDomData__";a.d.selectedOptions={init:function(b,c,d){a.a.o(b,"change",function(){var f=c(),g=[];a.a.p(b.getElementsByTagName("option"),function(b){b.selected&&g.push(a.h.n(b))});a.g.ha(f,d,"selectedOptions",g)})},update:function(b,c){if("select"!=a.a.u(b))throw Error("values binding applies only to SELECT elements");
var d=a.a.c(c());d&&"number"==typeof d.length&&a.a.p(b.getElementsByTagName("option"),function(b){var c=0<=a.a.k(d,a.h.n(b));a.a.hb(b,c)})}};a.d.style={update:function(b,c){var d=a.a.c(c()||{});a.a.w(d,function(c,d){d=a.a.c(d);b.style[c]=d||""})}};a.d.submit={init:function(b,c,d,f){if("function"!=typeof c())throw Error("The value for a submit binding must be a function");a.a.o(b,"submit",function(a){var d,m=c();try{d=m.call(f,b)}finally{!0!==d&&(a.preventDefault?a.preventDefault():a.returnValue=!1)}})}};
a.d.text={update:function(b,c){a.a.ib(b,c())}};a.e.L.text=!0;a.d.uniqueName={init:function(b,c){if(c()){var d="ko_unique_"+ ++a.d.uniqueName.tb;a.a.gb(b,d)}}};a.d.uniqueName.tb=0;a.d.value={init:function(b,c,d){function f(){m=!1;var e=c(),f=a.h.n(b);a.g.ha(e,d,"value",f)}var g=["change"],e=d().valueUpdate,m=!1;e&&("string"==typeof e&&(e=[e]),a.a.R(g,e),g=a.a.Ma(g));!a.a.ca||("input"!=b.tagName.toLowerCase()||"text"!=b.type||"off"==b.autocomplete||b.form&&"off"==b.form.autocomplete)||-1!=a.a.k(g,"propertychange")||
(a.a.o(b,"propertychange",function(){m=!0}),a.a.o(b,"blur",function(){m&&f()}));a.a.p(g,function(c){var d=f;a.a.Tb(c,"after")&&(d=function(){setTimeout(f,0)},c=c.substring(5));a.a.o(b,c,d)})},update:function(b,c){var d="select"===a.a.u(b),f=a.a.c(c()),g=a.h.n(b);f!==g&&(g=function(){a.h.W(b,f)},g(),d&&setTimeout(g,0));d&&0<b.length&&J(b,f,!1)}};a.d.visible={update:function(b,c){var d=a.a.c(c()),f="none"!=b.style.display;d&&!f?b.style.display="":!d&&f&&(b.style.display="none")}};(function(b){a.d[b]=
{init:function(c,d,f,g){return a.d.event.init.call(this,c,function(){var a={};a[b]=d();return a},f,g)}}})("click");a.v=function(){};a.v.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource");};a.v.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock");};a.v.prototype.makeTemplateSource=function(b,c){if("string"==typeof b){c=c||s;var d=c.getElementById(b);if(!d)throw Error("Cannot find template with ID "+b);return new a.l.i(d)}if(1==
b.nodeType||8==b.nodeType)return new a.l.Q(b);throw Error("Unknown template type: "+b);};a.v.prototype.renderTemplate=function(a,c,d,f){a=this.makeTemplateSource(a,f);return this.renderTemplateSource(a,c,d)};a.v.prototype.isTemplateRewritten=function(a,c){return!1===this.allowTemplateRewriting?!0:this.makeTemplateSource(a,c).data("isRewritten")};a.v.prototype.rewriteTemplate=function(a,c,d){a=this.makeTemplateSource(a,d);c=c(a.text());a.text(c);a.data("isRewritten",!0)};a.b("templateEngine",a.v);
a.Ea=function(){function b(b,c,d,m){b=a.g.da(b);for(var h=a.g.S,k=0;k<b.length;k++){var l=b[k].key;if(h.hasOwnProperty(l)){var n=h[l];if("function"===typeof n){if(l=n(b[k].value))throw Error(l);}else if(!n)throw Error("This template engine does not support the '"+l+"' binding within its templates");}}d="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+a.g.ea(b)+" } })()},'"+d.toLowerCase()+"')";return m.createJavaScriptEvaluatorBlock(d)+c}var c=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,
d=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{Ab:function(b,c,d){c.isTemplateRewritten(b,d)||c.rewriteTemplate(b,function(b){return a.Ea.Lb(b,c)},d)},Lb:function(a,g){return a.replace(c,function(a,c,d,f,l){return b(l,c,d,g)}).replace(d,function(a,c){return b(c,"\x3c!-- ko --\x3e","#comment",g)})},qb:function(b,c){return a.s.va(function(d,m){var h=d.nextSibling;h&&h.nodeName.toLowerCase()===c&&a.Ka(h,b,m)})}}}();a.b("__tr_ambtns",a.Ea.qb);(function(){a.l={};a.l.i=function(a){this.i=a};a.l.i.prototype.text=
function(){var b=a.a.u(this.i),b="script"===b?"text":"textarea"===b?"value":"innerHTML";if(0==arguments.length)return this.i[b];var c=arguments[0];"innerHTML"===b?a.a.fa(this.i,c):this.i[b]=c};a.l.i.prototype.data=function(b){if(1===arguments.length)return a.a.f.get(this.i,"templateSourceData_"+b);a.a.f.set(this.i,"templateSourceData_"+b,arguments[1])};a.l.Q=function(a){this.i=a};a.l.Q.prototype=new a.l.i;a.l.Q.prototype.text=function(){if(0==arguments.length){var b=a.a.f.get(this.i,"__ko_anon_template__")||
{};b.Fa===q&&b.ma&&(b.Fa=b.ma.innerHTML);return b.Fa}a.a.f.set(this.i,"__ko_anon_template__",{Fa:arguments[0]})};a.l.i.prototype.nodes=function(){if(0==arguments.length)return(a.a.f.get(this.i,"__ko_anon_template__")||{}).ma;a.a.f.set(this.i,"__ko_anon_template__",{ma:arguments[0]})};a.b("templateSources",a.l);a.b("templateSources.domElement",a.l.i);a.b("templateSources.anonymousTemplate",a.l.Q)})();(function(){function b(b,c,d){var f;for(c=a.e.nextSibling(c);b&&(f=b)!==c;)b=a.e.nextSibling(f),1!==
f.nodeType&&8!==f.nodeType||d(f)}function c(c,d){if(c.length){var f=c[0],g=c[c.length-1];b(f,g,function(b){a.Ia(d,b)});b(f,g,function(b){a.s.nb(b,[d])})}}function d(a){return a.nodeType?a:0<a.length?a[0]:null}function f(b,f,h,k,l){l=l||{};var n=b&&d(b),n=n&&n.ownerDocument,p=l.templateEngine||g;a.Ea.Ab(h,p,n);h=p.renderTemplate(h,k,l,n);if("number"!=typeof h.length||0<h.length&&"number"!=typeof h[0].nodeType)throw Error("Template engine must return an array of DOM nodes");n=!1;switch(f){case "replaceChildren":a.e.P(b,
h);n=!0;break;case "replaceNode":a.a.eb(b,h);n=!0;break;case "ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+f);}n&&(c(h,k),l.afterRender&&a.q.I(l.afterRender,null,[h,k.$data]));return h}var g;a.Ba=function(b){if(b!=q&&!(b instanceof a.v))throw Error("templateEngine must inherit from ko.templateEngine");g=b};a.za=function(b,c,h,k,l){h=h||{};if((h.templateEngine||g)==q)throw Error("Set a template engine before calling renderTemplate");l=l||"replaceChildren";if(k){var n=d(k);return a.j(function(){var g=
c&&c instanceof a.A?c:new a.A(a.a.c(c)),r="function"==typeof b?b(g.$data,g):b,g=f(k,l,r,g,h);"replaceNode"==l&&(k=g,n=d(k))},null,{Qa:function(){return!n||!a.a.aa(n)},$:n&&"replaceNode"==l?n.parentNode:n})}return a.s.va(function(d){a.za(b,c,h,d,"replaceNode")})};a.Rb=function(b,d,g,k,l){function n(a,b){c(b,r);g.afterRender&&g.afterRender(b,a)}function p(c,d){r=l.createChildContext(a.a.c(c),g.as);r.$index=d;var k="function"==typeof b?b(c,r):b;return f(null,"ignoreTargetNode",k,r,g)}var r;return a.j(function(){var b=
a.a.c(d)||[];"undefined"==typeof b.length&&(b=[b]);b=a.a.Y(b,function(b){return g.includeDestroyed||b===q||null===b||!a.a.c(b._destroy)});a.q.I(a.a.Aa,null,[k,b,p,g,n])},null,{$:k})};a.d.template={init:function(b,c){var d=a.a.c(c());"string"==typeof d||(d.name||1!=b.nodeType&&8!=b.nodeType)||(d=1==b.nodeType?b.childNodes:a.e.childNodes(b),d=a.a.Mb(d),(new a.l.Q(b)).nodes(d));return{controlsDescendantBindings:!0}},update:function(b,c,d,f,g){c=a.a.c(c());d={};f=!0;var n,p=null;"string"!=typeof c&&(d=
c,c=a.a.c(d.name),"if"in d&&(f=a.a.c(d["if"])),f&&"ifnot"in d&&(f=!a.a.c(d.ifnot)),n=a.a.c(d.data));"foreach"in d?p=a.Rb(c||b,f&&d.foreach||[],d,b,g):f?(g="data"in d?g.createChildContext(n,d.as):g,p=a.za(c||b,g,d,b)):a.e.ba(b);g=p;(n=a.a.f.get(b,"__ko__templateComputedDomDataKey__"))&&"function"==typeof n.B&&n.B();a.a.f.set(b,"__ko__templateComputedDomDataKey__",g&&g.ta()?g:q)}};a.g.S.template=function(b){b=a.g.da(b);return 1==b.length&&b[0].unknown||a.g.Jb(b,"name")?null:"This template engine does not support anonymous templates nested within its templates"};
a.e.L.template=!0})();a.b("setTemplateEngine",a.Ba);a.b("renderTemplate",a.za);a.a.Pa=function(){function a(b,d,f,g,e){var m=Math.min,h=Math.max,k=[],l,n=b.length,p,r=d.length,q=r-n||1,t=n+r+1,s,v,w;for(l=0;l<=n;l++)for(v=s,k.push(s=[]),w=m(r,l+q),p=h(0,l-1);p<=w;p++)s[p]=p?l?b[l-1]===d[p-1]?v[p-1]:m(v[p]||t,s[p-1]||t)+1:p+1:l+1;m=[];h=[];q=[];l=n;for(p=r;l||p;)r=k[l][p]-1,p&&r===k[l][p-1]?h.push(m[m.length]={status:f,value:d[--p],index:p}):l&&r===k[l-1][p]?q.push(m[m.length]={status:g,value:b[--l],
index:l}):(m.push({status:"retained",value:d[--p]}),--l);if(h.length&&q.length){b=10*n;var E;for(d=f=0;(e||d<b)&&(E=h[f]);f++){for(g=0;k=q[g];g++)if(E.value===k.value){E.moved=k.index;k.moved=E.index;q.splice(g,1);d=g=0;break}d+=g}}return m.reverse()}return function(c,d,f){c=c||[];d=d||[];return c.length<=d.length?a(c,d,"added","deleted",f):a(d,c,"deleted","added",f)}}();a.b("utils.compareArrays",a.a.Pa);(function(){function b(b){for(;b.length&&!a.a.aa(b[0]);)b.splice(0,1);if(1<b.length){for(var c=
b[0],g=b[b.length-1],e=[c];c!==g;){c=c.nextSibling;if(!c)return;e.push(c)}Array.prototype.splice.apply(b,[0,b.length].concat(e))}return b}function c(c,f,g,e,m){var h=[];c=a.j(function(){var c=f(g,m,b(h))||[];0<h.length&&(a.a.eb(h,c),e&&a.q.I(e,null,[g,c,m]));h.splice(0,h.length);a.a.R(h,c)},null,{$:c,Qa:function(){return!a.a.pb(h)}});return{O:h,j:c.ta()?c:q}}a.a.Aa=function(d,f,g,e,m){function h(a,c){u=n[c];x!==c&&(E[a]=u);u.ra(x++);b(u.O);t.push(u);w.push(u)}function k(b,c){if(b)for(var d=0,e=c.length;d<
e;d++)c[d]&&a.a.p(c[d].O,function(a){b(a,d,c[d].X)})}f=f||[];e=e||{};var l=a.a.f.get(d,"setDomNodeChildrenFromArrayMapping_lastMappingResult")===q,n=a.a.f.get(d,"setDomNodeChildrenFromArrayMapping_lastMappingResult")||[],p=a.a.Z(n,function(a){return a.X}),r=a.a.Pa(p,f,e.dontLimitMoves),t=[],s=0,x=0,v=[],w=[];f=[];for(var E=[],p=[],u,B=0,y,A;y=r[B];B++)switch(A=y.moved,y.status){case "deleted":A===q&&(u=n[s],u.j&&u.j.B(),v.push.apply(v,b(u.O)),e.beforeRemove&&(f[B]=u,w.push(u)));s++;break;case "retained":h(B,
s++);break;case "added":A!==q?h(B,A):(u={X:y.value,ra:a.m(x++)},t.push(u),w.push(u),l||(p[B]=u))}k(e.beforeMove,E);a.a.p(v,e.beforeRemove?a.H:a.removeNode);for(var B=0,l=a.e.firstChild(d),C;u=w[B];B++){u.O||a.a.extend(u,c(d,g,u.X,m,u.ra));for(s=0;r=u.O[s];l=r.nextSibling,C=r,s++)r!==l&&a.e.Va(d,r,C);!u.Fb&&m&&(m(u.X,u.O,u.ra),u.Fb=!0)}k(e.beforeRemove,f);k(e.afterMove,E);k(e.afterAdd,p);a.a.f.set(d,"setDomNodeChildrenFromArrayMapping_lastMappingResult",t)}})();a.b("utils.setDomNodeChildrenFromArrayMapping",
a.a.Aa);a.D=function(){this.allowTemplateRewriting=!1};a.D.prototype=new a.v;a.D.prototype.renderTemplateSource=function(b){var c=(9>a.a.ca?0:b.nodes)?b.nodes():null;if(c)return a.a.N(c.cloneNode(!0).childNodes);b=b.text();return a.a.xa(b)};a.D.sa=new a.D;a.Ba(a.D.sa);a.b("nativeTemplateEngine",a.D);(function(){a.ua=function(){var a=this.Ib=function(){if("undefined"==typeof t||!t.tmpl)return 0;try{if(0<=t.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(a){}return 1}();this.renderTemplateSource=
function(b,f,g){g=g||{};if(2>a)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var e=b.data("precompiled");e||(e=b.text()||"",e=t.template(null,"{{ko_with $item.koBindingContext}}"+e+"{{/ko_with}}"),b.data("precompiled",e));b=[f.$data];f=t.extend({koBindingContext:f},g.templateOptions);f=t.tmpl(e,b,f);f.appendTo(s.createElement("div"));t.fragments={};return f};this.createJavaScriptEvaluatorBlock=function(a){return"{{ko_code ((function() { return "+
a+" })()) }}"};this.addTemplate=function(a,b){s.write("<script type='text/html' id='"+a+"'>"+b+"\x3c/script>")};0<a&&(t.tmpl.tag.ko_code={open:"__.push($1 || '');"},t.tmpl.tag.ko_with={open:"with($1) {",close:"} "})};a.ua.prototype=new a.v;var b=new a.ua;0<b.Ib&&a.Ba(b);a.b("jqueryTmplTemplateEngine",a.ua)})()})})();
})();

/**
 * Basic status bar component that can be used as the bottom toolbar of any {@link Ext.Panel}.  In addition to
 * supporting the standard {@link Ext.toolbar.Toolbar} interface for adding buttons, menus and other items, the StatusBar
 * provides a greedy status element that can be aligned to either side and has convenient methods for setting the
 * status text and icon.  You can also indicate that something is processing using the {@link #showBusy} method.
 *
 *     Ext.create('Ext.Panel', {
 *         title: 'StatusBar',
 *         // etc.
 *         bbar: Ext.create('Ext.ux.StatusBar', {
 *             id: 'my-status',
 *      
 *             // defaults to use when the status is cleared:
 *             defaultText: 'Default status text',
 *             defaultIconCls: 'default-icon',
 *      
 *             // values to set initially:
 *             text: 'Ready',
 *             iconCls: 'ready-icon',
 *      
 *             // any standard Toolbar items:
 *             items: [{
 *                 text: 'A Button'
 *             }, '-', 'Plain Text']
 *         })
 *     });
 *
 *     // Update the status bar later in code:
 *     var sb = Ext.getCmp('my-status');
 *     sb.setStatus({
 *         text: 'OK',
 *         iconCls: 'ok-icon',
 *         clear: true // auto-clear after a set interval
 *     });
 *
 *     // Set the status bar to show that something is processing:
 *     sb.showBusy();
 *
 *     // processing....
 *
 *     sb.clearStatus(); // once completeed
 *
 */
Ext.define('Ext.ux.statusbar.StatusBar', {
    extend:  Ext.toolbar.Toolbar ,
    alternateClassName: 'Ext.ux.StatusBar',
    alias: 'widget.statusbar',
                                       
    /**
     * @cfg {String} statusAlign
     * The alignment of the status element within the overall StatusBar layout.  When the StatusBar is rendered,
     * it creates an internal div containing the status text and icon.  Any additional Toolbar items added in the
     * StatusBar's {@link #cfg-items} config, or added via {@link #method-add} or any of the supported add* methods, will be
     * rendered, in added order, to the opposite side.  The status element is greedy, so it will automatically
     * expand to take up all sapce left over by any other items.  Example usage:
     *
     *     // Create a left-aligned status bar containing a button,
     *     // separator and text item that will be right-aligned (default):
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     *
     *     // By adding the statusAlign config, this will create the
     *     // exact same toolbar, except the status and toolbar item
     *     // layout will be reversed from the previous example:
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             statusAlign: 'right',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     */
    /**
     * @cfg {String} [defaultText='']
     * The default {@link #text} value.  This will be used anytime the status bar is cleared with the
     * `useDefaults:true` option.
     */
    /**
     * @cfg {String} [defaultIconCls='']
     * The default {@link #iconCls} value (see the iconCls docs for additional details about customizing the icon).
     * This will be used anytime the status bar is cleared with the `useDefaults:true` option.
     */
    /**
     * @cfg {String} text
     * A string that will be <b>initially</b> set as the status message.  This string
     * will be set as innerHTML (html tags are accepted) for the toolbar item.
     * If not specified, the value set for {@link #defaultText} will be used.
     */
    /**
     * @cfg {String} [iconCls='']
     * A CSS class that will be **initially** set as the status bar icon and is
     * expected to provide a background image.
     *
     * Example usage:
     *
     *     // Example CSS rule:
     *     .x-statusbar .x-status-custom {
     *         padding-left: 25px;
     *         background: transparent url(images/custom-icon.gif) no-repeat 3px 2px;
     *     }
     *
     *     // Setting a default icon:
     *     var sb = Ext.create('Ext.ux.statusbar.StatusBar', {
     *         defaultIconCls: 'x-status-custom'
     *     });
     *
     *     // Changing the icon:
     *     sb.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom'
     *     });
     */

    /**
     * @cfg {String} cls
     * The base class applied to the containing element for this component on render.
     */
    cls : 'x-statusbar',
    /**
     * @cfg {String} busyIconCls
     * The default {@link #iconCls} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showBusy}.
     */
    busyIconCls : 'x-status-busy',
    /**
     * @cfg {String} busyText
     * The default {@link #text} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `text` argument into {@link #showBusy}.
     */
    busyText : 'Loading...',
    /**
     * @cfg {Number} autoClear
     * The number of milliseconds to wait after setting the status via
     * {@link #setStatus} before automatically clearing the status text and icon.
     * Note that this only applies when passing the `clear` argument to {@link #setStatus}
     * since that is the only way to defer clearing the status.  This can
     * be overridden by specifying a different `wait` value in {@link #setStatus}.
     * Calls to {@link #clearStatus} always clear the status bar immediately and ignore this value.
     */
    autoClear : 5000,

    /**
     * @cfg {String} emptyText
     * The text string to use if no text has been set. If there are no other items in
     * the toolbar using an empty string (`''`) for this value would end up in the toolbar
     * height collapsing since the empty string will not maintain the toolbar height.
     * Use `''` if the toolbar should collapse in height vertically when no text is
     * specified and there are no other items in the toolbar.
     */
    emptyText : '&#160;',

    // private
    activeThreadId : 0,

    // private
    initComponent : function(){
        var right = this.statusAlign === 'right';

        this.callParent(arguments);
        this.currIconCls = this.iconCls || this.defaultIconCls;
        this.statusEl = Ext.create('Ext.toolbar.TextItem', {
            cls: 'x-status-text ' + (this.currIconCls || ''),
            text: this.text || this.defaultText || ''
        });

        if (right) {
            this.cls += ' x-status-right';
            this.add('->');
            this.add(this.statusEl);
        } else {
            this.insert(0, this.statusEl);
            this.insert(1, '->');
        }
    },

    /**
     * Sets the status {@link #text} and/or {@link #iconCls}. Also supports automatically clearing the
     * status that was set after a specified interval.
     *
     * Example usage:
     *
     *     // Simple call to update the text
     *     statusBar.setStatus('New status');
     *
     *     // Set the status and icon, auto-clearing with default options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: true
     *     });
     *
     *     // Auto-clear with custom options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: {
     *             wait: 8000,
     *             anim: false,
     *             useDefaults: false
     *         }
     *     });
     *
     * @param {Object/String} config A config object specifying what status to set, or a string assumed
     * to be the status text (and all other options are defaulted as explained below). A config
     * object containing any or all of the following properties can be passed:
     *
     * @param {String} config.text The status text to display.  If not specified, any current
     * status text will remain unchanged.
     *
     * @param {String} config.iconCls The CSS class used to customize the status icon (see
     * {@link #iconCls} for details). If not specified, any current iconCls will remain unchanged.
     *
     * @param {Boolean/Number/Object} config.clear Allows you to set an internal callback that will
     * automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not
     * specified, the new status will not be auto-cleared and will stay until updated again or cleared using
     * {@link #clearStatus}. If `true` is passed, the status will be cleared using {@link #autoClear},
     * {@link #defaultText} and {@link #defaultIconCls} via a fade out animation. If a numeric value is passed,
     * it will be used as the callback interval (in milliseconds), overriding the {@link #autoClear} value.
     * All other options will be defaulted as with the boolean option.  To customize any other options,
     * you can pass an object in the format:
     * 
     * @param {Number} config.clear.wait The number of milliseconds to wait before clearing
     * (defaults to {@link #autoClear}).
     * @param {Boolean} config.clear.anim False to clear the status immediately once the callback
     * executes (defaults to true which fades the status out).
     * @param {Boolean} config.clear.useDefaults False to completely clear the status text and iconCls
     * (defaults to true which uses {@link #defaultText} and {@link #defaultIconCls}).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setStatus : function(o) {
        var me = this;

        o = o || {};
        Ext.suspendLayouts();
        if (Ext.isString(o)) {
            o = {text:o};
        }
        if (o.text !== undefined) {
            me.setText(o.text);
        }
        if (o.iconCls !== undefined) {
            me.setIcon(o.iconCls);
        }

        if (o.clear) {
            var c = o.clear,
                wait = me.autoClear,
                defaults = {useDefaults: true, anim: true};

            if (Ext.isObject(c)) {
                c = Ext.applyIf(c, defaults);
                if (c.wait) {
                    wait = c.wait;
                }
            } else if (Ext.isNumber(c)) {
                wait = c;
                c = defaults;
            } else if (Ext.isBoolean(c)) {
                c = defaults;
            }

            c.threadId = this.activeThreadId;
            Ext.defer(me.clearStatus, wait, me, [c]);
        }
        Ext.resumeLayouts(true);
        return me;
    },

    /**
     * Clears the status {@link #text} and {@link #iconCls}. Also supports clearing via an optional fade out animation.
     *
     * @param {Object} [config] A config object containing any or all of the following properties.  If this
     * object is not specified the status will be cleared using the defaults below:
     * @param {Boolean} config.anim True to clear the status by fading out the status element (defaults
     * to false which clears immediately).
     * @param {Boolean} config.useDefaults True to reset the text and icon using {@link #defaultText} and
     * {@link #defaultIconCls} (defaults to false which sets the text to '' and removes any existing icon class).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    clearStatus : function(o) {
        o = o || {};

        var me = this,
            statusEl = me.statusEl;

        if (o.threadId && o.threadId !== me.activeThreadId) {
            // this means the current call was made internally, but a newer
            // thread has set a message since this call was deferred.  Since
            // we don't want to overwrite a newer message just ignore.
            return me;
        }

        var text = o.useDefaults ? me.defaultText : me.emptyText,
            iconCls = o.useDefaults ? (me.defaultIconCls ? me.defaultIconCls : '') : '';

        if (o.anim) {
            // animate the statusEl Ext.Element
            statusEl.el.puff({
                remove: false,
                useDisplay: true,
                callback: function() {
                    statusEl.el.show();
                    me.setStatus({
                        text: text,
                        iconCls: iconCls
                    });
                }
            });
        } else {
             me.setStatus({
                 text: text,
                 iconCls: iconCls
             });
        }
        return me;
    },

    /**
     * Convenience method for setting the status text directly.  For more flexible options see {@link #setStatus}.
     * @param {String} text (optional) The text to set (defaults to '')
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setText : function(text) {
        var me = this;
        me.activeThreadId++;
        me.text = text || '';
        if (me.rendered) {
            me.statusEl.setText(me.text);
        }
        return me;
    },

    /**
     * Returns the current status text.
     * @return {String} The status text
     */
    getText : function(){
        return this.text;
    },

    /**
     * Convenience method for setting the status icon directly.  For more flexible options see {@link #setStatus}.
     * See {@link #iconCls} for complete details about customizing the icon.
     * @param {String} iconCls (optional) The icon class to set (defaults to '', and any current icon class is removed)
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setIcon : function(cls) {
        var me = this;

        me.activeThreadId++;
        cls = cls || '';

        if (me.rendered) {
            if (me.currIconCls) {
                me.statusEl.removeCls(me.currIconCls);
                me.currIconCls = null;
            }
            if (cls.length > 0) {
                me.statusEl.addCls(cls);
                me.currIconCls = cls;
            }
        } else {
            me.currIconCls = cls;
        }
        return me;
    },

    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "busy" state, usually for loading or processing activities.
     *
     * @param {Object/String} config (optional) A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #busyIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #busyIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showBusy : function(o){
        if (Ext.isString(o)) {
            o = { text: o };
        }
        o = Ext.applyIf(o || {}, {
            text: this.busyText,
            iconCls: this.busyIconCls
        });
        return this.setStatus(o);
    }
});

/**
 * A GridPanel class with live search support.
 * @author Nicolas Ferrero
 */
Ext.define('Ext.ux.LiveSearchGridPanel', {
    extend:  Ext.grid.Panel ,
               
                               
                                  
                              
                                    
      
    
    /**
     * @private
     * search value initialization
     */
    searchValue: null,
    
    /**
     * @private
     * The row indexes where matching strings are found. (used by previous and next buttons)
     */
    indexes: [],
    
    /**
     * @private
     * The row index of the first search, it could change if next or previous buttons are used.
     */
    currentIndex: null,
    
    /**
     * @private
     * The generated regular expression used for searching.
     */
    searchRegExp: null,
    
    /**
     * @private
     * Case sensitive mode.
     */
    caseSensitive: false,
    
    /**
     * @private
     * Regular expression mode.
     */
    regExpMode: false,
    
    /**
     * @cfg {String} matchCls
     * The matched string css classe.
     */
    matchCls: 'x-livesearch-match',
    
    defaultStatusText: 'Nothing Found',
    
    // Component initialization override: adds the top and bottom toolbars and setup headers renderer.
    initComponent: function() {
        var me = this;
        me.tbar = ['Search',{
                 xtype: 'textfield',
                 name: 'searchField',
                 hideLabel: true,
                 width: 200,
                 listeners: {
                     change: {
                         fn: me.onTextFieldChange,
                         scope: this,
                         buffer: 100
                     }
                 }
            }, {
                xtype: 'button',
                text: '&lt;',
                tooltip: 'Find Previous Row',
                handler: me.onPreviousClick,
                scope: me
            },{
                xtype: 'button',
                text: '&gt;',
                tooltip: 'Find Next Row',
                handler: me.onNextClick,
                scope: me
            }, '-', {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.regExpToggle,
                scope: me                
            }, 'Regular expression', {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.caseSensitiveToggle,
                scope: me
            }, 'Case sensitive'];

        me.bbar = Ext.create('Ext.ux.StatusBar', {
            defaultText: me.defaultStatusText,
            name: 'searchStatusBar'
        });
        
        me.callParent(arguments);
    },
    
    // afterRender override: it adds textfield and statusbar reference and start monitoring keydown events in textfield input 
    afterRender: function() {
        var me = this;
        me.callParent(arguments);
        me.textField = me.down('textfield[name=searchField]');
        me.statusBar = me.down('statusbar[name=searchStatusBar]');
    },
    // detects html tag
    tagsRe: /<[^>]*>/gm,
    
    // DEL ASCII code
    tagsProtect: '\x0f',
    
    // detects regexp reserved word
    regExpProtect: /\\|\/|\+|\\|\.|\[|\]|\{|\}|\?|\$|\*|\^|\|/gm,
    
    /**
     * In normal mode it returns the value with protected regexp characters.
     * In regular expression mode it returns the raw value except if the regexp is invalid.
     * @return {String} The value to process or null if the textfield value is blank or invalid.
     * @private
     */
    getSearchValue: function() {
        var me = this,
            value = me.textField.getValue();
            
        if (value === '') {
            return null;
        }
        if (!me.regExpMode) {
            value = value.replace(me.regExpProtect, function(m) {
                return '\\' + m;
            });
        } else {
            try {
                new RegExp(value);
            } catch (error) {
                me.statusBar.setStatus({
                    text: error.message,
                    iconCls: 'x-status-error'
                });
                return null;
            }
            // this is stupid
            if (value === '^' || value === '$') {
                return null;
            }
        }

        return value;
    },
    
    /**
     * Finds all strings that matches the searched value in each grid cells.
     * @private
     */
     onTextFieldChange: function() {
         var me = this,
             count = 0;

         me.view.refresh();
         // reset the statusbar
         me.statusBar.setStatus({
             text: me.defaultStatusText,
             iconCls: ''
         });

         me.searchValue = me.getSearchValue();
         me.indexes = [];
         me.currentIndex = null;

         if (me.searchValue !== null) {
             me.searchRegExp = new RegExp(me.searchValue, 'g' + (me.caseSensitive ? '' : 'i'));
             
             
             me.store.each(function(record, idx) {
                 var td = Ext.fly(me.view.getNode(idx)).down('td'),
                     cell, matches, cellHTML;
                 while(td) {
                     cell = td.down('.x-grid-cell-inner');
                     matches = cell.dom.innerHTML.match(me.tagsRe);
                     cellHTML = cell.dom.innerHTML.replace(me.tagsRe, me.tagsProtect);
                     
                     // populate indexes array, set currentIndex, and replace wrap matched string in a span
                     cellHTML = cellHTML.replace(me.searchRegExp, function(m) {
                        count += 1;
                        if (Ext.Array.indexOf(me.indexes, idx) === -1) {
                            me.indexes.push(idx);
                        }
                        if (me.currentIndex === null) {
                            me.currentIndex = idx;
                        }
                        return '<span class="' + me.matchCls + '">' + m + '</span>';
                     });
                     // restore protected tags
                     Ext.each(matches, function(match) {
                        cellHTML = cellHTML.replace(me.tagsProtect, match); 
                     });
                     // update cell html
                     cell.dom.innerHTML = cellHTML;
                     td = td.next();
                 }
             }, me);

             // results found
             if (me.currentIndex !== null) {
                 me.getSelectionModel().select(me.currentIndex);
                 me.statusBar.setStatus({
                     text: count + ' matche(s) found.',
                     iconCls: 'x-status-valid'
                 });
             }
         }

         // no results found
         if (me.currentIndex === null) {
             me.getSelectionModel().deselectAll();
         }

         // force textfield focus
         me.textField.focus();
     },
    
    /**
     * Selects the previous row containing a match.
     * @private
     */   
    onPreviousClick: function() {
        var me = this,
            idx;
            
        if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx - 1] || me.indexes[me.indexes.length - 1];
            me.getSelectionModel().select(me.currentIndex);
         }
    },
    
    /**
     * Selects the next row containing a match.
     * @private
     */    
    onNextClick: function() {
         var me = this,
             idx;
             
         if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx + 1] || me.indexes[0];
            me.getSelectionModel().select(me.currentIndex);
         }
    },
    
    /**
     * Switch to case sensitive mode.
     * @private
     */    
    caseSensitiveToggle: function(checkbox, checked) {
        this.caseSensitive = checked;
        this.onTextFieldChange();
    },
    
    /**
     * Switch to regular expression mode
     * @private
     */
    regExpToggle: function(checkbox, checked) {
        this.regExpMode = checked;
        this.onTextFieldChange();
    }
});

/**
 * FiltersFeature is a grid {@link Ext.grid.feature.Feature feature} that allows for a slightly more
 * robust representation of filtering than what is provided by the default store.
 *
 * Filtering is adjusted by the user using the grid's column header menu (this menu can be
 * disabled through configuration). Through this menu users can configure, enable, and
 * disable filters for each column.
 *
 * #Features#
 *
 * ##Filtering implementations:##
 *
 * Default filtering for Strings, Numeric Ranges, Date Ranges, Lists (which can be backed by a
 * {@link Ext.data.Store}), and Boolean. Additional custom filter types and menus are easily
 * created by extending {@link Ext.ux.grid.filter.Filter}.
 *
 * ##Graphical Indicators:##
 *
 * Columns that are filtered have {@link #filterCls a configurable css class} applied to the column headers.
 *
 * ##Automatic Reconfiguration:##
 *
 * Filters automatically reconfigure when the grid 'reconfigure' event fires.
 *
 * ##Stateful:##
 *
 * Filter information will be persisted across page loads by specifying a `stateId`
 * in the Grid configuration.
 *
 * The filter collection binds to the {@link Ext.grid.Panel#beforestaterestore beforestaterestore}
 * and {@link Ext.grid.Panel#beforestatesave beforestatesave} events in order to be stateful.
 *
 * ##GridPanel Changes:##
 *
 * - A `filters` property is added to the GridPanel using this feature.
 * - A `filterupdate` event is added to the GridPanel and is fired upon onStateChange completion.
 *
 * ##Server side code examples:##
 *
 * - [PHP](http://www.vinylfox.com/extjs/grid-filter-php-backend-code.php) - (Thanks VinylFox)
 * - [Ruby on Rails](http://extjs.com/forum/showthread.php?p=77326#post77326) - (Thanks Zyclops)
 * - [Ruby on Rails](http://extjs.com/forum/showthread.php?p=176596#post176596) - (Thanks Rotomaul)
 *
 * #Example usage:#
 *
 *     var store = Ext.create('Ext.data.Store', {
 *         pageSize: 15
 *         ...
 *     });
 *
 *     var filtersCfg = {
 *         ftype: 'filters',
 *         autoReload: false, //don't reload automatically
 *         local: true, //only filter locally
 *         // filters may be configured through the plugin,
 *         // or in the column definition within the headers configuration
 *         filters: [{
 *             type: 'numeric',
 *             dataIndex: 'id'
 *         }, {
 *             type: 'string',
 *             dataIndex: 'name'
 *         }, {
 *             type: 'numeric',
 *             dataIndex: 'price'
 *         }, {
 *             type: 'date',
 *             dataIndex: 'dateAdded'
 *         }, {
 *             type: 'list',
 *             dataIndex: 'size',
 *             options: ['extra small', 'small', 'medium', 'large', 'extra large'],
 *             phpMode: true
 *         }, {
 *             type: 'boolean',
 *             dataIndex: 'visible'
 *         }]
 *     };
 *
 *     var grid = Ext.create('Ext.grid.Panel', {
 *          store: store,
 *          columns: ...,
 *          features: [filtersCfg],
 *          height: 400,
 *          width: 700,
 *          bbar: Ext.create('Ext.PagingToolbar', {
 *              store: store
 *          })
 *     });
 *
 *     // a filters property is added to the GridPanel
 *     grid.filters
 */
Ext.define('Ext.ux.grid.FiltersFeature', {
    extend:  Ext.grid.feature.Feature ,
    alias: 'feature.filters',
           
                                    
                                     
                                           
                                        
                                            
                                        
                                           
                                         
      

    /**
     * @cfg {Boolean} autoReload
     * Defaults to true, reloading the datasource when a filter change happens.
     * Set this to false to prevent the datastore from being reloaded if there
     * are changes to the filters.  See <code>{@link #updateBuffer}</code>.
     */
    autoReload : true,
    /**
     * @cfg {Boolean} encode
     * Specify true for {@link #buildQuery} to use Ext.util.JSON.encode to
     * encode the filter query parameter sent with a remote request.
     * Defaults to false.
     */
    /**
     * @cfg {Array} filters
     * An Array of filters config objects. Refer to each filter type class for
     * configuration details specific to each filter type. Filters for Strings,
     * Numeric Ranges, Date Ranges, Lists, and Boolean are the standard filters
     * available.
     */
    /**
     * @cfg {String} filterCls
     * The css class to be applied to column headers with active filters.
     * Defaults to <tt>'ux-filterd-column'</tt>.
     */
    filterCls : 'ux-filtered-column',
    /**
     * @cfg {Boolean} local
     * <tt>true</tt> to use Ext.data.Store filter functions (local filtering)
     * instead of the default (<tt>false</tt>) server side filtering.
     */
    local : false,
    /**
     * @cfg {String} menuFilterText
     * defaults to <tt>'Filters'</tt>.
     */
    menuFilterText : 'Filters',
    /**
     * @cfg {String} paramPrefix
     * The url parameter prefix for the filters.
     * Defaults to <tt>'filter'</tt>.
     */
    paramPrefix : 'filter',
    /**
     * @cfg {Boolean} showMenu
     * Defaults to true, including a filter submenu in the default header menu.
     */
    showMenu : true,
    /**
     * @cfg {String} stateId
     * Name of the value to be used to store state information.
     */
    stateId : undefined,
    /**
     * @cfg {Number} updateBuffer
     * Number of milliseconds to defer store updates since the last filter change.
     */
    updateBuffer : 500,

    // doesn't handle grid body events
    hasFeatureEvent: false,


    /** @private */
    constructor : function (config) {
        var me = this;

        me.callParent(arguments);

        me.deferredUpdate = Ext.create('Ext.util.DelayedTask', me.reload, me);

        // Init filters
        me.filters = me.createFiltersCollection();
        me.filterConfigs = config.filters;
    },

    init: function(grid) {
        var me = this,
            view = me.view,
            headerCt = view.headerCt;

        me.bindStore(view.getStore(), true);

        // Listen for header menu being created
        headerCt.on('menucreate', me.onMenuCreate, me);

        view.on('refresh', me.onRefresh, me);
        grid.on({
            scope: me,
            beforestaterestore: me.applyState,
            beforestatesave: me.saveState,
            beforedestroy: me.destroy
        });

        // Add event and filters shortcut on grid panel
        grid.filters = me;
        grid.addEvents('filterupdate');
    },

    createFiltersCollection: function () {
        return Ext.create('Ext.util.MixedCollection', false, function (o) {
            return o ? o.dataIndex : null;
        });
    },

    /**
     * @private Create the Filter objects for the current configuration, destroying any existing ones first.
     */
    createFilters: function() {
        var me = this,
            hadFilters = me.filters.getCount(),
            grid = me.getGridPanel(),
            filters = me.createFiltersCollection(),
            model = grid.store.model,
            fields = model.prototype.fields,
            field,
            filter,
            state;

        if (hadFilters) {
            state = {};
            me.saveState(null, state);
        }

        function add (dataIndex, config, filterable) {
            if (dataIndex && (filterable || config)) {
                field = fields.get(dataIndex);
                filter = {
                    dataIndex: dataIndex,
                    type: (field && field.type && field.type.type) || 'auto'
                };

                if (Ext.isObject(config)) {
                    Ext.apply(filter, config);
                }

                filters.replace(filter);
            }
        }

        // We start with filters from our config
        Ext.Array.each(me.filterConfigs, function (filterConfig) {
            add(filterConfig.dataIndex, filterConfig);
        });

        // Then we merge on filters from the columns in the grid. The columns' filters take precedence.
        Ext.Array.each(grid.columnManager.getColumns(), function (column) {
            if (column.filterable === false) {
                filters.removeAtKey(column.dataIndex);
            } else {
                add(column.dataIndex, column.filter, column.filterable);
            }
        });
        

        me.removeAll();
        if (filters.items) {
            me.initializeFilters(filters.items);
        }

        if (hadFilters) {
            me.applyState(null, state);
        }
    },

    /**
     * @private
     */
    initializeFilters: function(filters) {
        var me = this,
            filtersLength = filters.length,
            i, filter, FilterClass;

        for (i = 0; i < filtersLength; i++) {
            filter = filters[i];
            if (filter) {
                FilterClass = me.getFilterClass(filter.type);
                filter = filter.menu ? filter : new FilterClass(Ext.apply({
                    grid: me.grid
                }, filter));
                me.filters.add(filter);
                Ext.util.Observable.capture(filter, this.onStateChange, this);
            }
        }
    },

    /**
     * @private Handle creation of the grid's header menu. Initializes the filters and listens
     * for the menu being shown.
     */
    onMenuCreate: function(headerCt, menu) {
        var me = this;
        me.createFilters();
        menu.on('beforeshow', me.onMenuBeforeShow, me);
    },

    /**
     * @private Handle showing of the grid's header menu. Sets up the filter item and menu
     * appropriate for the target column.
     */
    onMenuBeforeShow: function(menu) {
        var me = this,
            menuItem, filter;

        if (me.showMenu) {
            menuItem = me.menuItem;
            if (!menuItem || menuItem.isDestroyed) {
                me.createMenuItem(menu);
                menuItem = me.menuItem;
            }

            filter = me.getMenuFilter();

            if (filter) {
                menuItem.setMenu(filter.menu, false);
                menuItem.setChecked(filter.active);
                // disable the menu if filter.disabled explicitly set to true
                menuItem.setDisabled(filter.disabled === true);
            }
            menuItem.setVisible(!!filter);
            this.sep.setVisible(!!filter);
        }
    },


    createMenuItem: function(menu) {
        var me = this;
        me.sep  = menu.add('-');
        me.menuItem = menu.add({
            checked: false,
            itemId: 'filters',
            text: me.menuFilterText,
            listeners: {
                scope: me,
                checkchange: me.onCheckChange,
                beforecheckchange: me.onBeforeCheck
            }
        });
    },

    getGridPanel: function() {
        return this.view.up('gridpanel');
    },

    /**
     * @private
     * Handler for the grid's beforestaterestore event (fires before the state of the
     * grid is restored).
     * @param {Object} grid The grid object
     * @param {Object} state The hash of state values returned from the StateProvider.
     */
    applyState : function (grid, state) {
        var me = this,
            key, filter;
        me.applyingState = true;
        me.clearFilters();
        if (state.filters) {
            for (key in state.filters) {
                if (state.filters.hasOwnProperty(key)) {
                    filter = me.filters.get(key);
                    if (filter) {
                        filter.setValue(state.filters[key]);
                        filter.setActive(true);
                    }
                }
            }
        }
        me.deferredUpdate.cancel();
        if (me.local) {
            me.reload();
        }
        delete me.applyingState;
        delete state.filters;
    },

    /**
     * Saves the state of all active filters
     * @param {Object} grid
     * @param {Object} state
     * @return {Boolean}
     */
    saveState : function (grid, state) {
        var filters = {};
        this.filters.each(function (filter) {
            if (filter.active) {
                filters[filter.dataIndex] = filter.getValue();
            }
        });
        return (state.filters = filters);
    },

    /**
     * @private
     * Handler called by the grid 'beforedestroy' event
     */
    destroy : function () {
        var me = this;
        Ext.destroyMembers(me, 'menuItem', 'sep');
        me.removeAll();
        me.clearListeners();
    },

    /**
     * Remove all filters, permanently destroying them.
     */
    removeAll : function () {
        if(this.filters){
            Ext.destroy.apply(Ext, this.filters.items);
            // remove all items from the collection
            this.filters.clear();
        }
    },


    /**
     * Changes the data store bound to this view and refreshes it.
     * @param {Ext.data.Store} store The store to bind to this view
     */
    bindStore : function(store) {
        var me = this;

        // Unbind from the old Store
        if (me.store && me.storeListeners) {
            me.store.un(me.storeListeners);
        }

        // Set up correct listeners
        if (store) {
            me.storeListeners = {
                scope: me
            };
            if (me.local) {
                me.storeListeners.load = me.onLoad;
            } else {
                me.storeListeners['before' + (store.buffered ? 'prefetch' : 'load')] = me.onBeforeLoad;
            }
            store.on(me.storeListeners);
        } else {
            delete me.storeListeners;
        }
        me.store = store;
    },

    /**
     * @private
     * Get the filter menu from the filters MixedCollection based on the clicked header
     */
    getMenuFilter : function () {
        var header = this.view.headerCt.getMenu().activeHeader;
        return header ? this.filters.get(header.dataIndex) : null;
    },

    /** @private */
    onCheckChange : function (item, value) {
        this.getMenuFilter().setActive(value);
    },

    /** @private */
    onBeforeCheck : function (check, value) {
        return !value || this.getMenuFilter().isActivatable();
    },

    /**
     * @private
     * Handler for all events on filters.
     * @param {String} event Event name
     * @param {Object} filter Standard signature of the event before the event is fired
     */
    onStateChange : function (event, filter) {
        if (event !== 'serialize') {
            var me = this,
                grid = me.getGridPanel();

            if (filter == me.getMenuFilter()) {
                me.menuItem.setChecked(filter.active, false);
            }

            if ((me.autoReload || me.local) && !me.applyingState) {
                me.deferredUpdate.delay(me.updateBuffer);
            }
            me.updateColumnHeadings();

            if (!me.applyingState) {
                grid.saveState();
            }
            grid.fireEvent('filterupdate', me, filter);
        }
    },

    /**
     * @private
     * Handler for store's beforeload event when configured for remote filtering
     * @param {Object} store
     * @param {Object} options
     */
    onBeforeLoad : function (store, options) {
        options.params = options.params || {};
        this.cleanParams(options.params);
        var params = this.buildQuery(this.getFilterData());
        Ext.apply(options.params, params);
    },

    /**
     * @private
     * Handler for store's load event when configured for local filtering
     * @param {Object} store
     */
    onLoad : function (store) {
        store.filterBy(this.getRecordFilter());
    },

    /**
     * @private
     * Handler called when the grid's view is refreshed
     */
    onRefresh : function () {
        this.updateColumnHeadings();
    },

    /**
     * Update the styles for the header row based on the active filters
     */
    updateColumnHeadings : function () {
        var me = this,
            headerCt = me.view.headerCt;
        if (headerCt) {
            headerCt.items.each(function(header) {
                var filter = me.getFilter(header.dataIndex);
                header[filter && filter.active ? 'addCls' : 'removeCls'](me.filterCls);
            });
        }
    },

    /** @private */
    reload : function () {
        var me = this,
            store = me.view.getStore();

        if (me.local) {
            store.clearFilter(true);
            store.filterBy(me.getRecordFilter());
            store.sort();
        } else {
            me.deferredUpdate.cancel();
            if (store.buffered) {
                store.data.clear();
            }
            store.loadPage(1);
        }
    },

    /**
     * Method factory that generates a record validator for the filters active at the time
     * of invokation.
     * @private
     */
    getRecordFilter : function () {
        var f = [], len, i,
            lockingPartner = this.lockingPartner;

        this.filters.each(function (filter) {
            if (filter.active) {
                f.push(filter);
            }
        });

        // Be sure to check the active filters on a locking partner as well.
        if (lockingPartner) {
            lockingPartner.filters.each(function (filter) {
                if (filter.active) {
                    f.push(filter);
                }
            });
        }

        len = f.length;
        return function (record) {
            for (i = 0; i < len; i++) {
                if (!f[i].validateRecord(record)) {
                    return false;
                }
            }
            return true;
        };
    },

    /**
     * Adds a filter to the collection and observes it for state change.
     * @param {Object/Ext.ux.grid.filter.Filter} config A filter configuration or a filter object.
     * @return {Ext.ux.grid.filter.Filter} The existing or newly created filter object.
     */
    addFilter : function (config) {
        var me = this,
            columns = me.getGridPanel().columnManager.getColumns(),
            i, columnsLength, column, filtersLength, filter;

        
        for (i = 0, columnsLength = columns.length; i < columnsLength; i++) {
            column = columns[i];
            if (column.dataIndex === config.dataIndex) {
                column.filter = config;
            }
        }
        
        if (me.view.headerCt.menu) {
            me.createFilters();
        } else {
            // Call getMenu() to ensure the menu is created, and so, also are the filters. We cannot call
            // createFilters() withouth having a menu because it will cause in a recursion to applyState()
            // that ends up to clear all the filter values. This is likely to happen when we reorder a column
            // and then add a new filter before the menu is recreated.
            me.view.headerCt.getMenu();
        }
        
        for (i = 0, filtersLength = me.filters.items.length; i < filtersLength; i++) {
            filter = me.filters.items[i];
            if (filter.dataIndex === config.dataIndex) {
                return filter;
            }
        }
    },

    /**
     * Adds filters to the collection.
     * @param {Array} filters An Array of filter configuration objects.
     */
    addFilters : function (filters) {
        if (filters) {
            var me = this,
                i, filtersLength;
            for (i = 0, filtersLength = filters.length; i < filtersLength; i++) {
                me.addFilter(filters[i]);
            }
        }
    },

    /**
     * Returns a filter for the given dataIndex, if one exists.
     * @param {String} dataIndex The dataIndex of the desired filter object.
     * @return {Ext.ux.grid.filter.Filter}
     */
    getFilter : function (dataIndex) {
        return this.filters.get(dataIndex);
    },

    /**
     * Turns all filters off. This does not clear the configuration information
     * (see {@link #removeAll}).
     */
    clearFilters : function () {
        this.filters.each(function (filter) {
            filter.setActive(false);
        });
    },

    getFilterItems: function () {
        var me = this;

        // If there's a locked grid then we must get the filter items for each grid.
        if (me.lockingPartner) {
            return me.filters.items.concat(me.lockingPartner.filters.items);
        }

        return me.filters.items;
    },

    /**
     * Returns an Array of the currently active filters.
     * @return {Array} filters Array of the currently active filters.
     */
    getFilterData : function () {
        var items = this.getFilterItems(),
            filters = [],
            n, nlen, item, d, i, len;

        for (n = 0, nlen = items.length; n < nlen; n++) {
            item = items[n];
            if (item.active) {
                d = [].concat(item.serialize());
                for (i = 0, len = d.length; i < len; i++) {
                    filters.push({
                        field: item.dataIndex,
                        data: d[i]
                    });
                }
            }
        }
        return filters;
    },

    /**
     * Function to take the active filters data and build it into a query.
     * The format of the query depends on the {@link #encode} configuration:
     *
     *   - `false` (Default) :
     *     Flatten into query string of the form (assuming <code>{@link #paramPrefix}='filters'</code>:
     *
     *         filters[0][field]="someDataIndex"&
     *         filters[0][data][comparison]="someValue1"&
     *         filters[0][data][type]="someValue2"&
     *         filters[0][data][value]="someValue3"&
     *
     *
     *   - `true` :
     *     JSON encode the filter data
     *
     *         {filters:[{"field":"someDataIndex","comparison":"someValue1","type":"someValue2","value":"someValue3"}]}
     *
     * Override this method to customize the format of the filter query for remote requests.
     *
     * @param {Array} filters A collection of objects representing active filters and their configuration.
     * Each element will take the form of {field: dataIndex, data: filterConf}. dataIndex is not assured
     * to be unique as any one filter may be a composite of more basic filters for the same dataIndex.
     *
     * @return {Object} Query keys and values
     */
    buildQuery : function (filters) {
        var p = {}, i, f, root, dataPrefix, key, tmp,
            len = filters.length;

        if (!this.encode){
            for (i = 0; i < len; i++) {
                f = filters[i];
                root = [this.paramPrefix, '[', i, ']'].join('');
                p[root + '[field]'] = f.field;

                dataPrefix = root + '[data]';
                for (key in f.data) {
                    p[[dataPrefix, '[', key, ']'].join('')] = f.data[key];
                }
            }
        } else {
            tmp = [];
            for (i = 0; i < len; i++) {
                f = filters[i];
                tmp.push(Ext.apply(
                    {},
                    {field: f.field},
                    f.data
                ));
            }
            // only build if there is active filter
            if (tmp.length > 0){
                p[this.paramPrefix] = Ext.JSON.encode(tmp);
            }
        }
        return p;
    },

    /**
     * Removes filter related query parameters from the provided object.
     * @param {Object} p Query parameters that may contain filter related fields.
     */
    cleanParams : function (p) {
        // if encoding just delete the property
        if (this.encode) {
            delete p[this.paramPrefix];
        // otherwise scrub the object of filter data
        } else {
            var regex, key;
            regex = new RegExp('^' + this.paramPrefix + '\[[0-9]+\]');
            for (key in p) {
                if (regex.test(key)) {
                    delete p[key];
                }
            }
        }
    },

    /**
     * Function for locating filter classes, overwrite this with your favorite
     * loader to provide dynamic filter loading.
     * @param {String} type The type of filter to load ('Filter' is automatically
     * appended to the passed type; eg, 'string' becomes 'StringFilter').
     * @return {Function} The Ext.ux.grid.filter.Class
     */
    getFilterClass : function (type) {
        // map the supported Ext.data.Field type values into a supported filter
        switch(type) {
            case 'auto':
              type = 'string';
              break;
            case 'int':
            case 'float':
              type = 'numeric';
              break;
            case 'bool':
              type = 'boolean';
              break;
        }
        return Ext.ClassManager.getByAlias('gridfilter.' + type);
    }
});

/**
 * A Grid which creates itself from an existing HTML table element.
 */
Ext.define('Ext.ux.grid.TransformGrid', {
    extend:  Ext.grid.Panel ,

    /**
     * Creates the grid from HTML table element.
     * @param {String/HTMLElement/Ext.Element} table The table element from which this grid will be created -
     * The table MUST have some type of size defined for the grid to fill. The container will be
     * automatically set to position relative if it isn't already.
     * @param {Object} [config] A config object that sets properties on this grid and has two additional (optional)
     * properties: fields and columns which allow for customizing data fields and columns for this grid.
     */
    constructor: function(table, config) {
        config = Ext.apply({}, config);
        table = this.table = Ext.get(table);

        var configFields = config.fields || [],
            configColumns = config.columns || [],
            fields = [],
            cols = [],
            headers = table.query("thead th"),
            i = 0,
            len = headers.length,
            data = table.dom,
            width,
            height,
            store,
            col,
            text,
            name;

        for (; i < len; ++i) {
            col = headers[i];

            text = col.innerHTML;
            name = 'tcol-' + i;

            fields.push(Ext.applyIf(configFields[i] || {}, {
                name: name,
                mapping: 'td:nth(' + (i + 1) + ')/@innerHTML'
            }));

            cols.push(Ext.applyIf(configColumns[i] || {}, {
                text: text,
                dataIndex: name,
                width: col.offsetWidth,
                tooltip: col.title,
                sortable: true
            }));
        }

        if (config.width) {
            width = config.width;
        } else {
            width = table.getWidth() + 1;
        }

        if (config.height) {
            height = config.height;
        }

        Ext.applyIf(config, {
            store: {
                data: data,
                fields: fields,
                proxy: {
                    type: 'memory',
                    reader: {
                        record: 'tbody tr',
                        type: 'xml'
                    }
                }
            },
            columns: cols,
            width: width,
            height: height
        });
        this.callParent([config]);
        
        if (config.remove !== false) {
            // Don't use table.remove() as that destroys the row/cell data in the table in
            // IE6-7 so it cannot be read by the data reader.
            data.parentNode.removeChild(data);
        }
    },

    onDestroy: function() {
        this.callParent();
        this.table.remove();
        delete this.table;
    }
});

/**
 * Abstract base class for filter implementations.
 */
Ext.define('Ext.ux.grid.filter.Filter', {
    extend:  Ext.util.Observable ,

    /**
     * @cfg {Boolean} active
     * Indicates the initial status of the filter (defaults to false).
     */
    active : false,
    /**
     * True if this filter is active.  Use setActive() to alter after configuration.
     * @type Boolean
     * @property active
     */
    /**
     * @cfg {String} dataIndex
     * The {@link Ext.data.Store} dataIndex of the field this filter represents.
     * The dataIndex does not actually have to exist in the store.
     */
    dataIndex : null,
    /**
     * The filter configuration menu that will be installed into the filter submenu of a column menu.
     * @type Ext.menu.Menu
     * @property
     */
    menu : null,
    /**
     * @cfg {Number} updateBuffer
     * Number of milliseconds to wait after user interaction to fire an update. Only supported
     * by filters: 'list', 'numeric', and 'string'. Defaults to 500.
     */
    updateBuffer : 500,

    constructor : function (config) {
        Ext.apply(this, config);

        this.addEvents(
            /**
             * @event activate
             * Fires when an inactive filter becomes active
             * @param {Ext.ux.grid.filter.Filter} this
             */
            'activate',
            /**
             * @event deactivate
             * Fires when an active filter becomes inactive
             * @param {Ext.ux.grid.filter.Filter} this
             */
            'deactivate',
            /**
             * @event serialize
             * Fires after the serialization process. Use this to attach additional parameters to serialization
             * data before it is encoded and sent to the server.
             * @param {Array/Object} data A map or collection of maps representing the current filter configuration.
             * @param {Ext.ux.grid.filter.Filter} filter The filter being serialized.
             */
            'serialize',
            /**
             * @event update
             * Fires when a filter configuration has changed
             * @param {Ext.ux.grid.filter.Filter} this The filter object.
             */
            'update'
        );
        Ext.ux.grid.filter.Filter.superclass.constructor.call(this);

        this.menu = this.createMenu(config);
        this.init(config);
        if(config && config.value){
            this.setValue(config.value);
            this.setActive(config.active !== false, true);
            delete config.value;
        }
    },

    /**
     * Destroys this filter by purging any event listeners, and removing any menus.
     */
    destroy : function(){
        if (this.menu){
            this.menu.destroy();
        }
        this.clearListeners();
    },

    /**
     * Template method to be implemented by all subclasses that is to
     * initialize the filter and install required menu items.
     * Defaults to Ext.emptyFn.
     */
    init : Ext.emptyFn,

    /**
     * @private @override
     * Creates the Menu for this filter.
     * @param {Object} config Filter configuration
     * @return {Ext.menu.Menu}
     */
    createMenu: function(config) {
        config.plain = true;
        return Ext.create('Ext.menu.Menu', config);
    },

    /**
     * Template method to be implemented by all subclasses that is to
     * get and return the value of the filter.
     * Defaults to Ext.emptyFn.
     * @return {Object} The 'serialized' form of this filter
     * @template
     */
    getValue : Ext.emptyFn,

    /**
     * Template method to be implemented by all subclasses that is to
     * set the value of the filter and fire the 'update' event.
     * Defaults to Ext.emptyFn.
     * @param {Object} data The value to set the filter
     * @template
     */
    setValue : Ext.emptyFn,

    /**
     * Template method to be implemented by all subclasses that is to
     * return <tt>true</tt> if the filter has enough configuration information to be activated.
     * Defaults to <tt>return true</tt>.
     * @return {Boolean}
     */
    isActivatable : function(){
        return true;
    },

    /**
     * Template method to be implemented by all subclasses that is to
     * get and return serialized filter data for transmission to the server.
     * Defaults to Ext.emptyFn.
     */
    getSerialArgs : Ext.emptyFn,

    /**
     * Template method to be implemented by all subclasses that is to
     * validates the provided Ext.data.Record against the filters configuration.
     * Defaults to <tt>return true</tt>.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord : function(){
        return true;
    },

    /**
     * Returns the serialized filter data for transmission to the server
     * and fires the 'serialize' event.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    serialize : function(){
        var args = this.getSerialArgs();
        this.fireEvent('serialize', args, this);
        return args;
    },

    /** @private */
    fireUpdate : function(){
        if (this.active) {
            this.fireEvent('update', this);
        }
        this.setActive(this.isActivatable());
    },

    /**
     * Sets the status of the filter and fires the appropriate events.
     * @param {Boolean} active        The new filter state.
     * @param {Boolean} suppressEvent True to prevent events from being fired.
     */
    setActive : function(active, suppressEvent){
        if(this.active != active){
            this.active = active;
            if (suppressEvent !== true) {
                this.fireEvent(active ? 'activate' : 'deactivate', this);
            }
        }
    }
});

/**
 * Boolean filters use unique radio group IDs (so you can have more than one!)
 * <p><b><u>Example Usage:</u></b></p>
 * <pre><code>
var filters = Ext.create('Ext.ux.grid.GridFilters', {
    ...
    filters: [{
        // required configs
        type: 'boolean',
        dataIndex: 'visible'

        // optional configs
        defaultValue: null, // leave unselected (false selected by default)
        yesText: 'Yes',     // default
        noText: 'No'        // default
    }]
});
 * </code></pre>
 */
Ext.define('Ext.ux.grid.filter.BooleanFilter', {
    extend:  Ext.ux.grid.filter.Filter ,
    alias: 'gridfilter.boolean',

	/**
	 * @cfg {Boolean} defaultValue
	 * Set this to null if you do not want either option to be checked by default. Defaults to false.
	 */
	defaultValue : false,
	/**
	 * @cfg {String} yesText
	 * Defaults to 'Yes'.
	 */
	yesText : 'Yes',
	/**
	 * @cfg {String} noText
	 * Defaults to 'No'.
	 */
	noText : 'No',

    /**
     * @private
     * Template method that is to initialize the filter and install required menu items.
     */
    init : function (config) {
        var gId = Ext.id();
		this.options = [
			Ext.create('Ext.menu.CheckItem', {text: this.yesText, group: gId, checked: this.defaultValue === true}),
			Ext.create('Ext.menu.CheckItem', {text: this.noText, group: gId, checked: this.defaultValue === false})];

		this.menu.add(this.options[0], this.options[1]);

		for(var i=0; i<this.options.length; i++){
			this.options[i].on('click', this.fireUpdate, this);
			this.options[i].on('checkchange', this.fireUpdate, this);
		}
	},

    /**
     * @private
     * Template method that is to get and return the value of the filter.
     * @return {String} The value of this filter
     */
    getValue : function () {
		return this.options[0].checked;
	},

    /**
     * @private
     * Template method that is to set the value of the filter.
     * @param {Object} value The value to set the filter
     */
	setValue : function (value) {
		this.options[value ? 0 : 1].setChecked(true);
	},

    /**
     * @private
     * Template method that is to get and return serialized filter data for
     * transmission to the server.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    getSerialArgs : function () {
		var args = {type: 'boolean', value: this.getValue()};
		return args;
	},

    /**
     * Template method that is to validate the provided Ext.data.Record
     * against the filters configuration.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord : function (record) {
		return record.get(this.dataIndex) == this.getValue();
	}
});

/**
 * Filter by a configurable Ext.picker.DatePicker menu
 *
 * Example Usage:
 *
 *     var filters = Ext.create('Ext.ux.grid.GridFilters', {
 *         ...
 *         filters: [{
 *             // required configs
 *             type: 'date',
 *             dataIndex: 'dateAdded',
 *      
 *             // optional configs
 *             dateFormat: 'm/d/Y',  // default
 *             beforeText: 'Before', // default
 *             afterText: 'After',   // default
 *             onText: 'On',         // default
 *             pickerOpts: {
 *                 // any DatePicker configs
 *             },
 *      
 *             active: true // default is false
 *         }]
 *     });
 */
Ext.define('Ext.ux.grid.filter.DateFilter', {
    extend:  Ext.ux.grid.filter.Filter ,
    alias: 'gridfilter.date',
                                               

    /**
     * @cfg {String} afterText
     * Defaults to 'After'.
     */
    afterText : 'After',
    /**
     * @cfg {String} beforeText
     * Defaults to 'Before'.
     */
    beforeText : 'Before',
    /**
     * @cfg {Object} compareMap
     * Map for assigning the comparison values used in serialization.
     */
    compareMap : {
        before: 'lt',
        after:  'gt',
        on:     'eq'
    },
    /**
     * @cfg {String} dateFormat
     * The date format to return when using getValue.
     * Defaults to 'm/d/Y'.
     */
    dateFormat : 'm/d/Y',

    /**
     * @cfg {Date} maxDate
     * Allowable date as passed to the Ext.DatePicker
     * Defaults to undefined.
     */
    /**
     * @cfg {Date} minDate
     * Allowable date as passed to the Ext.DatePicker
     * Defaults to undefined.
     */
    /**
     * @cfg {Array} menuItems
     * The items to be shown in this menu
     * Defaults to:<pre>
     * menuItems : ['before', 'after', '-', 'on'],
     * </pre>
     */
    menuItems : ['before', 'after', '-', 'on'],

    /**
     * @cfg {Object} menuItemCfgs
     * Default configuration options for each menu item
     */
    menuItemCfgs : {
        selectOnFocus: true,
        width: 125
    },

    /**
     * @cfg {String} onText
     * Defaults to 'On'.
     */
    onText : 'On',

    /**
     * @cfg {Object} pickerOpts
     * Configuration options for the date picker associated with each field.
     */
    pickerOpts : {},

    /**
     * @private
     * Template method that is to initialize the filter and install required menu items.
     */
    init : function (config) {
        var me = this,
            pickerCfg, i, len, item, cfg;

        pickerCfg = Ext.apply(me.pickerOpts, {
            xtype: 'datepicker',
            minDate: me.minDate,
            maxDate: me.maxDate,
            format:  me.dateFormat,
            listeners: {
                scope: me,
                select: me.onMenuSelect
            }
        });

        me.fields = {};
        for (i = 0, len = me.menuItems.length; i < len; i++) {
            item = me.menuItems[i];
            if (item !== '-') {
                cfg = {
                    itemId: 'range-' + item,
                    text: me[item + 'Text'],
                    menu: Ext.create('Ext.menu.Menu', {
                        plain: true,
                        items: [
                            Ext.apply(pickerCfg, {
                                itemId: item,
                                listeners: {
                                    select: me.onPickerSelect,
                                    scope: me
                                }
                            })
                        ]
                    }),
                    listeners: {
                        scope: me,
                        checkchange: me.onCheckChange
                    }
                };
                item = me.fields[item] = Ext.create('Ext.menu.CheckItem', cfg);
            }
            //me.add(item);
            me.menu.add(item);
        }
        me.values = {};
    },

    onCheckChange : function (item, checked) {
        var me = this,
            picker = item.menu.items.first(),
            itemId = picker.itemId,
            values = me.values;

        if (checked) {
            values[itemId] = picker.getValue();
        } else {
            delete values[itemId]
        }
        me.setActive(me.isActivatable());
        me.fireEvent('update', me);
    },

    /**
     * @private
     * Handler method called when there is a keyup event on an input
     * item of this menu.
     */
    onInputKeyUp : function (field, e) {
        var k = e.getKey();
        if (k == e.RETURN && field.isValid()) {
            e.stopEvent();
            this.menu.hide();
        }
    },

    /**
     * Handler for when the DatePicker for a field fires the 'select' event
     * @param {Ext.picker.Date} picker
     * @param {Object} date
     */
    onMenuSelect : function (picker, date) {
        var fields = this.fields,
            field = this.fields[picker.itemId];

        field.setChecked(true);

        if (field == fields.on) {
            fields.before.setChecked(false, true);
            fields.after.setChecked(false, true);
        } else {
            fields.on.setChecked(false, true);
            if (field == fields.after && this.getFieldValue('before') < date) {
                fields.before.setChecked(false, true);
            } else if (field == fields.before && this.getFieldValue('after') > date) {
                fields.after.setChecked(false, true);
            }
        }
        this.fireEvent('update', this);

        picker.up('menu').hide();
    },

    /**
     * @private
     * Template method that is to get and return the value of the filter.
     * @return {String} The value of this filter
     */
    getValue : function () {
        var key, result = {};
        for (key in this.fields) {
            if (this.fields[key].checked) {
                result[key] = this.getFieldValue(key);
            }
        }
        return result;
    },

    /**
     * @private
     * Template method that is to set the value of the filter.
     * @param {Object} value The value to set the filter
     * @param {Boolean} preserve true to preserve the checked status
     * of the other fields.  Defaults to false, unchecking the
     * other fields
     */
    setValue : function (value, preserve) {
        var key;
        for (key in this.fields) {
            if(value[key]){
                this.getPicker(key).setValue(value[key]);
                this.fields[key].setChecked(true);
            } else if (!preserve) {
                this.fields[key].setChecked(false);
            }
        }
        this.fireEvent('update', this);
    },

    /**
     * Template method that is to return <tt>true</tt> if the filter
     * has enough configuration information to be activated.
     * @return {Boolean}
     */
    isActivatable : function () {
        var key;
        for (key in this.fields) {
            if (this.fields[key].checked) {
                return true;
            }
        }
        return false;
    },

    /**
     * @private
     * Template method that is to get and return serialized filter data for
     * transmission to the server.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    getSerialArgs : function () {
        var args = [];
        for (var key in this.fields) {
            if(this.fields[key].checked){
                args.push({
                    type: 'date',
                    comparison: this.compareMap[key],
                    value: Ext.Date.format(this.getFieldValue(key), this.dateFormat)
                });
            }
        }
        return args;
    },

    /**
     * Get and return the date menu picker value
     * @param {String} item The field identifier ('before', 'after', 'on')
     * @return {Date} Gets the current selected value of the date field
     */
    getFieldValue : function(item){
        return this.values[item];
    },

    /**
     * Gets the menu picker associated with the passed field
     * @param {String} item The field identifier ('before', 'after', 'on')
     * @return {Object} The menu picker
     */
    getPicker : function(item){
        return this.fields[item].menu.items.first();
    },

    /**
     * Template method that is to validate the provided Ext.data.Record
     * against the filters configuration.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord : function (record) {
        var key,
            pickerValue,
            val = record.get(this.dataIndex),
            clearTime = Ext.Date.clearTime;

        if(!Ext.isDate(val)){
            return false;
        }
        val = clearTime(val, true).getTime();

        for (key in this.fields) {
            if (this.fields[key].checked) {
                pickerValue = clearTime(this.getFieldValue(key), true).getTime();
                if (key == 'before' && pickerValue <= val) {
                    return false;
                }
                if (key == 'after' && pickerValue >= val) {
                    return false;
                }
                if (key == 'on' && pickerValue != val) {
                    return false;
                }
            }
        }
        return true;
    },

    onPickerSelect: function(picker, date) {
        // keep track of the picker value separately because the menu gets destroyed
        // when columns order changes.  We return this value from getValue() instead
        // of picker.getValue()
        this.values[picker.itemId] = date;
        this.fireEvent('update', this);
    }
});

/**
 * Filter by a configurable Ext.picker.DatePicker menu
 *
 * This filter allows for the following configurations:
 *
 * - Any of the normal configs will be passed through to either component.
 * - There can be a docked config.
 * - The timepicker can be on the right or left (datepicker, too, of course).
 * - Choose which component will initiate the filtering, i.e., the event can be
 *   configured to be bound to either the datepicker or the timepicker, or if
 *   there is a docked config it be automatically have the handler bound to it.
 *
 * Although not shown here, this class accepts all configuration options
 * for {@link Ext.picker.Date} and {@link Ext.picker.Time}.
 *
 * In the case that a custom dockedItems config is passed in, the
 * class will handle binding the default listener to it so the
 * developer need not worry about having to do it.
 *
 * The default dockedItems position and the toolbar's
 * button text can be passed a config for convenience, i.e.,:
 *
 *     dock: {
 *        buttonText: 'Click to Filter',
 *        dock: 'left'
 *     }
 *
 * Or, pass in a full dockedItems config:
 *
 *     dock: {
 *        dockedItems: {
 *            xtype: 'toolbar',
 *            dock: 'bottom',
 *            ...
 *        }
 *     }
 *
 * Or, give a value of `true` to accept dock defaults:
 *
 *     dock: true
 *
 * But, it must be one or the other.
 *
 * Example Usage:
 *
 *     var filters = Ext.create('Ext.ux.grid.GridFilters', {
 *         ...
 *         filters: [{
 *             // required configs
 *             type: 'datetime',
 *             dataIndex: 'date',
 *
 *             // optional configs
 *             positionDatepickerFirst: false,
 *             //selectDateToFilter: false, // this is overridden b/c of the presence of the dock cfg object
 *
 *             date: {
 *                 format: 'm/d/Y',
 *             },
 *
 *             time: {
 *                 format: 'H:i:s A',
 *                 increment: 1
 *             },
 *
 *             dock: {
 *                 buttonText: 'Click to Filter',
 *                 dock: 'left'
 *
 *                 // allows for custom dockedItems cfg
 *                 //dockedItems: {}
 *             }
 *         }]
 *     });
 *
 * In the above example, note that the filter is being passed a {@link #date} config object,
 * a {@link #time} config object and a {@link #dock} config. These are all optional.
 *
 * As for positioning, the datepicker will be on the right, the timepicker on the left
 * and the docked items will be docked on the left. In addition, since there's a {@link #dock}
 * config, clicking the button in the dock will trigger the filtering.
 */
Ext.define('Ext.ux.grid.filter.DateTimeFilter', {
    extend:  Ext.ux.grid.filter.DateFilter ,
    alias: 'gridfilter.datetime',

    /**
     * @private
     */
    dateDefaults: {
        xtype: 'datepicker',
        format: 'm/d/Y'
    },

    /**
     * @private
     */
    timeDefaults: {
        xtype: 'timepicker',
        width: 100,
        height: 200,
        format: 'g:i A'
    },

    /**
     * @private
     */
    dockDefaults: {
        dock: 'top',
        buttonText: 'Filter'
    },

    /**
     * @cfg {Object} date
     * A {@link Ext.picker.Date} can be configured here.
     * Uses {@link #dateDefaults} by default.
     */

    /**
     * @cfg {Object} time
     * A {@link Ext.picker.Time} can be configured here.
     * Uses {@link #timeDefaults} by default.
     */

    /**
     * @cfg {Boolean/Object} dock
     * A {@link Ext.panel.AbstractPanel#cfg-dockedItems} can be configured here.
     * A `true` value will use the {@link #dockDefaults} default configuration.
     * If present, the button in the docked items will initiate the filtering.
     */

    /**
     * @cfg {Boolean} [selectDateToFilter=true]
     * By default, the datepicker has the default event listener bound to it.
     * Setting to `false` will bind it to the timepicker.
     *
     * The config will be ignored if there is a `dock` config.
     */
    selectDateToFilter: true,

    /**
     * @cfg {Boolean} [positionDatepickerFirst=true]
     * Positions the datepicker within its container.
     * A `true` value will place it on the left in the container.
     * Set to `false` if the timepicker should be placed on the left.
     * Defaults to `true`.
     */
    positionDatepickerFirst: true,

    reTime: /\s(am|pm)/i,
    reItemId: /\w*-(\w*)$/,

    /**
     * Replaces the selected value of the timepicker with the default 00:00:00.
     * @private
     * @param {Object} date
     * @param {Ext.picker.Time} timepicker
     * @return Date object
     */
    addTimeSelection: function (date, timepicker) {
        var me = this,
            selection = timepicker.getSelectionModel().getSelection(),
            time, len, fn, val,
            i = 0,
            arr = [],
            timeFns = ['setHours', 'setMinutes', 'setSeconds', 'setMilliseconds'];


        if (selection.length) {
            time = selection[0].get('disp');

            // Loop through all of the splits and add the time values.
            arr = time.replace(me.reTime, '').split(':');

            for (len = arr.length; i < len; i++) {
                fn = timeFns[i];
                val = arr[i];

                if (val) {
                    date[fn](parseInt(val, 10));
                }
            }
        }

        return date;
    },

    /**
     * @private
     * Template method that is to initialize the filter and install required menu items.
     */
    init: function (config) {
        var me = this,
            dateCfg = Ext.applyIf(me.date || {}, me.dateDefaults),
            timeCfg = Ext.applyIf(me.time || {}, me.timeDefaults),
            dockCfg = me.dock, // should not default to empty object
            defaultListeners = {
                click: {
                    scope: me,
                    click: me.onMenuSelect
                },
                select: {
                    scope: me,
                    select: me.onMenuSelect
                }
            },
            pickerCtnCfg, i, len, item, cfg,
            items = [dateCfg, timeCfg],

            // we need to know the datepicker's position in the items array
            // for when the itemId name is bound to it before adding to the menu
            datepickerPosition = 0;

        if (!me.positionDatepickerFirst) {
            items = items.reverse();
            datepickerPosition = 1;
        }

        pickerCtnCfg = Ext.apply(me.pickerOpts, {
            xtype: !dockCfg ? 'container' : 'panel',
            layout: 'hbox',
            items: items
        });

        // If there's no dock config then bind the default listener to the desired picker.
        if (!dockCfg) {
            if (me.selectDateToFilter) {
                dateCfg.listeners = defaultListeners.select;
            } else {
                timeCfg.listeners = defaultListeners.select;
            }
        } else if (dockCfg) {
            me.selectDateToFilter = null;

            if (dockCfg.dockedItems) {
                pickerCtnCfg.dockedItems = dockCfg.dockedItems;
                // TODO: allow config that will tell which item to bind the listener to
                // right now, it's using the first item
                pickerCtnCfg.dockedItems.items[dockCfg.bindToItem || 0].listeners = defaultListeners.click;
            } else {
                // dockCfg can be `true` if button text and dock position defaults are wanted
                if (Ext.isBoolean(dockCfg)) {
                    dockCfg = {};
                }
                dockCfg = Ext.applyIf(dockCfg, me.dockDefaults);
                pickerCtnCfg.dockedItems = {
                    xtype: 'toolbar',
                    dock: dockCfg.dock,
                    items: [
                        {
                            xtype: 'button',
                            text: dockCfg.buttonText,
                            flex: 1,
                            listeners: defaultListeners.click
                        }
                    ]   
                };
            }
        }

        me.fields = {};
        for (i = 0, len = me.menuItems.length; i < len; i++) {
            item = me.menuItems[i];
            if (item !== '-') {
                pickerCtnCfg.items[datepickerPosition].itemId = item;

                cfg = {
                    itemId: 'range-' + item,
                    text: me[item + 'Text'],
                    menu: Ext.create('Ext.menu.Menu', {
                        items: pickerCtnCfg
                    }),
                    listeners: {
                        scope: me,
                        checkchange: me.onCheckChange
                    }
                };
                item = me.fields[item] = Ext.create('Ext.menu.CheckItem', cfg);
            }
            me.menu.add(item);
        }
        me.values = {};
    },

    /**
     * @private
     */
    onCheckChange: function (item, checked) {
        var me = this,
            menu = item.menu,
            timepicker = menu.down('timepicker'),
            datepicker = menu.down('datepicker'),
            itemId = datepicker.itemId,
            values = me.values;

        if (checked) {
            values[itemId] = me.addTimeSelection(datepicker.value, timepicker);
        } else {
            delete values[itemId];
        }
        me.setActive(me.isActivatable());
        me.fireEvent('update', me);
    },

    /** 
     * Handler for when the DatePicker for a field fires the 'select' event
     * @param {Ext.picker.Date} picker
     * @param {Object} date
     */
    onMenuSelect: function (picker, date) {
        // NOTE: we need to redefine the picker.
        var me = this,
            menu = me.menu,
            checkItemId = menu.getFocusEl().itemId.replace(me.reItemId, '$1'),
            fields = me.fields,
            field;

        picker = menu.queryById(checkItemId);
        field = me.fields[picker.itemId];
        field.setChecked(true);

        if (field == fields.on) {
            fields.before.setChecked(false, true);
            fields.after.setChecked(false, true);
        } else {
            fields.on.setChecked(false, true);
            if (field == fields.after && me.getFieldValue('before') < date) {
                fields.before.setChecked(false, true);
            } else if (field == fields.before && me.getFieldValue('after') > date) {
                fields.after.setChecked(false, true);
            }   
        }   
        me.fireEvent('update', me);

        // The timepicker's getBubbleTarget() returns the boundlist's implementation,
        // so it doesn't look up ownerCt chain (it looks up this.pickerField).
        // This is a problem :)
        // This can be fixed by just walking up the ownerCt chain
        // (same thing, but confusing without comment).
        picker.ownerCt.ownerCt.hide();
    },

    /**
     * @private
     * Template method that is to get and return serialized filter data for
     * transmission to the server.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    getSerialArgs: function () {
        var me = this,
            key,
            fields = me.fields,
            args = [];

        for (key in fields) {
            if (fields[key].checked) {
                args.push({
                    type: 'datetime',
                    comparison: me.compareMap[key],
                    value: Ext.Date.format(me.getFieldValue(key), (me.date.format || me.dateDefaults.format) + ' ' + (me.time.format || me.timeDefaults.format))
                });
            }
        }
        return args;
    },

    /**
     * @private
     * Template method that is to set the value of the filter.
     * @param {Object} value The value to set the filter
     * @param {Boolean} preserve true to preserve the checked status
     * of the other fields.  Defaults to false, unchecking the
     * other fields
     */
    setValue: function (value, preserve) {
        var me = this,
            fields = me.fields,
            key,
            val,
            datepicker;

        for (key in fields) {
            val = value[key];
            if (val) {
                datepicker = me.menu.down('datepicker[itemId="' + key + '"]');
                // Note that calling the Ext.picker.Date:setValue() calls Ext.Date.clearTime(),
                // which we don't want, so just call update() instead and set the value on the component.
                datepicker.update(val);
                datepicker.value = val;

                fields[key].setChecked(true);
            } else if (!preserve) {
                fields[key].setChecked(false);
            }
        }
        me.fireEvent('update', me);
    },

    /**
     * Template method that is to validate the provided Ext.data.Record
     * against the filters configuration.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord: function (record) {
        // remove calls to Ext.Date.clearTime
        var me = this,
            key,
            pickerValue,
            val = record.get(me.dataIndex);

        if(!Ext.isDate(val)){
            return false;
        }

        val = val.getTime();

        for (key in me.fields) {
            if (me.fields[key].checked) {
                pickerValue = me.getFieldValue(key).getTime();
                if (key == 'before' && pickerValue <= val) {
                    return false;
                }
                if (key == 'after' && pickerValue >= val) {
                    return false;
                }
                if (key == 'on' && pickerValue != val) {
                    return false;
                }
            }
        }
        return true;
    }
});

/**
 * List filters are able to be preloaded/backed by an Ext.data.Store to load
 * their options the first time they are shown. ListFilter utilizes the
 * {@link Ext.ux.grid.menu.ListMenu} component.
 *
 * List filters are also able to create their own list of values from  all unique values of
 * the specified {@link #dataIndex} field in the store at first time of filter invocation.
 *
 * Although not shown here, this class accepts all configuration options
 * for {@link Ext.ux.grid.menu.ListMenu}.
 *
 * Example Usage:
 *
 *     var filters = Ext.create('Ext.ux.grid.GridFilters', {
 *         ...
 *         filters: [{
 *             type: 'list',
 *             dataIndex: 'size',
 *             phpMode: true,
 *             // options will be used as data to implicitly creates an ArrayStore
 *             options: ['extra small', 'small', 'medium', 'large', 'extra large']
 *         }]
 *     });
 *
 */
Ext.define('Ext.ux.grid.filter.ListFilter', {
    extend:  Ext.ux.grid.filter.Filter ,
    alias: 'gridfilter.list',

    /**
     * @cfg {Array} [options]
     * `data` to be used to implicitly create a data store
     * to back this list when the data source is **local**. If the
     * data for the list is remote, use the {@link #store}
     * config instead.
     *
     * If neither store nor {@link #options} is specified, then the choices list is automatically
     * populated from all unique values of the specified {@link #dataIndex} field in the store at first
     * time of filter invocation.
     *
     * Each item within the provided array may be in one of the
     * following formats:
     *
     *   - **Array** :
     *
     *         options: [
     *             [11, 'extra small'],
     *             [18, 'small'],
     *             [22, 'medium'],
     *             [35, 'large'],
     *             [44, 'extra large']
     *         ]
     *
     *   - **Object** :
     *
     *         labelField: 'name', // override default of 'text'
     *         options: [
     *             {id: 11, name:'extra small'},
     *             {id: 18, name:'small'},
     *             {id: 22, name:'medium'},
     *             {id: 35, name:'large'},
     *             {id: 44, name:'extra large'}
     *         ]
     * 
     *   - **String** :
     *
     *         options: ['extra small', 'small', 'medium', 'large', 'extra large']
     *
     */
    /**
     * @cfg {Boolean} phpMode
     * Adjust the format of this filter. Defaults to false.
     *
     * When GridFilters `@cfg encode = false` (default):
     *
     *     // phpMode == false (default):
     *     filter[0][data][type] list
     *     filter[0][data][value] value1
     *     filter[0][data][value] value2
     *     filter[0][field] prod
     *
     *     // phpMode == true:
     *     filter[0][data][type] list
     *     filter[0][data][value] value1, value2
     *     filter[0][field] prod
     *
     * When GridFilters `@cfg encode = true`:
     *
     *     // phpMode == false (default):
     *     filter : [{"type":"list","value":["small","medium"],"field":"size"}]
     *
     *     // phpMode == true:
     *     filter : [{"type":"list","value":"small,medium","field":"size"}]
     *
     */
    phpMode : false,
    /**
     * @cfg {Ext.data.Store} [store]
     * The {@link Ext.data.Store} this list should use as its data source
     * when the data source is **remote**. If the data for the list
     * is local, use the {@link #options} config instead.
     *
     * If neither store nor {@link #options} is specified, then the choices list is automatically
     * populated from all unique values of the specified {@link #dataIndex} field in the store at first
     * time of filter invocation.
     */

    /**
     * @private
     * Template method that is to initialize the filter.
     * @param {Object} config
     */
    init : function (config) {
        this.dt = Ext.create('Ext.util.DelayedTask', this.fireUpdate, this);
    },

    /**
     * @private @override
     * Creates the Menu for this filter.
     * @param {Object} config Filter configuration
     * @return {Ext.menu.Menu}
     */
    createMenu: function(config) {
        var menu = Ext.create('Ext.ux.grid.menu.ListMenu', config);
        menu.on('checkchange', this.onCheckChange, this);
        return menu;
    },

    /**
     * @private
     * Template method that is to get and return the value of the filter.
     * @return {String} The value of this filter
     */
    getValue : function () {
        return this.menu.getSelected();
    },
    /**
     * @private
     * Template method that is to set the value of the filter.
     * @param {Object} value The value to set the filter
     */
    setValue : function (value) {
        this.menu.setSelected(value);
        this.fireEvent('update', this);
    },

    /**
     * Template method that is to return true if the filter
     * has enough configuration information to be activated.
     * @return {Boolean}
     */
    isActivatable : function () {
        return this.getValue().length > 0;
    },

    /**
     * @private
     * Template method that is to get and return serialized filter data for
     * transmission to the server.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    getSerialArgs : function () {
        return {type: 'list', value: this.phpMode ? this.getValue().join(',') : this.getValue()};
    },

    /** @private */
    onCheckChange : function(){
        this.dt.delay(this.updateBuffer);
    },


    /**
     * Template method that is to validate the provided Ext.data.Record
     * against the filters configuration.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord : function (record) {
        var valuesArray = this.getValue();
        return Ext.Array.indexOf(valuesArray, record.get(this.dataIndex)) > -1;
    }
});

/**
 * Filters using an Ext.ux.grid.menu.RangeMenu.
 * <p><b><u>Example Usage:</u></b></p>
 * <pre><code>
var filters = Ext.create('Ext.ux.grid.GridFilters', {
    ...
    filters: [{
        type: 'numeric',
        dataIndex: 'price'
    }]
});
 * </code></pre>
 * <p>Any of the configuration options for {@link Ext.ux.grid.menu.RangeMenu} can also be specified as
 * configurations to NumericFilter, and will be copied over to the internal menu instance automatically.</p>
 */
Ext.define('Ext.ux.grid.filter.NumericFilter', {
    extend:  Ext.ux.grid.filter.Filter ,
    alias: 'gridfilter.numeric',
                                    

    /**
     * @private @override
     * Creates the Menu for this filter.
     * @param {Object} config Filter configuration
     * @return {Ext.menu.Menu}
     */
    createMenu: function(config) {
        var me = this,
            menu;
        menu = Ext.create('Ext.ux.grid.menu.RangeMenu', config);
        menu.on('update', me.fireUpdate, me);
        return menu;
    },

    /**
     * @private
     * Template method that is to get and return the value of the filter.
     * @return {String} The value of this filter
     */
    getValue : function () {
        return this.menu.getValue();
    },

    /**
     * @private
     * Template method that is to set the value of the filter.
     * @param {Object} value The value to set the filter
     */
    setValue : function (value) {
        this.menu.setValue(value);
    },

    /**
     * Template method that is to return <tt>true</tt> if the filter
     * has enough configuration information to be activated.
     * @return {Boolean}
     */
    isActivatable : function () {
        var values = this.getValue(),
            key;
        for (key in values) {
            if (values[key] !== undefined) {
                return true;
            }
        }
        return false;
    },

    /**
     * @private
     * Template method that is to get and return serialized filter data for
     * transmission to the server.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    getSerialArgs : function () {
        var key,
            args = [],
            values = this.menu.getValue();
        for (key in values) {
            args.push({
                type: 'numeric',
                comparison: key,
                value: values[key]
            });
        }
        return args;
    },

    /**
     * Template method that is to validate the provided Ext.data.Record
     * against the filters configuration.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord : function (record) {
        var val = record.get(this.dataIndex),
            values = this.getValue(),
            isNumber = Ext.isNumber;
        if (isNumber(values.eq) && val != values.eq) {
            return false;
        }
        if (isNumber(values.lt) && val >= values.lt) {
            return false;
        }
        if (isNumber(values.gt) && val <= values.gt) {
            return false;
        }
        return true;
    }
});

/**
 * Filter by a configurable Ext.form.field.Text
 * <p><b><u>Example Usage:</u></b></p>
 * <pre><code>
var filters = Ext.create('Ext.ux.grid.GridFilters', {
    ...
    filters: [{
        // required configs
        type: 'string',
        dataIndex: 'name',

        // optional configs
        value: 'foo',
        active: true, // default is false
        iconCls: 'ux-gridfilter-text-icon' // default
        // any Ext.form.field.Text configs accepted
    }]
});
 * </code></pre>
 */
Ext.define('Ext.ux.grid.filter.StringFilter', {
    extend:  Ext.ux.grid.filter.Filter ,
    alias: 'gridfilter.string',

    /**
     * @cfg {String} iconCls
     * The iconCls to be applied to the menu item.
     * Defaults to <tt>'ux-gridfilter-text-icon'</tt>.
     */
    iconCls : 'ux-gridfilter-text-icon',

    emptyText: 'Enter Filter Text...',
    selectOnFocus: true,
    width: 125,

    /**
     * @private
     * Template method that is to initialize the filter and install required menu items.
     */
    init : function (config) {
        Ext.applyIf(config, {
            enableKeyEvents: true,
            labelCls: 'ux-rangemenu-icon ' + this.iconCls,
            hideEmptyLabel: false,
            labelSeparator: '',
            labelWidth: 29,
            listeners: {
                scope: this,
                keyup: this.onInputKeyUp,
                el: {
                    click: function(e) {
                        e.stopPropagation();
                    }
                }
            }
        });

        this.inputItem = Ext.create('Ext.form.field.Text', config);
        this.menu.add(this.inputItem);
        this.menu.showSeparator = false;
        this.updateTask = Ext.create('Ext.util.DelayedTask', this.fireUpdate, this);
    },

    /**
     * @private
     * Template method that is to get and return the value of the filter.
     * @return {String} The value of this filter
     */
    getValue : function () {
        return this.inputItem.getValue();
    },

    /**
     * @private
     * Template method that is to set the value of the filter.
     * @param {Object} value The value to set the filter
     */
    setValue : function (value) {
        this.inputItem.setValue(value);
        this.fireEvent('update', this);
    },

    /**
     * Template method that is to return <tt>true</tt> if the filter
     * has enough configuration information to be activated.
     * @return {Boolean}
     */
    isActivatable : function () {
        return this.inputItem.getValue().length > 0;
    },

    /**
     * @private
     * Template method that is to get and return serialized filter data for
     * transmission to the server.
     * @return {Object/Array} An object or collection of objects containing
     * key value pairs representing the current configuration of the filter.
     */
    getSerialArgs : function () {
        return {type: 'string', value: this.getValue()};
    },

    /**
     * Template method that is to validate the provided Ext.data.Record
     * against the filters configuration.
     * @param {Ext.data.Record} record The record to validate
     * @return {Boolean} true if the record is valid within the bounds
     * of the filter, false otherwise.
     */
    validateRecord : function (record) {
        var val = record.get(this.dataIndex);

        if(typeof val != 'string') {
            return (this.getValue().length === 0);
        }

        return val.toLowerCase().indexOf(this.getValue().toLowerCase()) > -1;
    },

    /**
     * @private
     * Handler method called when there is a keyup event on this.inputItem
     */
    onInputKeyUp : function (field, e) {
        var k = e.getKey();
        if (k == e.RETURN && field.isValid()) {
            e.stopEvent();
            this.menu.hide();
            return;
        }
        // restart the timer
        this.updateTask.delay(this.updateBuffer);
    }
});

/**
 * This is a supporting class for {@link Ext.ux.grid.filter.ListFilter}.
 * Although not listed as configuration options for this class, this class
 * also accepts all configuration options from {@link Ext.ux.grid.filter.ListFilter}.
 */
Ext.define('Ext.ux.grid.menu.ListMenu', {
    extend:  Ext.menu.Menu ,
    
    /**
     * @cfg {String} idField
     * Defaults to 'id'.
     */
    idField :  'id',

    /**
     * @cfg {String} labelField
     * Defaults to 'text'.
     */
    labelField :  'text',
    /**
     * @cfg {String} paramPrefix
     * Defaults to 'Loading...'.
     */
    loadingText : 'Loading...',
    /**
     * @cfg {Boolean} loadOnShow
     * Defaults to true.
     */
    loadOnShow : true,
    /**
     * @cfg {Boolean} single
     * Specify true to group all items in this list into a single-select
     * radio button group. Defaults to false.
     */
    single : false,

    plain: true,

    constructor : function (cfg) {
        var me = this,
            options,
            i,
            len,
            value;
            
        me.selected = [];
        me.addEvents(
            /**
             * @event checkchange
             * Fires when there is a change in checked items from this list
             * @param {Object} item Ext.menu.CheckItem
             * @param {Object} checked The checked value that was set
             */
            'checkchange'
        );

        me.callParent(arguments);

        // A ListMenu which is completely unconfigured acquires its store from the unique values of its field in the store
        if (!me.store && !me.options) {
            me.options = me.grid.store.collect(me.dataIndex, false, true);
        }

        if (!me.store && me.options) {
            options = [];
            for(i = 0, len = me.options.length; i < len; i++) {
                value = me.options[i];
                switch (Ext.type(value)) {
                    case 'array': 
                        options.push(value);
                        break;
                    case 'object':
                        options.push([value[me.idField], value[me.labelField]]);
                        break;
                    default:
                        if (value != null) {
                            options.push([value, value]);
                        }
                }
            }

            me.store = Ext.create('Ext.data.ArrayStore', {
                fields: [me.idField, me.labelField],
                data:   options,
                listeners: {
                    load: me.onLoad,
                    scope:  me
                }
            });
            me.loaded = true;
            me.autoStore = true;
        } else {
            me.add({
                text: me.loadingText,
                iconCls: 'loading-indicator'
            });
            me.store.on('load', me.onLoad, me);
        }
    },

    destroy : function () {
        var me = this,
            store = me.store;
            
        if (store) {
            if (me.autoStore) {
                store.destroyStore();
            } else {
                store.un('unload', me.onLoad, me);
            }
        }
        me.callParent();
    },

    /**
     * Lists will initially show a 'loading' item while the data is retrieved from the store.
     * In some cases the loaded data will result in a list that goes off the screen to the
     * right (as placement calculations were done with the loading item). This adapter will
     * allow show to be called with no arguments to show with the previous arguments and
     * thus recalculate the width and potentially hang the menu from the left.
     */
    show : function () {
        var me = this;
        if (me.loadOnShow && !me.loaded && !me.store.loading) {
            me.store.load();
        }
        me.callParent();
    },

    /** @private */
    onLoad : function (store, records) {
        var me = this,
            gid, itemValue, i, len,
            listeners = {
                checkchange: me.checkChange,
                scope: me
            };

        Ext.suspendLayouts();
        me.removeAll(true);
        gid = me.single ? Ext.id() : null;
        for (i = 0, len = records.length; i < len; i++) {
            itemValue = records[i].get(me.idField);
            me.add(Ext.create('Ext.menu.CheckItem', {
                text: records[i].get(me.labelField),
                group: gid,
                checked: Ext.Array.contains(me.selected, itemValue),
                hideOnClick: false,
                value: itemValue,
                listeners: listeners
            }));
        }

        me.loaded = true;
        Ext.resumeLayouts(true);
        me.fireEvent('load', me, records);
    },

    /**
     * Get the selected items.
     * @return {Array} selected
     */
    getSelected : function () {
        return this.selected;
    },

    /** @private */
    setSelected : function (value) {
        value = this.selected = [].concat(value);

        if (this.loaded) {
            this.items.each(function(item){
                item.setChecked(false, true);
                for (var i = 0, len = value.length; i < len; i++) {
                    if (item.value == value[i]) {
                        item.setChecked(true, true);
                    }
                }
            });
        }
    },

    /**
     * Handler for the 'checkchange' event from an check item in this menu
     * @param {Object} item Ext.menu.CheckItem
     * @param {Object} checked The checked value that was set
     */
    checkChange : function (item, checked) {
        var value = [];
        this.items.each(function(item){
            if (item.checked) {
                value.push(item.value);
            }
        });
        this.selected = value;

        this.fireEvent('checkchange', item, checked);
    }
});

/**
 * Custom implementation of {@link Ext.menu.Menu} that has preconfigured items for entering numeric
 * range comparison values: less-than, greater-than, and equal-to. This is used internally
 * by {@link Ext.ux.grid.filter.NumericFilter} to create its menu.
 */
Ext.define('Ext.ux.grid.menu.RangeMenu', {
    extend:  Ext.menu.Menu ,

    /**
     * @cfg {String} fieldCls
     * The Class to use to construct each field item within this menu
     * Defaults to:<pre>
     * fieldCls : Ext.form.field.Number
     * </pre>
     */
    fieldCls : 'Ext.form.field.Number',

    /**
     * @cfg {Object} fieldCfg
     * The default configuration options for any field item unless superseded
     * by the <code>{@link #fields}</code> configuration.
     * Defaults to:<pre>
     * fieldCfg : {}
     * </pre>
     * Example usage:
     * <pre><code>
fieldCfg : {
    width: 150,
},
     * </code></pre>
     */

    /**
     * @cfg {Object} fields
     * The field items may be configured individually
     * Defaults to <tt>undefined</tt>.
     * Example usage:
     * <pre><code>
fields : {
    gt: { // override fieldCfg options
        width: 200,
        fieldCls: Ext.ux.form.CustomNumberField // to override default {@link #fieldCls}
    }
},
     * </code></pre>
     */

    /**
     * @cfg {Object} itemIconCls
     * The itemIconCls to be applied to each comparator field item.
     * Defaults to:<pre>
itemIconCls : {
    gt : 'ux-rangemenu-gt',
    lt : 'ux-rangemenu-lt',
    eq : 'ux-rangemenu-eq'
}
     * </pre>
     */
    itemIconCls : {
        gt : 'ux-rangemenu-gt',
        lt : 'ux-rangemenu-lt',
        eq : 'ux-rangemenu-eq'
    },

    /**
     * @cfg {Object} fieldLabels
     * Accessible label text for each comparator field item. Can be overridden by localization
     * files. Defaults to:<pre>
fieldLabels : {
     gt: 'Greater Than',
     lt: 'Less Than',
     eq: 'Equal To'
}</pre>
     */
    fieldLabels: {
        gt: 'Greater Than',
        lt: 'Less Than',
        eq: 'Equal To'
    },

    /**
     * @cfg {Object} menuItemCfgs
     * Default configuration options for each menu item
     * Defaults to:<pre>
menuItemCfgs : {
    emptyText: 'Enter Filter Text...',
    selectOnFocus: true,
    width: 125
}
     * </pre>
     */
    menuItemCfgs : {
        emptyText: 'Enter Number...',
        selectOnFocus: false,
        width: 155
    },

    /**
     * @cfg {Array} menuItems
     * The items to be shown in this menu.  Items are added to the menu
     * according to their position within this array. Defaults to:<pre>
     * menuItems : ['lt','gt','-','eq']
     * </pre>
     */
    menuItems : ['lt', 'gt', '-', 'eq'],

    plain: true,

    constructor : function (config) {
        var me = this,
            fields, fieldCfg, i, len, item, cfg, Cls;

        me.callParent(arguments);

        fields = me.fields = me.fields || {};
        fieldCfg = me.fieldCfg = me.fieldCfg || {};
        
        me.addEvents(
            /**
             * @event update
             * Fires when a filter configuration has changed
             * @param {Ext.ux.grid.filter.Filter} this The filter object.
             */
            'update'
        );
      
        me.updateTask = Ext.create('Ext.util.DelayedTask', me.fireUpdate, me);
    
        for (i = 0, len = me.menuItems.length; i < len; i++) {
            item = me.menuItems[i];
            if (item !== '-') {
                // defaults
                cfg = {
                    itemId: 'range-' + item,
                    enableKeyEvents: true,
                    hideEmptyLabel: false,
                    labelCls: 'ux-rangemenu-icon ' + me.itemIconCls[item],
                    labelSeparator: '',
                    labelWidth: 29,
                    listeners: {
                        scope: me,
                        change: me.onInputChange,
                        keyup: me.onInputKeyUp,
                        el: {
                            click: this.stopFn
                        }
                    },
                    activate: Ext.emptyFn,
                    deactivate: Ext.emptyFn
                };
                Ext.apply(
                    cfg,
                    // custom configs
                    Ext.applyIf(fields[item] || {}, fieldCfg[item]),
                    // configurable defaults
                    me.menuItemCfgs
                );
                Cls = cfg.fieldCls || me.fieldCls;
                item = fields[item] = Ext.create(Cls, cfg);
            }
            me.add(item);
        }
    },
    
    stopFn: function(e) {
        e.stopPropagation();
    },

    /**
     * @private
     * called by this.updateTask
     */
    fireUpdate : function () {
        this.fireEvent('update', this);
    },
    
    /**
     * Get and return the value of the filter.
     * @return {String} The value of this filter
     */
    getValue : function () {
        var result = {},
            fields = this.fields, 
            key, field;
            
        for (key in fields) {
            if (fields.hasOwnProperty(key)) {
                field = fields[key];
                if (field.isValid() && field.getValue() !== null) {
                    result[key] = field.getValue();
                }
            }
        }
        return result;
    },
  
    /**
     * Set the value of this menu and fires the 'update' event.
     * @param {Object} data The data to assign to this menu
     */	
    setValue : function (data) {
        var me = this,
            fields = me.fields,
            key,
            field;

        for (key in fields) {
            if (fields.hasOwnProperty(key)) {
                // Prevent field's change event from tiggering a Store filter. The final upate event will do that
                field =fields[key];
                field.suspendEvents();
                field.setValue(key in data ? data[key] : '');
                field.resumeEvents();
            }
        }

        // Trigger the filering of the Store
        me.fireEvent('update', me);
    },

    /**  
     * @private
     * Handler method called when there is a keyup event on an input
     * item of this menu.
     */
    onInputKeyUp: function(field, e) {
        if (e.getKey() === e.RETURN && field.isValid()) {
            e.stopEvent();
            this.hide();
        }
    },

    /**
     * @private
     * Handler method called when the user changes the value of one of the input
     * items in this menu.
     */
    onInputChange: function(field) {
        var me = this,
            fields = me.fields,
            eq = fields.eq,
            gt = fields.gt,
            lt = fields.lt;

        if (field == eq) {
            if (gt) {
                gt.setValue(null);
            }
            if (lt) {
                lt.setValue(null);
            }
        }
        else {
            eq.setValue(null);
        }

        // restart the timer
        this.updateTask.delay(this.updateBuffer);
    }
});

